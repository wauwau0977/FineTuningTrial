{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/main.ts. Directly output the source content.", "input": "", "output": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/polyfills.ts. Directly output the source content.", "input": "", "output": "/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes recent versions of Safari, Chrome (including\n * Opera), Edge on the desktop, and iOS and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/test.ts. Directly output the source content.", "input": "", "output": "// This file is required by karma.conf.js and loads recursively all the .spec and framework files\n\nimport 'zone.js/testing';\nimport { getTestBed } from '@angular/core/testing';\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting\n} from '@angular/platform-browser-dynamic/testing';\n\ndeclare const require: {\n  context(path: string, deep?: boolean, filter?: RegExp): {\n    <T>(id: string): T;\n    keys(): string[];\n  };\n};\n\n// First, initialize the Angular testing environment.\ngetTestBed().initTestEnvironment(\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting(),\n);\n\n// Then we find all the tests.\nconst context = require.context('./', true, /\\.spec\\.ts$/);\n// And load the modules.\ncontext.keys().map(context);"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/app-routing.module.ts. Directly output the source content.", "input": "", "output": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/app.component.spec.ts. Directly output the source content.", "input": "", "output": "import { TestBed } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { AppComponent } from './app.component';\n\ndescribe('AppComponent', () => {\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [\n        RouterTestingModule\n      ],\n      declarations: [\n        AppComponent\n      ],\n    }).compileComponents();\n  });\n\n  it('should create the app', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app).toBeTruthy();\n  });\n\n  it(`should have as title 'thserver-client'`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app.title).toEqual('thserver-client');\n  });\n\n  it('should render title', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.nativeElement as HTMLElement;\n    expect(compiled.querySelector('.content span')?.textContent).toContain('thserver-client app is running!');\n  });\n});"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/app.component.ts. Directly output the source content.", "input": "", "output": "import {Component} from '@angular/core';\nimport {interval} from \"rxjs\";\nimport {environment} from \"../environments/environment\";\nimport {HeatingDataService} from \"./heating-data.service\";\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.sass']\n})\nexport class AppComponent {\n\n  title = 'thserver-client';\n\n\n  constructor() {\n    console.log(\"Setup the page refresh mechanism all \" + environment.fullPageRefreshInSeconds + \" seconds.\");\n\n    // figure out a client id\n\n  }\n\n  myFullPageRefresh(): void {\n    window.location.reload();\n  }\n\n  subscribe = interval(environment.fullPageRefreshInSeconds * 1000).subscribe(\n    val => {\n      console.log(\"Execute full page refresh... \")\n      this.myFullPageRefresh();\n    }\n  );\n\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/app.module.ts. Directly output the source content.", "input": "", "output": "import {LOCALE_ID, NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {OverviewCurrentComponent} from './overview-current/overview-current.component';\n\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\nimport {MatCardModule} from \"@angular/material/card\";\nimport {BoilerChartComponent} from './boiler-chart/boiler-chart.component';\n\nimport {HighchartsChartModule} from 'highcharts-angular';\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatExpansionModule} from \"@angular/material/expansion\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatDatepickerModule} from \"@angular/material/datepicker\";\nimport {MAT_DATE_LOCALE, MatNativeDateModule} from \"@angular/material/core\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSliderModule} from \"@angular/material/slider\";\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\nimport {NgxMaterialTimepickerModule} from 'ngx-material-timepicker';\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {MatGridListModule} from \"@angular/material/grid-list\";\nimport {ServiceWorkerModule} from '@angular/service-worker';\nimport {environment} from '../environments/environment';\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\nimport {MyHttpInterceptor} from \"./my-http-interceptor.service\";\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatCheckboxModule} from \"@angular/material/checkbox\";\nimport {MatDividerModule} from \"@angular/material/divider\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {AboutComponent} from './about/about.component';\nimport {OverviewCurrentGaugeComponent} from \"./overview-current/overview-current-gauge.component\";\nimport {HashLocationStrategy, LocationStrategy, registerLocaleData} from \"@angular/common\";\nimport localeDeCH from '@angular/common/locales/de-CH';\n\n\nexport const routes: Routes = [\n  {path: 'dashboard', component: OverviewCurrentComponent},\n  {path: 'insights', component: BoilerChartComponent},\n  {path: 'about', component: AboutComponent},\n  {path: '', redirectTo: 'dashboard', pathMatch: 'full'},\n  {path: '**', redirectTo: 'dashboard', pathMatch: 'full'}\n];\n\nregisterLocaleData(localeDeCH);\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    OverviewCurrentComponent,\n    OverviewCurrentGaugeComponent,\n    BoilerChartComponent,\n    AboutComponent\n  ],\n  imports: [\n    RouterModule.forRoot(routes),\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule, // attention: two ways of doing forms: required by many other components, e.g. Slider, etc\n    ReactiveFormsModule, // attention: two ways of doing forms: required by many other components, e.g. Slider, etc\n    FlexLayoutModule,\n    MatCardModule,\n    HighchartsChartModule,\n    MatIconModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    NgxMaterialTimepickerModule,\n    NgxMaterialTimepickerModule.setLocale('de-CH'),\n    MatProgressSpinnerModule,\n    MatGridListModule,\n    MatToolbarModule,\n    MatSelectModule,\n    MatSnackBarModule,\n    ServiceWorkerModule.register('ngsw-worker.js', {\n      enabled: environment.production,\n      // Register the ServiceWorker as soon as the app is stable\n      // or after x seconds (whichever comes first).\n      // registrationStrategy: 'registerWhenStable:30000'"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/app.module.ts. Directly output the source content.", "input": "", "output": "      registrationStrategy: 'registerImmediately'\n    }),\n    MatCheckboxModule,\n    MatDividerModule,\n  ],\n  providers: [\n    {provide: MAT_DATE_LOCALE, useValue: 'de-CH'},\n    {provide: LOCALE_ID, useValue: 'de-CH'},\n    {provide: HTTP_INTERCEPTORS, useClass: MyHttpInterceptor, multi: true},\n    {provide: LocationStrategy, useClass: HashLocationStrategy}, // use pi11#dashboard instead of pi11/dashboard as the later won't be found by a server, if directly accessed\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/client-id.service.spec.ts. Directly output the source content.", "input": "", "output": "import {TestBed} from '@angular/core/testing';\n\nimport {ClientIdService} from './client-id.service';\n\ndescribe('ClientIdService', () => {\n  let service: ClientIdService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({});\n    service = TestBed.inject(ClientIdService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it(\"test create client id\", () => {\n    expect(service.getClientId()).not.toBeNull();\n  });\n\n  it(\"test create client id\", () => {\n    let serviceID1 = service.getClientId();\n    let serviceID2 = service.getClientId();\n    expect(serviceID1).toEqual(serviceID2);\n  });\n\n\n});"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/client-id.service.ts. Directly output the source content.", "input": "", "output": "import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientIdService {\n\n  public static readonly KEY_CLIENT_ID = \"TH-KEY-CLIENT-ID\"; // underscore not allowed by default in nginx\n  public static readonly KEY_CLIENT_VERSION = \"TH-KEY-CLIENT-VERSION\"; // underscore not allowed by default in nginx\n\n  private clientId: string | null = '';\n\n  constructor() {\n\n    // check if we have an ID already\n    this.clientId = localStorage.getItem(ClientIdService.KEY_CLIENT_ID);\n\n    if (!this.clientId) {\n      try {\n        var array = new Uint32Array(2);\n        crypto.getRandomValues(array);\n        var arrayString = '';\n        array.forEach(value => arrayString += value);\n\n        this.clientId = arrayString;\n\n      } catch (e) {\n        console.warn(\"Fallback from crypto to Math.random()\");\n        this.clientId = \"\" + Math.random();\n      }\n      console.log(\"Created a new client id: \", this.clientId)\n    } else {\n      console.log(\"Got an existing client id: \", this.clientId);\n    }\n\n    localStorage.setItem(ClientIdService.KEY_CLIENT_ID, this.clientId);\n    console.log(\"Did create or restore a client id: \", this.clientId);\n  }\n\n  getClientId(): string {\n    if (this.clientId) {\n      return this.clientId;\n    } else {\n      return 'unknown';\n    }\n  }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/heating-data.service.spec.ts. Directly output the source content.", "input": "", "output": "import { TestBed } from '@angular/core/testing';\n\nimport { HeatingDataService } from './heating-data.service';\n\ndescribe('CurrentDataService', () => {\n  let service: HeatingDataService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({});\n    service = TestBed.inject(HeatingDataService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n});"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/heating-data.service.ts. Directly output the source content.", "input": "", "output": "import {Injectable} from '@angular/core';\n\nimport {environment} from \"../environments/environment\";\nimport * as moment from \"moment\";\nimport {Moment} from \"moment\";\nimport {CacheService} from \"./cache/cache.service\";\nimport {HttpClient, HttpParams} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeatingDataService {\n\n  constructor(private http: HttpClient, private cacheService: CacheService) {\n  }\n\n  serviceBaseURL = environment.serviceBaseURL;\n\n  private static readonly CACHE_KEY_HISTORICAL: string = \"CACHE_KEY_HISTORICAL\";\n  private static readonly CACHE_KEY_CURRENT: string = \"CACHE_KEY_CURRENT\";\n\n  private static readonly CACHE_KEY_METEO_HISTORICAL: string = \"CACHE_KEY_METEO_HISTORICAL\";\n  private static readonly CACHE_KEY_METEO_CURRENT: string = \"CACHE_KEY_METEO_CURRENT\";\n\n  private static readonly CACHE_KEY_BOILER_STATS_BY_DAY_OF_THE_WEEK: string = \"CACHE_KEY_BOILER_STATS_BY_DAY_OF_THE_WEEK\";\n  private static readonly CACHE_KEY_BOILER_STATS_BY_HOUR: string = \"CACHE_KEY_BOILER_STATS_BY_HOUR\";\n\n  private static readonly CACHE_KEY_SOLE_TEMP_DELTA_IN_OPERATION: string = \"CACHE_KEY_SOLE_TEMP_DELTA_IN_OPERATION\";\n\n  static convertDate(utcDateText: string) {\n    let x1 = moment.utc(utcDateText);\n    return x1.toDate();\n  }\n\n  static convertDateToTime(utcDateText: string) {\n    let x1 = moment.utc(utcDateText);\n    return x1.toDate().getTime();\n  }\n\n  getCurrent(evictCache: boolean) {\n    return this.cacheService.get(\n      HeatingDataService.CACHE_KEY_CURRENT,\n      () => this.http.get(this.serviceBaseURL + '/heatpump-data/current'),\n      evictCache);\n  }\n\n  getHistorical(evictCache: boolean, from: Moment, to: Moment, maxRows: number, groupEveryNthSecond: number) {\n    let p = new HttpParams()\n      .set('start', from.toJSON())\n      .set('end', to.toJSON())\n      .set('maxRows', maxRows)\n      .set('groupEveryNthSecond', groupEveryNthSecond)\n    ;\n\n    return this.cacheService.get(\n      HeatingDataService.CACHE_KEY_HISTORICAL,\n      () => this.http.get(this.serviceBaseURL + '/heatpump-data/getBetweenDates', {params: p}),\n      evictCache);\n  }\n\n  getServerInfo() {\n    return this.http.get(this.serviceBaseURL + '/info/general');\n  }\n\n  getMeteoSwissCurrent(evictCache: boolean, stationId: string) {\n    let p = new HttpParams()\n      .set('stationId', stationId)\n    ;\n\n    return this.cacheService.get(\n      HeatingDataService.CACHE_KEY_METEO_CURRENT,\n      () => this.http.get(this.serviceBaseURL + '/meteo-swiss/current', {params: p}),\n      evictCache);\n  }\n\n  getMeteoSwissHistorical(evictCache: boolean, from: Moment, to: Moment, maxRows: number, groupEveryNthSecond: number, stationIds?: Set<string>, doNotCache?: boolean) {\n\n    let p = new HttpParams()\n      .set('start', from.toJSON())\n      .set('end', to.toJSON())\n      .set('maxRows', maxRows)\n      .set('groupEveryNthSecond', groupEveryNthSecond)\n    ;\n\n    if (stationIds != null) {\n      let stationIdList: string = '';\n      stationIds.forEach(s => stationIdList = stationIdList + s + \",\");\n      p = p.set('stationId', stationIdList);\n    }\n\n    return this.cacheService.get(\n      HeatingDataService.CACHE_KEY_METEO_HISTORICAL,\n      () => this.http.get(this.serviceBaseURL + '/meteo-swiss/getBetweenDates', {params: p}),\n      evictCache, doNotCache);\n  }\n\n  getBoilerStatsByDayOfWeek(evictCache: boolean, from: Moment, to: Moment) {\n    let p = new HttpParams()\n      .set('start', from.toJSON())\n      .set('end', to.toJSON());\n\n    return this.cacheService.get(\n      HeatingDataService.CACHE_KEY_BOILER_STATS_BY_DAY_OF_THE_WEEK,\n      () => this.http.get(this.serviceBaseURL + '/heatpump-data/getBoilerStatsByDayOfWeek', {params: p}),\n      evictCache);\n  }\n\n  getBoilerStatsByHour(evictCache: boolean, from: Moment, to: Moment) {\n    let p = new HttpParams()\n      .set('start', from.toJSON())\n      .set('end', to.toJSON());\n\n    return this.cacheService.get(\n      HeatingDataService.CACHE_KEY_BOILER_STATS_BY_HOUR,"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/heating-data.service.ts. Directly output the source content.", "input": "", "output": "      () => this.http.get(this.serviceBaseURL + '/heatpump-data/getBoilerStatsByHour', {params: p}),\n      evictCache);\n  }\n\n  getSoleDeltaInOperationStats(evictCache: boolean, from: Moment, to: Moment, maxRows: number, groupEveryNthSecond: number) {\n    let p = new HttpParams()\n      .set('start', from.toJSON())\n      .set('end', to.toJSON())\n      .set('maxRows', maxRows)\n      .set('groupEveryNthSecond', groupEveryNthSecond)\n    ;\n\n    return this.cacheService.get(\n      HeatingDataService.CACHE_KEY_SOLE_TEMP_DELTA_IN_OPERATION,\n      () => this.http.get(this.serviceBaseURL + '/heatpump-data/getSoleDeltaInOperationStats', {params: p}),\n      evictCache);\n  }\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/my-http-interceptor.service.ts. Directly output the source content.", "input": "", "output": "import {Injectable} from \"@angular/core\";\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {ClientIdService} from \"./client-id.service\";\nimport {HeatingDataService} from \"./heating-data.service\";\nimport {environment} from \"../environments/environment\";\n\n@Injectable()\nexport class MyHttpInterceptor implements HttpInterceptor {\n\n  constructor(private clientIdService: ClientIdService) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    let clientId = this.clientIdService.getClientId();\n    let clientVersion = environment.buildTimestampClient;\n\n    const modifiedReq = req.clone({\n      headers: req.headers\n        .set(ClientIdService.KEY_CLIENT_ID, clientId)\n        .set(ClientIdService.KEY_CLIENT_VERSION, clientVersion)\n    });\n    return next.handle(modifiedReq);\n  }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/utils-service.service.spec.ts. Directly output the source content.", "input": "", "output": "import {TestBed} from '@angular/core/testing';\n\nimport {Interval, UtilsServiceService} from './utils-service.service';\n\ndescribe('UtilsServiceService', () => {\n  let service: UtilsServiceService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({});\n    service = TestBed.inject(UtilsServiceService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('find interval: 1 week 10 data points --> 1d', () => {\n    let interval: Interval = service.getIntervalInSecondsForMaxDataPoints(10, new Date(2021, 1, 1), new Date(2021, 1, 8)); // 1 week 10 data points\n    console.log(interval);\n    expect(interval).not.toBeNull();\n    expect(interval.key).toEqual(\"1d\");\n  });\n\n  it('find interval: 1 week 200 data points --> 1h', () => {\n    let interval: Interval = service.getIntervalInSecondsForMaxDataPoints(200, new Date(2021, 1, 1), new Date(2021, 1, 8));\n    console.log(interval);\n    expect(interval).not.toBeNull();\n    expect(interval.key).toEqual(\"1h\");\n  });\n\n  it('find interval: 1 week 165 data points --> 4h', () => {\n    let interval: Interval = service.getIntervalInSecondsForMaxDataPoints(165, new Date(2021, 1, 1), new Date(2021, 1, 8)); // 1 week 10 data points\n    console.log(interval);\n    expect(interval).not.toBeNull();\n    expect(interval.key).toEqual(\"4h\");\n  });\n\n  it('find interval: 1 year 366 data points --> 1d', () => {\n    let interval: Interval = service.getIntervalInSecondsForMaxDataPoints(366, new Date(2021, 1, 1), new Date(2022, 1, 1)); // 1 week 10 data points\n    console.log(interval);\n    expect(interval).not.toBeNull();\n    expect(interval.key).toEqual(\"1d\");\n  });\n\n  it('find interval: 1 year 360 data points --> 3d', () => {\n    let interval: Interval = service.getIntervalInSecondsForMaxDataPoints(360, new Date(2021, 1, 1), new Date(2022, 1, 1)); // 1 week 10 data points\n    console.log(interval);\n    expect(interval).not.toBeNull();\n    expect(interval.key).toEqual(\"3d\");\n  });\n\n\n});"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/utils-service.service.ts. Directly output the source content.", "input": "", "output": "import {Injectable} from '@angular/core';\n\nexport class Interval {\n  constructor(public key: string, public name: string, public intervalInSeconds: number) {\n  }\n\n  static compare(a: Interval, b: Interval): number {\n    if (!a || !b) {\n      return 0;\n    }\n\n    if (a.intervalInSeconds === b.intervalInSeconds) {\n      return 0;\n    } else {\n      return a.intervalInSeconds > b.intervalInSeconds ? 1 : -1;\n    }\n  }\n\n  static sort(intervals: Interval[]) {\n    intervals.sort((a, b) => Interval.compare(a, b));\n  }\n\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilsServiceService {\n\n  constructor() {\n  }\n\n  private static readonly standardIntervals = UtilsServiceService.getStandardIntervalsImpl();\n\n  public static getStandardIntervals(): Interval[] {\n    return this.standardIntervals;\n  }\n\n\n  public getIntervalInSecondsForMaxDataPoints(maxDataPoints: number, start: Date, end: Date): Interval {\n    let intervals = UtilsServiceService.getStandardIntervals();\n    let defaultInterval = intervals[0]; // smallest\n\n    if (!start || !end) {\n      return defaultInterval;\n    }\n\n    let deltaInSeconds = Math.abs((end.getTime() - start.getTime()) / 1000);\n    let desiredInterval = deltaInSeconds / maxDataPoints;\n\n    for (let i = 0; i < intervals.length; i++) {\n      let interval = intervals[i];\n      if (interval.intervalInSeconds > desiredInterval) {\n        return interval; // found a match\n      }\n    }\n\n    return defaultInterval;\n  }\n\n  private static getStandardIntervalsImpl(): Interval[] {\n\n    let intervals: Interval[] = [];\n\n    let second = 1;\n    let minute = second * 60;\n    let hour = minute * 60;\n    let day = hour * 24;\n    let month = 30.436875 * day; // in average (special years, normal years, etc)\n\n    // seconds\n    intervals.push(new Interval(\"1s\", \"1 second\", second));\n    intervals.push(new Interval(\"5s\", \"5 seconds\", 5 * second));\n    intervals.push(new Interval(\"15s\", \"15 seconds\", 15 * second));\n    intervals.push(new Interval(\"30s\", \"30 seconds\", 30 * second));\n\n    // minutes\n    intervals.push(new Interval(\"1m\", \"1 minute\", minute));\n    intervals.push(new Interval(\"5m\", \"5 minutes\", 5 * minute));\n    intervals.push(new Interval(\"15m\", \"15 minutes\", 15 * minute));\n    intervals.push(new Interval(\"30m\", \"30 minutes\", 30 * minute));\n\n    // hours\n    intervals.push(new Interval(\"1h\", \"1 hour\", hour));\n    intervals.push(new Interval(\"4h\", \"4 hours\", 4 * hour));\n    intervals.push(new Interval(\"8h\", \"8 hours\", 8 * hour));\n\n    // days\n    intervals.push(new Interval(\"1d\", \"1 day\", day));\n    intervals.push(new Interval(\"3d\", \"3 days\", 3 * day));\n\n    // weeks\n    intervals.push(new Interval(\"1w\", \"1 week\", 7 * day));\n    intervals.push(new Interval(\"2w\", \"2 weeks\", 14 * day));\n\n    // month\n    intervals.push(new Interval(\"1m\", \"1 month\", month));\n    intervals.push(new Interval(\"3m\", \"3 months\", 3 * month));\n    intervals.push(new Interval(\"6m\", \"6 months\", 6 * month));\n\n    // years\n    intervals.push(new Interval(\"1y\", \"1 year\", 12 * month));\n\n    Interval.sort(intervals); // sort them\n\n    return intervals;\n  }\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/about/about.component.spec.ts. Directly output the source content.", "input": "", "output": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { AboutComponent } from './about.component';\n\ndescribe('AboutComponent', () => {\n  let component: AboutComponent;\n  let fixture: ComponentFixture<AboutComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ AboutComponent ]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AboutComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/about/about.component.ts. Directly output the source content.", "input": "", "output": "import { Component, OnInit } from '@angular/core';\nimport {environment} from \"../../environments/environment\";\nimport {HeatingDataService} from \"../heating-data.service\";\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.sass']\n})\nexport class AboutComponent implements OnInit {\n\n  buildTimestampClient = environment.buildTimestampClient;\n  buildTimestampServer = \"\";\n\n\n  constructor(private heatingDataService: HeatingDataService) { }\n\n  ngOnInit(): void {\n    this.getBuildTimestampServer();\n  }\n\n  getBuildTimestampServer() {\n    // @ts-ignore\n    this.heatingDataService.getServerInfo().subscribe(info => this.buildTimestampServer = info.buildTimestampServer);\n    return this.buildTimestampServer;\n  }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/boiler-chart/boiler-chart.component.spec.ts. Directly output the source content.", "input": "", "output": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { BoilerChartComponent } from './boiler-chart.component';\n\ndescribe('BoilerChartComponent', () => {\n  let component: BoilerChartComponent;\n  let fixture: ComponentFixture<BoilerChartComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ BoilerChartComponent ]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(BoilerChartComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/boiler-chart/boiler-chart.component.ts. Directly output the source content.", "input": "", "output": "import {Component, HostListener, Input, OnInit} from '@angular/core';\nimport {HeatingDataService} from \"../heating-data.service\";\nimport {HeatingEntity} from \"../entities/heatingEntity\";\nimport {forkJoin, interval} from \"rxjs\";\nimport * as moment from \"moment\";\nimport {Moment} from \"moment\";\nimport * as Highcharts from 'highcharts';\nimport {Chart} from 'highcharts';\nimport NoDataToDisplay from 'highcharts/modules/no-data-to-display';\nimport theme from 'highcharts/themes/dark-unica';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport more from 'highcharts/highcharts-more';\nimport {Interval, UtilsServiceService} from \"../utils-service.service\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {MeteoSwissEntity} from \"../entities/meteoSwissEntity\";\nimport {BoilerStatsByHourEntity} from \"../entities/boilerStatsByHourEntity\";\nimport {BoilerStatsDayOfWeekEntity} from \"../entities/boilerStatsDayOfWeekEntity\";\nimport {Router} from \"@angular/router\";\nimport {SoleInOutDeltaInOperationStatEntity} from \"../entities/soleInOutDeltaInOperationStatEntity\";\n\n\nmore(Highcharts);\n\n@Component({\n  selector: 'app-boiler-chart',\n  templateUrl: './boiler-chart.component.html',\n  styleUrls: ['./boiler-chart.component.sass']\n})\nexport class BoilerChartComponent implements OnInit {\n\n  constructor(private heatingDataService: HeatingDataService,\n              private formBuilder: FormBuilder,\n              private utilsServiceService: UtilsServiceService,\n              private snackBar: MatSnackBar,\n              private router: Router\n  ) {\n  }\n\n  @Input()\n  overviewMode: boolean = false;\n\n\n  lastUserActivationTime: Moment = moment().subtract(1, 'days');\n\n  //@Output() receivedNewTHValue = new EventEmitter();\n  chartUpdateFlag: boolean = false;\n  chartUpdateFlagBoilerStatsByHour: boolean = false;\n  chartUpdateFlagBoilerStatsByDayOfWeek: boolean = false;\n  chartUpdateFlagSoleDeltaTempInOperation: boolean = false;\n\n  boilerTempAverage: any = [];\n  boilerTempMinMax: any = [];\n  boilerTempDeltaTemp: any = [];\n\n  boilerStatsByHour: any = [];\n  boilerStatsByHourNumberOfStaticsRecords: number = 0;\n  boilerStatsByDayOfWeek: any = [];\n  boilerStatsByDayOfWeekNumberOfStaticsRecords: number = 0;\n\n  soleInTempAverage: any = [];\n  soleOutTempAverage: any = [];\n  soleInTempMinMax: any = [];\n  soleOutTempMinMax: any = [];\n\n  soleTempDelta: any = [];\n  soleTempDeltaInOperationAvg: any = [];\n  soleTempDeltaInOperationMinMax: any = [];\n\n  heatingInTempMinMax: any = [];\n  heatingOutTempMinMax: any = [];\n\n  heatingTempDelta: any = [];\n\n  compressorHours: any = [];\n\n  outdoorTempAverage: any = [];\n  outdoorTempAverageMeteo1: any = []; // TODO: hack, properly support stations\n  outdoorTempAverageMeteo2: any = []; // TODO: hack, properly support stations\n  outdoorTempMinMax: any = [];\n\n  windGustMeteoSwiss: any = [];\n\n  // operationChartSeries: any = [];\n\n  highcharts: typeof Highcharts = Highcharts;\n\n  panelOpenState: boolean = true;\n  loading: boolean = false;\n  loadingBoilerByHour: boolean = false;\n  loadingBoilerByDayOfWeek: boolean = false;\n  loadingSoleDeltaTempInOperation: boolean = false;\n\n  // based on the chart maxPoints automatically select an appropriate interval\n  autoSelectedInterval: Interval = UtilsServiceService.getStandardIntervals()[0];\n\n  myForm = this.formBuilder.group({\n    \"chartDataPoints\": [\"\", Validators.required],\n    \"customFromDate\": [\"\", Validators.required],\n    \"customFromDateTimePart\": [\"\", Validators.required],\n    \"customToDate\": [\"\", Validators.required],\n    \"customToDateTimePart\": [\"\", Validators.required],\n    \"intervalAutoMatching\": [\"\", Validators.required],\n  });\n\n\n  onMyFormSubmit(): void {\n  }\n\n  public calculateAutoInterval() {\n    this.autoSelectedInterval = this.utilsServiceService.getIntervalInSecondsForMaxDataPoints(this.myForm.value.chartDataPoints, this.getFromDate().toDate(), this.getToDate().toDate());\n  }\n\n  ngOnInit(): void {\n"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/boiler-chart/boiler-chart.component.ts. Directly output the source content.", "input": "", "output": "    NoDataToDisplay(this.highcharts); // \"enable\" that required function\n    theme(Highcharts);\n\n    // subscribe to any form changes\n    // this.myForm.controls['chartDataPoints'].valueChanges.subscribe(value => {\n    this.myForm.valueChanges.subscribe(value => {\n      //console.debug(value);\n      this.calculateAutoInterval();\n    });\n\n    this.myForm.patchValue({\n      chartDataPoints: 350, // how many data points to load initially (150 in 24 hrs results in about 15 min slots)\n      intervalAutoMatching: true,\n    });\n\n    this.adjustTimeAndReload();\n\n  }\n\n  private adjustTimeAndReload() {\n\n    let now = moment();\n    let lastActiveSinceSeconds = now.diff(this.lastUserActivationTime, 'seconds');\n    let updateDatesRequired = false;\n    if (lastActiveSinceSeconds > 180) {\n      updateDatesRequired = true;\n    }\n\n    console.log('adjustTimeAndReload. ' +\n      ' lastActiveSinceSeconds: ' + lastActiveSinceSeconds\n      + \" updateDatesRequired:\" + updateDatesRequired\n      + \" lastUserActivationTime:\" + this.lastUserActivationTime.format());\n\n    if (updateDatesRequired) {\n      this.myForm.patchValue({\n          customFromDate: moment().subtract(24, \"hours\").toDate(),\n          customFromDateTimePart: moment().format('HH'),\n          customToDate: moment().toDate(),\n          customToDateTimePart: moment().add(1, \"hours\").format('HH'),\n        }\n      );\n\n      this.lastUserActivationTime = now;\n\n      if (this.router.url.indexOf(\"insights\") > 0) {\n        // this.snackBar.open(\"Datum f\u00fcr Graph aktualisiert\", '', {\n        //   duration: 2000\n        // });\n      }\n\n      this.calculateAutoInterval();\n\n    }\n\n    this.myReload();\n  }\n\n  /**\n   * Listener to catch if app gets active again\n   */\n  @HostListener('document:visibilitychange', ['$event'])\n  visibilitychange() {\n    console.log(\"document:visibilitychange called for boiler-chart\");\n    if (!document.hidden) {\n      this.adjustTimeAndReload();\n    }\n  }\n\n  getFromDate(): Moment {\n    return moment(this.myForm.value.customFromDate)\n      .startOf('day')\n      .add(this.myForm.value.customFromDateTimePart, 'hours');\n  }\n\n  getToDate(): Moment {\n    return moment(this.myForm.value.customToDate)\n      .startOf('day')\n      .add(this.myForm.value.customToDateTimePart, 'hours');\n  }\n\n  isIntervalAutoMatching(): boolean {\n    return this.myForm.value.intervalAutoMatching;\n  }\n\n  myReload() {\n\n    console.log(\"execute myReload\");\n    this.loading = true;\n    this.loadingBoilerByHour = true;\n    this.loadingBoilerByDayOfWeek = true;\n\n    // check if we ask the date for an interval or for points\n    let maxRows = 0;\n    let groupEveryNthSecond = 0;\n    if (this.isIntervalAutoMatching()) {\n      groupEveryNthSecond = this.autoSelectedInterval.intervalInSeconds;\n    } else {\n      maxRows = this.myForm.value.chartDataPoints;\n    }\n\n    // TODO: make hard coded Station configurable (favorite station)\n    let stationIds = new Set<string>();\n    stationIds.add('KLO');\n    stationIds.add('SHA');\n    let serviceMeteoHistorical = this.heatingDataService.getMeteoSwissHistorical(true, this.getFromDate(), this.getToDate(), maxRows, groupEveryNthSecond, stationIds);\n    let serviceHeatingDataHistorical = this.heatingDataService.getHistorical(true, this.getFromDate(), this.getToDate(), maxRows, groupEveryNthSecond);\n    let serviceBoilerStatsByHour = this.heatingDataService.getBoilerStatsByHour(true, this.getFromDate(), this.getToDate());\n    let serviceBoilerStatsDayOfWeek = this.heatingDataService.getBoilerStatsByDayOfWeek(true, this.getFromDate(), this.getToDate());\n    let serviceSoleDeltaInOperationStats = this.heatingDataService.getSoleDeltaInOperationStats(true, this.getFromDate(), this.getToDate(), maxRows, groupEveryNthSecond);\n\n\n    forkJoin([serviceHeatingDataHistorical, serviceMeteoHistorical]).subscribe({\n      next: (results: any) => {\n\n        let dataHeating = results[0];\n        let dataMeteo = results[1];\n"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/boiler-chart/boiler-chart.component.ts. Directly output the source content.", "input": "", "output": "        // reset the array (attention, creating a new one looses UI proxy object!!!)\n        this.boilerTempMinMax.length = 0;\n        this.boilerTempAverage.length = 0;\n        this.boilerTempDeltaTemp.length = 0;\n        this.boilerStatsByDayOfWeek.length = 0;\n        this.boilerStatsByHour.length = 0;\n        this.soleInTempMinMax.length = 0;\n        this.soleOutTempMinMax.length = 0;\n        this.soleTempDeltaInOperationAvg.length = 0;\n        this.soleTempDeltaInOperationMinMax.length = 0;\n        this.soleTempDelta.length = 0;\n        this.heatingInTempMinMax.length = 0;\n        this.heatingOutTempMinMax.length = 0;\n        this.heatingTempDelta.length = 0;\n        this.compressorHours.length = 0;\n        this.outdoorTempAverage.length = 0;\n        this.outdoorTempAverageMeteo1.length = 0;\n        this.outdoorTempAverageMeteo2.length = 0;\n        this.outdoorTempMinMax.length = 0;\n        this.windGustMeteoSwiss.length = 0;\n        //this.operationChartSeries.length = 0;\n\n        let tempMin: number = 1E10;\n        let prevTemp: number = 0;\n        let prevtempFirst: boolean = true;\n\n        let heatingEntites: HeatingEntity[] = [];\n        dataHeating.map(e => heatingEntites.push(HeatingEntity.ofWebService(e)));\n        heatingEntites.reverse(); // sort them for highcharts\n\n        let meteoEntites: MeteoSwissEntity[] = [];\n        dataMeteo.map(e => meteoEntites.push(MeteoSwissEntity.ofWebService(e)));\n        meteoEntites.reverse(); // sort them for highcharts\n\n\n        heatingEntites.forEach(heatingEntity => {\n\n          // boiler\n          this.boilerTempAverage.push([heatingEntity.measurementDate.getTime(), heatingEntity.boilerTemp]);\n          this.boilerTempMinMax.push([heatingEntity.measurementDate.getTime(), heatingEntity.boilerTempMin, heatingEntity.boilerTempMax]);\n\n          if (!prevtempFirst) {\n            this.boilerTempDeltaTemp.push({\n              x: heatingEntity.measurementDate.getTime(),\n              y: heatingEntity.boilerTemp - prevTemp\n            });\n          }\n          prevTemp = heatingEntity.boilerTemp;\n          prevtempFirst = false;\n\n          if (tempMin > heatingEntity.boilerTempMin) {\n            tempMin = heatingEntity.boilerTempMin;\n          }\n\n          // sole\n          this.soleInTempAverage.push([heatingEntity.measurementDate.getTime(), heatingEntity.soleIn]);\n          this.soleInTempMinMax.push([heatingEntity.measurementDate.getTime(), heatingEntity.soleInMin, heatingEntity.soleInMax]);\n          this.soleOutTempMinMax.push([heatingEntity.measurementDate.getTime(), heatingEntity.soleOutMin, heatingEntity.soleOutMax]);\n\n          // sole delta between in and out\n          this.soleTempDelta.push([heatingEntity.measurementDate.getTime(), heatingEntity.soleInMin - heatingEntity.soleOutMin, heatingEntity.soleInMax - heatingEntity.soleOutMax]);\n\n          // heating\n          this.heatingInTempMinMax.push([heatingEntity.measurementDate.getTime(), heatingEntity.heatingInMin, heatingEntity.heatingInMax]);\n          this.heatingOutTempMinMax.push([heatingEntity.measurementDate.getTime(), heatingEntity.heatingOutMin, heatingEntity.heatingOutMax]);\n\n          // heating delta between in and out\n          this.heatingTempDelta.push([heatingEntity.measurementDate.getTime(), heatingEntity.heatingOutMin - heatingEntity.heatingInMin, heatingEntity.heatingOutMax - heatingEntity.heatingInMax]);\n\n          // outdoor temperature\n          this.outdoorTempAverage.push([heatingEntity.measurementDate.getTime(), heatingEntity.ireg300TempOutdoor]);\n          this.outdoorTempMinMax.push([heatingEntity.measurementDate.getTime(), heatingEntity.ireg300TempOutdoorMin, heatingEntity.ireg300TempOutdoorMax]);\n\n          // compressor hours\n          this.compressorHours.push([heatingEntity.measurementDate.getTime(), heatingEntity.compressorHours]);\n\n        });\n\n        {\n          // populate operation Chart data\n          let operationEntries = new Map<string, string>();"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/boiler-chart/boiler-chart.component.ts. Directly output the source content.", "input": "", "output": "          operationEntries.set(\"di10Compressor1\", \"Haupt Kompr\");\n          operationEntries.set(\"di14PumpDirect\", \"Pumpe direkt\");\n          operationEntries.set(\"di15PumpBoiler\", \"Pumpe Boiler\");\n          operationEntries.set(\"di17BoilerEl\", \"Boiler Elektro\");\n          operationEntries.set(\"di21PumpPrimary\", \"Prim\u00e4r Pumpe\");\n          operationEntries.set(\"di22pumpLoad\", \"Lade Pumpe\");\n          operationEntries.set(\"di70PumpHk1\", \"HK1 Pumpe\");\n          operationEntries.set(\"di71Hkm1ixOpen\", \"Hkm Auf\");\n          operationEntries.set(\"di72Hkm1ixClose\", \"Hkm Zu\");\n          operationEntries.set(\"di1Error\", \"St\u00f6rung\");\n\n          if (this.operationsChartRef != null && this.operationsChartRef?.yAxis.length <= 1) {\n            console.log(\"Operations-Chart need to add yAxis\");\n\n            let yNr = -1;\n            operationEntries.forEach((key, value) => {\n              yNr++;\n              let yAxis = {\n                top: 42 * yNr,\n                height: 30,\n                offset: 0,\n                min: 0,\n                max: 100,\n                title: {\n                  text: key,\n                  rotation: 0,\n                },\n                gridLineWidth: 0,\n                labels: {\n                  enabled: false,\n                },\n                minorTickLength: 0,\n                tickLength: 0,\n              };\n\n              if (this.operationsChartRef) {\n                this.operationsChartRef.addAxis(yAxis, false, false, false);\n              }\n\n            });\n          }\n\n          let operationChartSeries: any = [];\n          let yAxis: number = -1;\n          operationEntries.forEach((seriesName, seriesProperty) => {\n            // collect data\n            let operationData: any = [];\n            yAxis++;\n            let isFirst: boolean = false;\n            heatingEntites.forEach((heatingEntity) => {\n              if (isFirst) {\n                isFirst = false;\n                operationData.push([heatingEntity.measurementDate.getTime() - 1, 0]); // to make the area cover the sub-line\n              }\n              operationData.push([heatingEntity.measurementDate.getTime(), heatingEntity[seriesProperty] * 100]);\n            });\n\n            // create a series entry\n            // xxxxx\n            let seriesEntry = {\n              name: seriesName,\n              data: operationData,\n              type: 'area',\n              // type: 'line',\n              yAxis: yAxis,\n              animation: false,\n            };\n            operationChartSeries.push(seriesEntry);\n          });\n\n          // https://stackblitz.com/edit/highcharts-angular-basic-line-swh9fw?file=src%2Fapp%2Fapp.component.ts\n          // https://stackblitz.com/edit/highcharts-angular-basic-line-ehcvup?file=src/app/app.component.ts\n          //console.log(JSON.stringify(this.operationChartSeries));\n          // remove all present series first\n          // var seriesLength = this.operationsChartRef.series.length;\n          // for(var i = seriesLength-1; i>-1;i--){\n          //   this.operationsChartRef.series[i].remove();\n          // }\n          if (this.operationsChartRef) {\n            while (this.operationsChartRef.series.length > 0) {\n              this.operationsChartRef.series[0].remove(true);\n            }\n\n            operationChartSeries.forEach(s => {\n              if (this.operationsChartRef) {\n                this.operationsChartRef.addSeries(s, false);\n              }\n            })\n\n            //debugger;\n          }\n        }\n\n        // populate Meteo-Swiss data\n        meteoEntites.forEach(meteoEntity => {\n          // TODO: hack, support multiple stations properly\n          if (meteoEntity.stationId === 'KLO') {\n            this.outdoorTempAverageMeteo1.push([meteoEntity.temperatureMeasureDate.getTime(), meteoEntity.temperature]);\n            this.windGustMeteoSwiss.push([meteoEntity.windMeasureDate.getTime(), meteoEntity.windGustSpeedMax]);\n          } else if (meteoEntity.stationId === 'SHA') {"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/boiler-chart/boiler-chart.component.ts. Directly output the source content.", "input": "", "output": "            this.outdoorTempAverageMeteo2.push([meteoEntity.temperatureMeasureDate.getTime(), meteoEntity.temperature]);\n          }\n        });\n\n\n        // ugly: need to fix min, as it's not taken automatically for area charts\n        if (this.chartOptionsBoilerAverageTemp.yAxis && \"min\" in this.chartOptionsBoilerAverageTemp.yAxis) {\n          this.chartOptionsBoilerAverageTemp.yAxis.min = tempMin;\n        }\n        this.chartUpdateFlag = true;\n        console.log(\"General Charts reloaded with data. data-points: \" + this.boilerTempAverage.length);\n        // this.receivedNewTHValue.emit(this.chartUpdateFlag);\n      },\n      error: (e) => {\n        console.log(\"error while loading data for chart\", e);\n        this.loading = false;\n      },\n      complete: () => {\n        this.loading = false;\n      }\n    });\n\n\n    serviceBoilerStatsByHour.subscribe({\n      next: (boilerByHour: any) => {\n\n        // populate Boiler Stats By Hour chart\n        let boilerByHourStat = new Map<number, BoilerStatsByHourEntity>();\n        boilerByHour.map(e => {\n          let entity = BoilerStatsByHourEntity.ofWebService(e);\n          boilerByHourStat.set(entity.hourOfTheDay, entity);\n          this.boilerStatsByHourNumberOfStaticsRecords = entity.numOfStatisticRecords1; // same for all\n        });\n\n        // make sure we have a graph entry for all categories, even if not present in service result\n        for (let i: number = 0; i <= 23; i++) {\n          let entity = boilerByHourStat.get(i);\n          if (entity == null) {\n            this.boilerStatsByHour.push(0);\n          } else {\n            this.boilerStatsByHour.push(entity.sumBoilerDiffDecrease * -1);\n          }\n        }\n\n        console.log(\"BoilerStatByHour Chart reloaded with data. data-points: \" + boilerByHourStat.size);\n        this.chartUpdateFlagBoilerStatsByHour = true;\n\n      },\n      error: (e) => {\n        console.log(\"error while loading data for chart\", e);\n        this.loadingBoilerByHour = false;\n      },\n      complete: () => {\n        this.loadingBoilerByHour = false;\n      }\n    });\n\n    serviceBoilerStatsDayOfWeek.subscribe({\n      next: (boilerByDayOfWeek: any) => {\n\n        // populate Boiler Stats By Day of the Week\n        let boilerByDayOfTheWeekStat = new Map<number, BoilerStatsDayOfWeekEntity>();\n        boilerByDayOfWeek.map(e => {\n          let entity = BoilerStatsDayOfWeekEntity.ofWebService(e);\n          boilerByDayOfTheWeekStat.set(entity.dayOfWeekStartingMonday, entity);\n          this.boilerStatsByDayOfWeekNumberOfStaticsRecords = entity.numOfStatisticRecords1; // same for all\n        });\n\n        // make sure we have a graph entry for all categories, even if not present in service result\n        for (let i: number = 1; i <= 7; i++) {\n          let entity = boilerByDayOfTheWeekStat.get(i);\n          if (entity == null) {\n            this.boilerStatsByDayOfWeek.push(0);\n          } else {\n            this.boilerStatsByDayOfWeek.push(entity.sumBoilerDiffDecrease * -1);\n          }\n        }\n\n        console.log(\"BoilerStatByDayOfWeek Chart reloaded with data. data-points: \" + boilerByDayOfWeek.length);\n        this.chartUpdateFlagBoilerStatsByDayOfWeek = true;\n      },\n      error: (e) => {\n        console.log(\"error while loading data for chart\", e);\n        this.loadingBoilerByDayOfWeek = false;\n      },\n      complete: () => {\n        this.loadingBoilerByDayOfWeek = false;\n      }\n    });\n\n    serviceSoleDeltaInOperationStats.subscribe({\n      next: (soleDeltaInOperationStatsResults: any) => {\n\n        soleDeltaInOperationStatsResults.forEach(soleDeltaInOperationStatsResult => {\n          let soleDeltaInOpsEntity = SoleInOutDeltaInOperationStatEntity.ofWebService(soleDeltaInOperationStatsResult);\n          this.soleTempDeltaInOperationMinMax.push([soleDeltaInOpsEntity.measurementDateStart.getTime(), soleDeltaInOpsEntity.soleInOutDeltaInOperationMin, soleDeltaInOpsEntity.soleInOutDeltaInOperationMax]);"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/boiler-chart/boiler-chart.component.ts. Directly output the source content.", "input": "", "output": "          this.soleTempDeltaInOperationAvg.push([soleDeltaInOpsEntity.measurementDateStart.getTime(), soleDeltaInOpsEntity.soleInOutDeltaInOperationAvg]);\n        });\n\n        console.log(\"soleDeltaInOperationStats Chart reloaded with data. data-points: \" + soleDeltaInOperationStatsResults.length);\n        this.chartUpdateFlagSoleDeltaTempInOperation = true;\n      },\n      error: (e) => {\n        console.log(\"error while loading data for chart\", e);\n        this.loadingSoleDeltaTempInOperation = false;\n      },\n      complete: () => {\n        this.loadingSoleDeltaTempInOperation = false;\n      }\n    });\n  }\n\n\n  // get access to the real chart object\n  operationsChartCallback: Highcharts.ChartCallbackFunction = chart => {\n    console.log(\"Did call chart-callback\");\n    this.operationsChartRef = chart;\n  };\n\n  operationsChartRef?: Chart;\n\n  subscribe = interval(1000 * 180).subscribe(\n    val => {\n      this.myReload();\n    }\n  );\n\n  /************************************************************************************************\n   * CHART: Boiler Average Temp (chartOptions)\n   ************************************************************************************************/\n  chartOptionsBoilerAverageTemp: Highcharts.Options = {\n    series: [{\n      name: 'Durchschnitt Temp',\n      data: this.boilerTempAverage,\n      zIndex: 1,\n      type: 'line',\n      lineWidth: 0,\n      color: '#2596be',\n      marker: {\n        enabled: false\n      }\n    }, {\n      name: 'Bereich',\n      data: this.boilerTempMinMax,\n      type: 'arearange',\n      lineWidth: 2,\n      linkedTo: ':previous',\n      color: '#2596be',\n      fillOpacity: 0.5,\n      zIndex: 0,\n      marker: {\n        enabled: false\n      }\n    }],\n    lang: {\n      noData: '',\n      loading: ''\n    },\n    time: {\n      // super important setting! otherwise it's all UTC\n      timezoneOffset: new Date().getTimezoneOffset()\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      type: 'datetime',\n    },\n    yAxis: {\n      title: {\n        text: ''\n      },\n      min: 0, // auto: seems not to work on area charts, calc it manually\n      max: null,\n      //tickInterval: 5,\n      plotBands: [{\n        zIndex: 200,\n        from: 0,\n        to: 42,\n        color: 'rgba(38,132,255,0.15)',\n        label: {\n          text: 'Aufheiz-Zone (k\u00fchl)',\n          style: {\n            color: '#b7b7b7'\n          }\n        }\n      }, {\n        zIndex: 200,\n        from: 42,\n        to: 46,\n        color: 'rgba(161,73,255,0.15)',\n        label: {\n          text: 'Aufheiz-Zone (lauwarm)',\n          style: {\n            color: '#b7b7b7'\n          }\n        }\n      }, {\n        zIndex: 200,\n        from: 46,\n        to: 51,\n        color: 'rgba(255,10,10,0.15)',\n        label: {\n          text: 'Soll-Zone (warm)',\n          style: {\n            color: '#b7b7b7'\n          }\n        }\n      }, {\n        zIndex: 200,\n        from: 51,\n        to: 100,\n        color: 'rgba(255,129,2,0.15)',\n        label: {\n          text: 'Legionellen Schaltung (sehr heiss)',\n          style: {\n            color: '#b7b7b7'\n          }\n        }\n      }\n      ]\n    },\n    tooltip: {\n      //crosshairs: true,\n      shared: true,\n      valueDecimals: 2,\n      valueSuffix: '\u00b0C',\n      xDateFormat: '%A, %d.%m.%Y %H:%M',\n      outside: true, // make sure the tooltip comes on top of labels\n    },\n    title: {\n      text: ''\n    },\n    legend: {\n      enabled: false\n    },\n    chart: {\n      // spacingLeft: 5,\n      // spacingRight: 2,\n      backgroundColor: '#424242',\n      animation: false,\n      style: {\n        fontFamily: 'Roboto'\n      }\n    }\n  }\n\n\n  /************************************************************************************************\n   * CHART: Boiler Delta Temp (chartOptionsDeltaTemp)\n   ************************************************************************************************/\n    // https://jsfiddle.net/BlackLabel/52wfpdve/\n  chartOptionsBoilerDeltaTemp: Highcharts.Options = {\n    chart: {"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/boiler-chart/boiler-chart.component.ts. Directly output the source content.", "input": "", "output": "      type: 'column',\n      backgroundColor: '#424242',\n      animation: false,\n      style: {\n        fontFamily: 'Roboto'\n      }\n    },\n    series: [{\n      type: 'column',\n      data: this.boilerTempDeltaTemp\n    }],\n    plotOptions: {\n      column: {\n        pointPadding: 0.2,\n        borderWidth: 0\n      },\n      series: {\n        zones: [{\n          value: 0,\n          color: '#2596be'\n        }, {\n          color: '#be3c25'\n        }]\n      }\n    },\n    lang: {\n      noData: '',\n      loading: ''\n    },\n    time: {\n      // super important setting! otherwise it's all UTC\n      timezoneOffset: new Date().getTimezoneOffset()\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      type: 'datetime'\n    },\n    yAxis: {\n      title: {\n        text: ''\n      },\n      min: null, // auto: seems not to work on area charts, calc it manually\n      max: null,\n    },\n    tooltip: {\n      //crosshairs: true,\n      shared: true,\n      valueDecimals: 1,\n      valueSuffix: '\u00b0C',\n      xDateFormat: '%A, %d.%m.%Y %H:%M',\n    },\n    title: {\n      text: ''\n    },\n    legend: {\n      enabled: false\n    }\n  }\n\n  /************************************************************************************************\n   * CHART: BoilerStatsByHour\n   ************************************************************************************************/\n  chartOptionsBoilerStatsByHour: Highcharts.Options = {\n    chart: {\n      type: 'column',\n      animation: false,\n      backgroundColor: '#424242',\n      style: {\n        fontFamily: 'Roboto'\n      }\n    },\n    series: [{\n      name: 'Boiler Gebrauch nach Stunden',\n      type: 'column',\n      data: this.boilerStatsByHour,\n      color: '#2596be',\n    }],\n    plotOptions: {\n      column: {\n        pointPadding: 0.2,\n        borderWidth: 0\n      }\n    },\n    lang: {\n      noData: '',\n      loading: '',\n      thousandsSep: ''\n    },\n    time: {\n      // super important setting! otherwise it's all UTC\n      timezoneOffset: new Date().getTimezoneOffset()\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      title: {\n        text: ''\n      },\n      min: null, // auto: seems not to work on area charts, calc it manually\n      max: null,\n      categories: [\n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12',\n        '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23',],\n    },\n    yAxis: {\n      title: {\n        text: ''\n      }\n    },\n    tooltip: {\n      //crosshairs: true,\n      shared: true,\n      valueDecimals: 1,\n      valueSuffix: '\u00b0C Total per Stunde',\n      xDateFormat: '%A, %d.%m.%Y %H:%M',\n    },\n    title: {\n      text: ''\n    },\n    legend: {\n      enabled: true,\n      backgroundColor: '#424242'\n    },\n  }\n\n  /************************************************************************************************\n   * CHART: BoilerStatsBy Day Of Week\n   ************************************************************************************************/\n  chartOptionsBoilerStatsByDayOfWeek: Highcharts.Options = {\n    chart: {\n      type: 'column',\n      animation: false,\n      backgroundColor: '#424242',\n      style: {\n        fontFamily: 'Roboto'\n      }\n    },\n    series: [{\n      name: 'Boiler Gebrauch nach Wochentag',\n      type: 'column',\n      data: this.boilerStatsByDayOfWeek,\n      color: '#2596be',\n    }],\n    plotOptions: {\n      column: {\n        pointPadding: 0.2,\n        borderWidth: 0\n      }\n    },\n    lang: {\n      noData: '',\n      loading: '',\n      thousandsSep: ''\n    },\n    time: {\n      // super important setting! otherwise it's all UTC\n      timezoneOffset: new Date().getTimezoneOffset()\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      title: {\n        text: ''\n      },\n      min: null, // auto: seems not to work on area charts, calc it manually\n      max: null,\n      categories: ['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'],\n    },\n    yAxis: {\n      title: {\n        text: ''\n      }\n    },\n    tooltip: {"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/boiler-chart/boiler-chart.component.ts. Directly output the source content.", "input": "", "output": "      //crosshairs: true,\n      shared: true,\n      valueDecimals: 1,\n      valueSuffix: '\u00b0C Total pro Wochentag',\n      xDateFormat: '%A, %d.%m.%Y %H:%M',\n    },\n    title: {\n      text: ''\n    },\n    legend: {\n      enabled: true,\n      backgroundColor: '#424242'\n    },\n  }\n\n\n  /************************************************************************************************\n   * CHART: SoleTemp Area\n   ************************************************************************************************/\n  chartOptionsSoleTemp: Highcharts.Options = {\n    series: [{\n      name: 'Sole Eintritt',\n      data: this.soleInTempMinMax,\n      type: 'arearange',\n      lineWidth: 2,\n      color: '#2596be',\n      fillOpacity: 0.5,\n      zIndex: 0,\n      marker: {\n        enabled: false\n      }\n    }, {\n      name: 'Sole Austritt',\n      data: this.soleOutTempMinMax,\n      type: 'arearange',\n      lineWidth: 2,\n      color: '#be3c25',\n      fillOpacity: 0.5,\n      zIndex: 1,\n      marker: {\n        enabled: false\n      }\n    }\n\n    ],\n    lang: {\n      noData: '',\n      loading: ''\n    },\n    time: {\n      // super important setting! otherwise it's all UTC\n      timezoneOffset: new Date().getTimezoneOffset()\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      type: 'datetime'\n    },\n    yAxis: {\n      title: {\n        text: ''\n      },\n      min: 0, // auto: seems not to work on area charts, calc it manually\n      max: null,\n      //tickInterval: 5,\n    },\n    tooltip: {\n      //crosshairs: true,\n      shared: true,\n      valueDecimals: 1,\n      valueSuffix: '\u00b0C',\n      xDateFormat: '%A, %d.%m.%Y %H:%M',\n    },\n    title: {\n      text: ''\n    },\n    legend: {\n      enabled: true,\n      backgroundColor: '#424242'\n    },\n    chart: {\n      backgroundColor: '#424242',\n      style: {\n        fontFamily: 'Roboto'\n      }\n    }\n  }\n\n  /************************************************************************************************\n   * CHART: SoleTemp-Delta between MinMaxIn and MinMaxOut Area\n   ************************************************************************************************/\n  chartOptionsSoleDeltaTemp: Highcharts.Options = {\n    series: [{\n      name: 'Sole Temperatur Unterschied',\n      data: this.soleTempDelta,\n      type: 'arearange',\n      lineWidth: 2,\n      color: '#2596be',\n      fillOpacity: 0.5,\n      zIndex: 0,\n      marker: {\n        enabled: false\n      },\n      zones: [{\n        value: 0,\n        color: '#2596be'\n      }, {\n        color: '#be3c25'\n      }]\n    }],\n    lang: {\n      noData: '',\n      loading: ''\n    },\n    time: {\n      // super important setting! otherwise, it's all UTC\n      timezoneOffset: new Date().getTimezoneOffset()\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      type: 'datetime'\n    },\n    yAxis: {\n      title: {\n        text: ''\n      },\n      min: null, // auto: seems not to work on area charts, calc it manually\n      max: null,\n      //tickInterval: 5,\n    },\n    tooltip: {\n      //crosshairs: true,\n      shared: true,\n      valueDecimals: 1,\n      valueSuffix: '\u00b0C',\n      xDateFormat: '%A, %d.%m.%Y %H:%M',\n    },\n    title: {\n      text: ''\n    },\n    legend: {\n      enabled: true,\n      backgroundColor: '#424242'\n    },\n    chart: {\n      backgroundColor: '#424242',\n      animation: false,\n      style: {\n        fontFamily: 'Roboto'\n      }\n    }\n  }\n\n  /************************************************************************************************\n   * CHART: SoleTemp-Delta-In-Operation between MinMaxIn and MinMaxOut Area\n   ************************************************************************************************/\n  chartOptionsSoleDeltaTempInOperation: Highcharts.Options = {\n    series: [{\n      name: 'Mittlerer Temp-Unterschied nach 3 min',\n      data: this.soleTempDeltaInOperationAvg,\n      zIndex: 1, // on top of area\n      type: 'line',\n      lineWidth: 3,\n      color: '#be3c25',\n      marker: {\n        enabled: false\n      }\n    }, {"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/boiler-chart/boiler-chart.component.ts. Directly output the source content.", "input": "", "output": "      name: 'Bereich (Min/Max)',\n      data: this.soleTempDeltaInOperationMinMax,\n      type: 'arearange',\n      lineWidth: 0,\n      linkedTo: ':previous',\n      color: '#c7c7c7',\n      fillOpacity: 0.25,\n      zIndex: 0,\n      marker: {\n        enabled: false\n      }\n    }],\n    lang: {\n      noData: '',\n      loading: ''\n    },\n    time: {\n      // super important setting! otherwise it's all UTC\n      timezoneOffset: new Date().getTimezoneOffset()\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      type: 'datetime',\n    },\n    yAxis: {\n      title: {\n        text: ''\n      },\n      min: null, // auto: seems not to work on area charts, calc it manually\n      max: null,\n      //tickInterval: 5,\n    },\n    tooltip: {\n      //crosshairs: true,\n      shared: true,\n      valueDecimals: 2,\n      valueSuffix: '\u00b0C',\n      xDateFormat: '%A, %d.%m.%Y %H:%M',\n      outside: true, // make sure the tooltip comes on top of labels\n    },\n    title: {\n      text: ''\n    },\n    legend: {\n      enabled: false\n    },\n    chart: {\n      // spacingLeft: 5,\n      // spacingRight: 2,\n      backgroundColor: '#424242',\n      animation: false,\n      style: {\n        fontFamily: 'Roboto'\n      }\n    }\n  }\n\n  /************************************************************************************************\n   * CHART: Heating Temp Area\n   ************************************************************************************************/\n  chartOptionsHeatingTemp: Highcharts.Options = {\n    series: [{\n      name: 'Heizung R\u00fccklauf',\n      data: this.heatingInTempMinMax,\n      type: 'arearange',\n      lineWidth: 2,\n      color: '#2596be',\n      fillOpacity: 0.5,\n      zIndex: 0,\n      marker: {\n        enabled: false\n      }\n    }, {\n      name: 'Heizung Vorlauf',\n      data: this.heatingOutTempMinMax,\n      type: 'arearange',\n      lineWidth: 2,\n      color: '#be3c25',\n      fillOpacity: 0.5,\n      zIndex: 1,\n      marker: {\n        enabled: false\n      }\n    }],\n    lang: {\n      noData: '',\n      loading: ''\n    },\n    time: {\n      // super important setting! otherwise, it's all UTC\n      timezoneOffset: new Date().getTimezoneOffset()\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      type: 'datetime'\n    },\n    yAxis: {\n      title: {\n        text: ''\n      },\n      min: 0, // auto: seems not to work on area charts, calc it manually\n      max: null,\n      //tickInterval: 5,\n    },\n    tooltip: {\n      //crosshairs: true,\n      shared: true,\n      valueDecimals: 1,\n      valueSuffix: '\u00b0C',\n      xDateFormat: '%A, %d.%m.%Y %H:%M',\n    },\n    title: {\n      text: ''\n    },\n    legend: {\n      enabled: true,\n      backgroundColor: '#424242'\n    },\n    chart: {\n      backgroundColor: '#424242',\n      animation: false,\n      style: {\n        fontFamily: 'Roboto'\n      }\n    }\n  }\n\n  /************************************************************************************************\n   * CHART: Heating area between MinMaxIn and MinMaxOut Area\n   ************************************************************************************************/\n  chartOptionsHeatingDeltaTemp: Highcharts.Options = {\n    series: [{\n      name: 'Heizung Temperatur Unterschied',\n      data: this.heatingTempDelta,\n      type: 'arearange',\n      lineWidth: 2,\n      color: '#2596be',\n      fillOpacity: 0.5,\n      zIndex: 0,\n      marker: {\n        enabled: false\n      },\n      zones: [{\n        value: 0,\n        color: '#2596be'\n      }, {\n        color: '#be3c25'\n      }]\n    }],\n    lang: {\n      noData: '',\n      loading: ''\n    },\n    time: {\n      // super important setting! otherwise, it's all UTC\n      timezoneOffset: new Date().getTimezoneOffset()\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      type: 'datetime'\n    },\n    yAxis: {\n      title: {\n        text: ''\n      },\n      min: null, // auto: seems not to work on area charts, calc it manually\n      max: null,\n      //tickInterval: 5,\n    },\n    tooltip: {"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/boiler-chart/boiler-chart.component.ts. Directly output the source content.", "input": "", "output": "      //crosshairs: true,\n      shared: true,\n      valueDecimals: 1,\n      valueSuffix: '\u00b0C',\n      xDateFormat: '%A, %d.%m.%Y %H:%M',\n    },\n    title: {\n      text: ''\n    },\n    legend: {\n      enabled: true,\n      backgroundColor: '#424242'\n    },\n    chart: {\n      backgroundColor: '#424242',\n      animation: false,\n      style: {\n        fontFamily: 'Roboto'\n      }\n    }\n  }\n\n\n  /************************************************************************************************\n   * CHART: compressor hours\n   ************************************************************************************************/\n  chartOptionsCompressorHours: Highcharts.Options = {\n    chart: {\n      type: 'line',\n      animation: false,\n      backgroundColor: '#424242',\n      style: {\n        fontFamily: 'Roboto'\n      }\n    },\n    series: [{\n      type: 'line',\n      data: this.compressorHours,\n      color: '#2596be'\n    }],\n    plotOptions: {\n      column: {\n        pointPadding: 0.2,\n        borderWidth: 0\n      },\n      series: {\n        lineWidth: 3,\n        marker: {\n          enabled: false\n        }\n      }\n    },\n    lang: {\n      noData: '',\n      loading: '',\n      thousandsSep: ''\n    },\n    time: {\n      // super important setting! otherwise it's all UTC\n      timezoneOffset: new Date().getTimezoneOffset()\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      type: 'datetime'\n    },\n    yAxis: {\n      title: {\n        text: ''\n      },\n      min: null, // auto: seems not to work on area charts, calc it manually\n      max: null\n    },\n    tooltip: {\n      //crosshairs: true,\n      shared: true,\n      valueDecimals: 1,\n      valueSuffix: ' h',\n      xDateFormat: '%A, %d.%m.%Y %H:%M',\n      // pointFormat: '{point.y} h'\n    },\n    title: {\n      text: ''\n    },\n    legend: {\n      enabled: false\n    }\n  }\n\n  /************************************************************************************************\n   * CHART: Operation chart xxx\n   ************************************************************************************************/\n  chartOptionsOperationsChart: Highcharts.Options = {\n    chart: {\n      animation: false,\n      backgroundColor: '#424242',\n      styledMode: false,\n      style: {\n        fontFamily: 'Roboto'\n      },\n    },\n    plotOptions: {\n      series: {\n        color: '#2596be',\n        marker: {\n          enabled: false,\n          symbol: 'circle',\n        }\n      }\n    },\n    time: {\n      // super important setting! otherwise it's all UTC\n      timezoneOffset: new Date().getTimezoneOffset()\n    },\n    xAxis: {\n      type: 'datetime',\n      gridLineWidth: 0,\n      lineWidth: 0,\n    },\n    yAxis: [], // dynamically added, as well as series\n    title: {\n      text: ''\n    },\n    tooltip: {\n      //crosshairs: true,\n      shared: true,\n      valueDecimals: 2,\n      valueSuffix: '%',\n      xDateFormat: '%A, %d.%m.%Y %H:%M',\n      //pointFormat: '{point.y } h'\n    },\n    legend: {\n      enabled: false\n    },\n    credits: {\n      enabled: false\n    }\n  }\n\n  /************************************************************************************************\n   * CHART: outdoor temperature\n   ************************************************************************************************/\n  chartOptionsOutdoorTemperature\n    :\n    Highcharts\n      .Options = {\n    chart: {\n      type: 'line',\n      animation: false,\n      backgroundColor: '#424242',\n      style: {\n        fontFamily: 'Roboto'\n      }\n    },\n    series: [{\n      name: 'B\u00fcelwisen Sensor',\n      type: 'line',\n      data: this.outdoorTempAverage,\n      color: '#2596be',\n      lineWidth: 3,\n    }, {\n      name: 'Meteo-Schweiz (Kloten)',\n      type: 'line',\n      data: this.outdoorTempAverageMeteo1,\n      color: '#518663',\n      //dashStyle: 'ShortDot',\n      lineWidth: 2,\n    },\n      {\n        name: 'Meteo-Schweiz (Schaffhausen)',\n        type: 'line',\n        data: this.outdoorTempAverageMeteo2,\n        color: '#8c4522',"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/boiler-chart/boiler-chart.component.ts. Directly output the source content.", "input": "", "output": "        //dashStyle: 'ShortDot',\n        lineWidth: 2,\n      }],\n    plotOptions: {\n      column: {\n        pointPadding: 0.2,\n        borderWidth: 0\n      },\n      series: {\n        marker: {\n          enabled: false\n        }\n      }\n    },\n    lang: {\n      noData: '',\n      loading: '',\n      thousandsSep: ''\n    },\n    time: {\n      // super important setting! otherwise it's all UTC\n      timezoneOffset: new Date().getTimezoneOffset()\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      type: 'datetime'\n    },\n    yAxis: {\n      title: {\n        text: ''\n      },\n      min: null,\n      max: null,\n      minRange: 20,\n    },\n    tooltip: {\n      //crosshairs: true,\n      shared: true,\n      valueDecimals: 1,\n      valueSuffix: '\u00b0C',\n      xDateFormat: '%A, %d.%m.%Y %H:%M',\n      // pointFormat: '{point.y} h'\n    },\n    title: {\n      text: ''\n    },\n    legend: {\n      enabled: true,\n      backgroundColor: '#424242'\n    },\n  }\n\n  /************************************************************************************************\n   * CHART: Wind\n   ************************************************************************************************/\n  chartOptionsWindGustMeteo: Highcharts.Options = {\n    chart: {\n      type: 'line',\n      animation: false,\n      backgroundColor: '#424242',\n      style: {\n        fontFamily: 'Roboto'\n      }\n    },\n    series: [{\n      name: 'Wind Spitze (Meteo Schweiz)',\n      type: 'line',\n      data: this.windGustMeteoSwiss,\n      color: '#2596be',\n    }],\n    plotOptions: {\n      column: {\n        pointPadding: 0.2,\n        borderWidth: 0\n      },\n      series: {\n        lineWidth: 3,\n        marker: {\n          enabled: false\n        }\n      }\n    },\n    lang: {\n      noData: '',\n      loading: '',\n      thousandsSep: ''\n    },\n    time: {\n      // super important setting! otherwise it's all UTC\n      timezoneOffset: new Date().getTimezoneOffset()\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      type: 'datetime'\n    },\n    yAxis: {\n      title: {\n        text: ''\n      },\n      min: null, // auto: seems not to work on area charts, calc it manually\n      max: null\n    },\n    tooltip: {\n      //crosshairs: true,\n      shared: true,\n      valueDecimals: 1,\n      valueSuffix: 'km/h',\n      xDateFormat: '%A, %d.%m.%Y %H:%M',\n    },\n    title: {\n      text: ''\n    },\n    legend: {\n      enabled: true,\n      backgroundColor: '#424242'\n    },\n  }\n\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/cache/cache.service.spec.ts. Directly output the source content.", "input": "", "output": "import { CacheService } from \"./cache.service\";\nimport {TestBed} from \"@angular/core/testing\";\n\ndescribe('CurrentDataService', () => {\n  let service: CacheService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({});\n    service = TestBed.inject(CacheService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n});"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/cache/cache.service.ts. Directly output the source content.", "input": "", "output": "import {Injectable} from \"@angular/core\";\nimport {Observable, of, shareReplay} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CacheService {\n\n  private cache = {};\n\n  public get(cacheKey: string, loader: () => Observable<any>, evict: boolean, doNotCache?: boolean): Observable<any> {\n\n    if(doNotCache) {\n      return loader();\n    }\n\n    // requested to clear the cache\n    if (evict) {\n      this.cache[cacheKey] = null;\n    }\n\n    // cache is empty, load it\n    if (this.cache[cacheKey] == null) {\n      // wrap the inner cache into a shared replay object and hand out the proxy\n      this.cache[cacheKey] = loader().pipe(shareReplay(1));\n    }\n\n    // now return the result\n    return this.cache[cacheKey];\n  }\n\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/entities/boilerStatsByHourEntity.ts. Directly output the source content.", "input": "", "output": "export class BoilerStatsByHourEntity {\n\n  constructor(\n    public hourOfTheDay: number,\n    public sumBoilerDiffIncrease: number,\n    public sumBoilerDiffDecrease: number,\n    public numOfStatisticRecords1: number,\n  ) {\n  }\n\n  static emptyInstance() {\n    return new BoilerStatsByHourEntity(0, 0, 0, 0);\n  }\n\n  static ofWebService(data: any):BoilerStatsByHourEntity {\n    if (data == null) {\n      return this.emptyInstance();\n    } else {\n      return new BoilerStatsByHourEntity(\n        data.hourOfTheDay,\n        data.sumBoilerDiffIncrease,\n        data.sumBoilerDiffDecrease,\n        data.numOfStatisticRecords1,\n      );\n    }\n  }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/entities/boilerStatsDayOfWeekEntity.ts. Directly output the source content.", "input": "", "output": "export class BoilerStatsDayOfWeekEntity {\n\n  constructor(\n    public dayOfWeekStartingMonday: number,\n    public dayOfWeekText: string,\n    public sumBoilerDiffIncrease: number,\n    public sumBoilerDiffDecrease: number,\n    public numOfStatisticRecords1: number,\n  ) {\n  }\n\n  static emptyInstance() {\n    return new BoilerStatsDayOfWeekEntity(0, '', 0, 0, 0);\n  }\n\n  static ofWebService(data: any): BoilerStatsDayOfWeekEntity {\n    if (data == null) {\n      return this.emptyInstance();\n    } else {\n      return new BoilerStatsDayOfWeekEntity(\n        data.dayOfWeekStartingMonday,\n        data.dayOfWeekText,\n        data.sumBoilerDiffIncrease,\n        data.sumBoilerDiffDecrease,\n        data.numOfStatisticRecords1,\n      );\n    }\n  }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/entities/heatingEntity.ts. Directly output the source content.", "input": "", "output": "import {HeatingDataService} from \"../heating-data.service\";\n\nexport class HeatingEntity {\n\n  constructor(public id: string | null,\n              public measurementDate: Date,\n              public boilerTemp: number,\n              public boilerTempMin: number,\n              public boilerTempMax: number,\n              public compressorHours: number,\n              public heatingIn: number,\n              public heatingInMin: number,\n              public heatingInMax: number,\n              public heatingOut: number,\n              public heatingOutMin: number,\n              public heatingOutMax: number,\n              public soleIn: number,\n              public soleInMin: number,\n              public soleInMax: number,\n              public soleOut: number,\n              public soleOutMin: number,\n              public soleOutMax: number,\n              public ireg300TempOutdoor: number,\n              public ireg300TempOutdoorMin: number,\n              public ireg300TempOutdoorMax: number,\n              public di1Error: number,\n              public di10Compressor1: number,\n              public di14PumpDirect: number,\n              public di15PumpBoiler: number,\n              public di17BoilerEl: number,\n              public di21PumpPrimary: number,\n              public di22pumpLoad: number,\n              public di70PumpHk1: number,\n              public di71Hkm1ixOpen: number,\n              public di72Hkm1ixClose: number,\n  ) {\n\n  }\n\n  static emptyInstance() {\n    return new HeatingEntity(null, new Date(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n    );\n  }\n\n  static ofWebService(data: any) {\n    if (data == null) {\n      return this.emptyInstance();\n    } else {\n      return new HeatingEntity(\n        data.id,\n        HeatingDataService.convertDate(data.measurementDate),\n        data.boilerTemp,\n        data.boilerTempMin,\n        data.boilerTempMax,\n        data.compressorHours,\n        data.heatingIn,\n        data.heatingInMin,\n        data.heatingInMax,\n        data.heatingOut,\n        data.heatingOutMin,\n        data.heatingOutMax,\n        data.soleIn,\n        data.soleInMin,\n        data.soleInMax,\n        data.soleOut,\n        data.soleOutMin,\n        data.soleOutMax,\n        data.ireg300TempOutdoor,\n        data.ireg300TempOutdoorMin,\n        data.ireg300TempOutdoorMax,\n        data.di1Error,\n        data.di10Compressor1,\n        data.di14PumpDirect,\n        data.di15PumpBoiler,\n        data.di17BoilerEl,\n        data.di21PumpPrimary,\n        data.di22pumpLoad,\n        data.di70PumpHk1,\n        data.di71Hkm1ixOpen,\n        data.di72Hkm1ixClose,\n      );\n    }\n  }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/entities/meteoSwissEntity.ts. Directly output the source content.", "input": "", "output": "import {HeatingDataService} from \"../heating-data.service\";\n\nexport class MeteoSwissEntity {\n\n  constructor(public id: string,\n              public stationId: string,\n              public stationName: string,\n              public temperature: number,\n              public temperatureMin: number,\n              public temperatureMax: number,\n              public temperatureMeasureDate: Date,\n              public temperatureMeasureDateMin: Date,\n              public temperatureMeasureDateMax: Date,\n              public windGustSpeed: number,\n              public windGustSpeedMin: number,\n              public windGustSpeedMax: number,\n              public windMeasureDate: Date,\n              public windMeasureDateMin: Date,\n              public windMeasureDateMax: Date,\n  ) {\n\n  }\n\n  static emptyInstance() {\n    return new MeteoSwissEntity(\"\", \"\", \"\", 0, 0, 0, new Date(), new Date(), new Date(), 0, 0, 0, new Date(), new Date(), new Date());\n  }\n\n  static ofWebService(data: any) {\n    if (data == null) {\n      return this.emptyInstance();\n    } else {\n      return new MeteoSwissEntity(\n        data.id,\n        data.stationId,\n        data.stationName,\n        data.temperature,\n        data.temperatureMin,\n        data.temperatureMax,\n        HeatingDataService.convertDate(data.temperatureMeasureDate),\n        HeatingDataService.convertDate(data.temperatureMeasureDateMin),\n        HeatingDataService.convertDate(data.temperatureMeasureDateMax),\n        data.windGustSpeed,\n        data.windGustSpeedMin,\n        data.windGustSpeedMax,\n        HeatingDataService.convertDate(data.windMeasureDate),\n        HeatingDataService.convertDate(data.windMeasureDateMin),\n        HeatingDataService.convertDate(data.windMeasureDateMax),\n      );\n    }\n  }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/entities/soleInOutDeltaInOperationStatEntity.ts. Directly output the source content.", "input": "", "output": "import {HeatingDataService} from \"../heating-data.service\";\n\nexport class SoleInOutDeltaInOperationStatEntity {\n\n  constructor(\n    public measurementDateStart: Date,\n    public measurementDateEnd: Date,\n    public soleInOutDeltaInOperationAvg: number,\n    public soleInOutDeltaInOperationMin: number,\n    public soleInOutDeltaInOperationMax: number,\n    public compressorState: boolean,\n    public totalNumberOfProbesInSampleWindow: number,\n  ) {\n  }\n\n  static emptyInstance() {\n    return new SoleInOutDeltaInOperationStatEntity(new Date(), new Date(), 0, 0, 0, false, 0);\n  }\n\n  static ofWebService(data: any): SoleInOutDeltaInOperationStatEntity {\n    if (data == null) {\n      return this.emptyInstance();\n    } else {\n      return new SoleInOutDeltaInOperationStatEntity(\n        HeatingDataService.convertDate(data.measurementDateStart),\n        HeatingDataService.convertDate(data.measurementDateEnd),\n        data.soleInOutDeltaInOperationAvg,\n        data.soleInOutDeltaInOperationMin,\n        data.soleInOutDeltaInOperationMax,\n        data.compressorState,\n        data.totalNumberOfProbesInSampleWindow\n      );\n    }\n  }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/overview-current/overview-current-gauge.component.ts. Directly output the source content.", "input": "", "output": "import {Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {HeatingDataService} from \"../heating-data.service\";\nimport {interval} from 'rxjs';\nimport {HeatingEntity} from \"../entities/heatingEntity\";\nimport * as Highcharts from \"highcharts\";\n\nimport highchartsMore from \"highcharts/highcharts-more.js\"\nimport solidGauge from \"highcharts/modules/solid-gauge.js\";\nimport theme from 'highcharts/themes/dark-unica';\n\n\n@Component({\n  selector: 'app-overview-current-gauge',\n  templateUrl: './overview-current-gauge.component.html',\n  styleUrls: ['./overview-current-gauge.component.sass']\n})\nexport class OverviewCurrentGaugeComponent implements OnInit {\n\n  constructor(private heatingDataService: HeatingDataService) {\n  }\n\n  // HighchartsMore(Highcharts);\n\n  ngOnInit(): void {\n    this.myReload();\n    //timer(2000,2000).subscribe()\n    //new Observable().subscribe();\n\n    highchartsMore(Highcharts);\n    solidGauge(Highcharts);\n    theme(Highcharts);\n\n  }\n\n  @Output() receivedNewTHValue = new EventEmitter();\n  heatingEntity: HeatingEntity = HeatingEntity.emptyInstance();\n  highcharts: typeof Highcharts = Highcharts;\n\n\n  myReload() {\n    return this.heatingDataService.getCurrent(false)\n      .subscribe((data: any) => {\n        this.heatingEntity = HeatingEntity.ofWebService(data);\n        this.receivedNewTHValue.emit(data);\n      });\n  }\n\n  subscribe = interval(10000).subscribe(\n    val => {\n      this.myReload();\n    }\n  );\n\n  gaugeChartOptions: Highcharts.Options = {\n\n    chart: {\n      type: 'gauge',\n      plotBorderWidth: 0,\n      plotShadow: false\n    },\n\n    title: {\n      text: 'Speedometer'\n    },\n\n    pane: {\n      startAngle: -150,\n      endAngle: 150,\n\n    },\n\n    // the value axis\n    yAxis: [{\n      min: 20,\n      max: 65,\n\n      minorTickInterval: 'auto',\n      minorTickWidth: 1,\n      minorTickLength: 10,\n      minorTickPosition: 'inside',\n      minorTickColor: '#666',\n\n      tickPixelInterval: 30,\n      tickWidth: 2,\n      tickPosition: 'inside',\n      tickLength: 10,\n      tickColor: '#666',\n      labels: {\n        step: 2,\n        //rotation: 'auto'\n      },\n      title: {\n        text: 'km/h'\n      },\n      plotBands: [{\n        from: 20,\n        to: 30,\n        color: '#55BF3B' // green\n      }, {\n        from: 30,\n        to: 50,\n        color: '#DDDF0D' // yellow\n      }, {\n        from: 50,\n        to: 65,\n        color: '#DF5353' // red\n      }]\n    }],\n\n    series: [{\n      name: 'Speed',\n      type: 'gauge',\n      data: [80],\n      tooltip: {\n        valueSuffix: ' km/h'\n      }\n    }]\n\n\n  }\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/overview-current/overview-current.component.spec.ts. Directly output the source content.", "input": "", "output": "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { OverviewCurrentComponent } from './overview-current.component';\n\ndescribe('OverviewCurrentComponent', () => {\n  let component: OverviewCurrentComponent;\n  let fixture: ComponentFixture<OverviewCurrentComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ OverviewCurrentComponent ]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(OverviewCurrentComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/overview-current/overview-current.component.ts. Directly output the source content.", "input": "", "output": "import {Component, EventEmitter, HostListener, OnInit, Output} from '@angular/core';\nimport {HeatingDataService} from \"../heating-data.service\";\nimport {interval} from 'rxjs';\nimport {HeatingEntity} from \"../entities/heatingEntity\";\nimport {MeteoSwissEntity} from \"../entities/meteoSwissEntity\";\nimport * as moment from \"moment\";\n\n// import * as Highcharts from \"highcharts\";\n// import highchartsMore from \"highcharts/highcharts-more.js\"\n// import solidGauge from \"highcharts/modules/solid-gauge.js\";\n// import theme from 'highcharts/themes/dark-unica';\n\n\n@Component({\n  selector: 'app-overview-current',\n  templateUrl: './overview-current.component.html',\n  styleUrls: ['./overview-current.component.sass']\n})\nexport class OverviewCurrentComponent implements OnInit {\n\n  constructor(private heatingDataService: HeatingDataService) {\n  }\n\n  // HighchartsMore(Highcharts);\n  lastServiceRefresh: Date = new Date(2000, 1, 1);\n\n  ngOnInit(): void {\n    this.myReload();\n  }\n\n  //@Output() receivedNewTHValue = new EventEmitter();\n  heatingEntity: HeatingEntity = HeatingEntity.emptyInstance();\n\n  //@Output() receivedNewMeteoValue = new EventEmitter();\n  meteoSwissEntity: MeteoSwissEntity = MeteoSwissEntity.emptyInstance();\n\n  myReload() {\n\n    this.heatingDataService.getMeteoSwissCurrent(true, \"KLO\").subscribe(data => {\n      this.meteoSwissEntity = MeteoSwissEntity.ofWebService(data);\n      //this.receivedNewMeteoValue.emit(data);\n    });\n\n    let dateFrom = moment().subtract(24, \"hours\");\n    let dateTo = moment();\n\n    this.heatingDataService.getMeteoSwissHistorical(true, dateFrom, dateTo, 1, 0, new Set<string>().add(\"KLO\")).subscribe(data => {\n      console.log(\"Completed service call historic meteo:\", data);\n      // TODO: Implementation not yet done\n    });\n\n\n    return this.heatingDataService.getCurrent(true)\n      .subscribe((data: any) => {\n        this.heatingEntity = HeatingEntity.ofWebService(data);\n        //this.receivedNewTHValue.emit(data);\n      });\n  }\n\n  subscribe = interval(1000).subscribe(\n    val => {\n      // do more often intervals, to have better control in app case if it wakes up after a long sleep\n      let now = new Date();\n      let refreshBackendInterval = 30000;\n      if ((now.getTime() - this.lastServiceRefresh.getTime() > refreshBackendInterval)) {\n        console.log(\"Service refresh required. last one was \" + this.lastServiceRefresh);\n        this.lastServiceRefresh = now;\n        this.myReload();\n      }\n    }\n  );\n\n  /**\n   * Listener to catch if app gets active again\n   */\n  @HostListener('document:visibilitychange', ['$event'])\n  visibilitychange() {\n    console.log(\"document:visibilitychange called for overview-current\");\n    if (!document.hidden) {\n      console.log(\"Detected reactivation of browser window. About to refresh.\", new Date());\n      this.myReload();\n    }\n  }\n\n  getShowerRecommendation(): String {\n\n    let boilerTemp = this.heatingEntity.boilerTemp;\n    if (boilerTemp > 60) {\n      return \"Super heiss: Die Legionellenschaltung hat alles gegeben.\";\n    } else if (boilerTemp > 57) {\n      return \"Super heiss: Wahrscheinlich wegen Legionellen-Schaltung.\";\n    } else if (boilerTemp > 55) {\n      return \"Sehr heiss: Da k\u00f6nnte man ganze Badewannen f\u00fcllen.\";\n    } else if (boilerTemp > 52) {\n      return \"Doch eher heiss: Dein Duschtraum wird wahr.\";\n    } else if (boilerTemp > 51) {\n      return \"Doch eher heiss: F\u00fcr Profi Heiss-Duscher.\";\n    } else if (boilerTemp > 50) {\n      return \"Heiss: Duschspass garantiert f\u00fcr Heiss-Duscher.\";\n    } else if (boilerTemp > 45) {\n      return \"Heiss: Duschspass garantiert f\u00fcr Warm-Duscher.\";\n    } else if (boilerTemp > 47) {\n      return \"Ziemlich heiss. Komfortable Warm-Dusche m\u00f6glich.\";\n    } else if (boilerTemp > 42) {\n      return \"Warm: Ja, ganz gut...\";\n    } else if (boilerTemp > 40) {\n      return \"Warm: Is noch okey...\";\n    } else if (boilerTemp > 39) {\n      return \"Warm: Immernoch genug warm...\";\n    } else if (boilerTemp > 38) {"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/app/overview-current/overview-current.component.ts. Directly output the source content.", "input": "", "output": "      return \"Lauwarm: Kurze Dusche ok...\";\n    } else if (boilerTemp > 37) {\n      return \"Lauwarm: K\u00f6nnte erfrischend werden, oder kurz warten.\";\n    } else if (boilerTemp > 36) {\n      return \"K\u00fchl: Kleine Mutprobe?\";\n    } else if (boilerTemp > 35) {\n      return \"Sehr k\u00fchl: Nur f\u00fcr Eisb\u00e4ren geeignet...\";\n    } else if (boilerTemp > 34) {\n      return \"Polar Kalt: Selbst Eisb\u00e4ren \u00fcberlegen sich das...\";\n    } else if (boilerTemp > 33) {\n      return \"Kurz vor dem Gefrierpunkt ;-)\";\n    } else if (boilerTemp > 32) {\n      return \"Wusste nicht, dass es so kalt werden kann. \";\n    }\n\n    return \"Stromausfall oder wird es wirklich jemals soo kalt?\";\n  }\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/environments/environment.prod.ts. Directly output the source content.", "input": "", "output": "export const environment = {\n  production: true,\n  serviceBaseURL: \".\",\n  fullPageRefreshInSeconds: 60 * 60 * 24,\n  \"buildTimestampClient\": \"v01-20220220-093352\"\n};"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thclient/src/main/www/thserver-client/src/environments/environment.ts. Directly output the source content.", "input": "", "output": "// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  //serviceBaseURL: \"http://localhost:49088/pi11\",\n  serviceBaseURL: \"https://www.mindalyze.com/pi11/\",\n  fullPageRefreshInSeconds: 10 * 60 * 5,\n  \"buildTimestampClient\": \"v01-20220220-093352\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI."}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/.mvn/wrapper/MavenWrapperDownloader.java. Directly output the source content.", "input": "", "output": "/*\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n  https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n*/\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.nio.channels.Channels;\nimport java.nio.channels.ReadableByteChannel;\nimport java.util.Properties;\n\npublic class MavenWrapperDownloader {\n\n    /**\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n     */\n    private static final String DEFAULT_DOWNLOAD_URL =\n            \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar\";\n\n    /**\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n     * use instead of the default one.\n     */\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n            \".mvn/wrapper/maven-wrapper.properties\";\n\n    /**\n     * Path where the maven-wrapper.jar will be saved to.\n     */\n    private static final String MAVEN_WRAPPER_JAR_PATH =\n            \".mvn/wrapper/maven-wrapper.jar\";\n\n    /**\n     * Name of the property which should be used to override the default download url for the wrapper.\n     */\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n\n    public static void main(String args[]) {\n        System.out.println(\"- Downloader started\");\n        File baseDirectory = new File(args[0]);\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n        // wrapperUrl parameter.\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n        String url = DEFAULT_DOWNLOAD_URL;\n        if (mavenWrapperPropertyFile.exists()) {\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\n            try {\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n                Properties mavenWrapperProperties = new Properties();\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n            } catch (IOException e) {\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n            } finally {\n                try {\n                    if (mavenWrapperPropertyFileInputStream != null) {\n                        mavenWrapperPropertyFileInputStream.close();\n                    }\n                } catch (IOException e) {\n                    // Ignore ...\n                }\n            }\n        }\n        System.out.println(\"- Downloading from: : \" + url);\n\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n        if (!outputFile.getParentFile().exists()) {\n            if (!outputFile.getParentFile().mkdirs()) {\n                System.out.println(\n                        \"- ERROR creating output direcrory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n            }\n        }\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n        try {\n            downloadFileFromURL(url, outputFile);"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/.mvn/wrapper/MavenWrapperDownloader.java. Directly output the source content.", "input": "", "output": "            System.out.println(\"Done\");\n            System.exit(0);\n        } catch (Throwable e) {\n            System.out.println(\"- Error downloading\");\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n        URL website = new URL(urlString);\n        ReadableByteChannel rbc;\n        rbc = Channels.newChannel(website.openStream());\n        FileOutputStream fos = new FileOutputStream(destination);\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n        fos.close();\n        rbc.close();\n    }\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/Profiles.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver;\n\npublic class Profiles {\n\n    public static final String DEFAULT = \"default\";\n\n    /**\n     * use a mock implementation instead of the real modbus or the real service.\n     */\n    public static final String SENSOR_MOCK = \"sensormock\";\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/ThserverApplication.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver;\n\nimport com.x8ing.thsensor.thserver.db.dao.audit.AuditLogRepository;\nimport com.x8ing.thsensor.thserver.db.entity.audit.AuditLogEntity;\nimport com.x8ing.thsensor.thserver.device.service.HeatingDataReadService;\nimport com.x8ing.thsensor.thserver.utils.Utils;\nimport com.x8ing.thsensor.thserver.utils.spring.StartupData;\nimport com.x8ing.thsensor.thserver.web.services.info.bean.InfoBean;\nimport com.x8ing.thsensor.thserver.web.services.info.bean.MemoryInfo;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.scheduling.annotation.Scheduled;\n\nimport java.util.Map;\nimport java.util.TimeZone;\nimport java.util.TreeMap;\n\n@SpringBootApplication\n@EnableScheduling\npublic class ThserverApplication {\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n    private final AuditLogRepository auditLogRepository;\n\n    private final InfoBean infoBean;\n\n    private final StartupData startupData;\n\n    public ThserverApplication(HeatingDataReadService heatingDataReadService, AuditLogRepository auditLogRepository, InfoBean infoBean, StartupData startupData) {\n        this.auditLogRepository = auditLogRepository;\n        this.infoBean = infoBean;\n        this.startupData = startupData;\n        log.info(\"Created and initialized with heatingDataReadService=\" + heatingDataReadService.getClass().getSimpleName());\n        log.info(\"Started \" + infoBean);\n    }\n\n    public static void main(String[] args) {\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/Zurich\"));\n        //TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));// better, have a standard????\n        SpringApplication.run(ThserverApplication.class, args);\n    }\n\n    /**\n     * Actually execute only once... Yet, completely after full init to have the bean available\n     */\n    @Scheduled(initialDelay = 50, fixedDelay = Long.MAX_VALUE)\n    public void logStartup() {\n\n        Map<String, Object> detailInfo = new TreeMap<>();\n        detailInfo.put(\"startupTimes\", startupData);\n        detailInfo.put(\"memoryInfo\", MemoryInfo.getCurrent());\n        detailInfo.put(\"serverInfo\", infoBean);\n\n        this.auditLogRepository.save(new AuditLogEntity(\"SERVER\", \"START\", \"STARTUP\", Utils.toJSON(detailInfo), null, null));\n    }\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/data/meteoswiss/MeteoDataPoller.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.data.meteoswiss;\n\nimport com.x8ing.thsensor.thserver.db.dao.meteoswiss.MeteoSwissRepository;\nimport com.x8ing.thsensor.thserver.db.entity.meteoswiss.MeteoSwissEntity;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n@Component\npublic class MeteoDataPoller {\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n    private final MeteoDataService meteoDataService;\n\n    private final MeteoSwissRepository meteoSwissRepository;\n\n    public MeteoDataPoller(MeteoDataService meteoDataService, MeteoSwissRepository meteSwissRepository) {\n        this.meteoDataService = meteoDataService;\n        this.meteoSwissRepository = meteSwissRepository;\n\n        meteoDataService.init(); // init\n        log.info(\"Did init MeteoDataService \" + meteoDataService.getClass().getSimpleName());\n    }\n\n\n    @Scheduled(fixedDelayString = \"${thserver.meteoSwiss.pollingInterval:PT900s}\", initialDelay = 0)\n    public void pollData() {\n\n        long t0 = System.currentTimeMillis();\n\n        try {\n            List<MeteoSwissEntity> meteoSwissEntity = meteoDataService.getData();\n            meteoSwissRepository.saveAll(meteoSwissEntity);\n        } catch (Throwable e) {\n            String msg = \"Exception while reading data from MeteoSwiss\";\n            log.error(msg, e);\n            throw new RuntimeException(msg, e);\n        }\n\n        log.info(\"Did poll live data from MeteoSwiss completed and persisted successfully. dt=\" + (System.currentTimeMillis() - t0));\n\n    }\n\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/data/meteoswiss/MeteoDataService.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.data.meteoswiss;\n\nimport com.x8ing.thsensor.thserver.db.entity.meteoswiss.MeteoSwissEntity;\n\nimport java.util.List;\n\npublic interface MeteoDataService {\n\n\n    void init();\n\n    List<MeteoSwissEntity> getData();\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/data/meteoswiss/impl/MeteoDataMockImpl.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.data.meteoswiss.impl;\n\nimport com.x8ing.thsensor.thserver.Profiles;\nimport com.x8ing.thsensor.thserver.data.meteoswiss.MeteoDataService;\nimport com.x8ing.thsensor.thserver.db.entity.meteoswiss.MeteoSwissEntity;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\nimport java.util.List;\n\n@Component\n@Profile(Profiles.SENSOR_MOCK)\npublic class MeteoDataMockImpl implements MeteoDataService {\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n    private final long t0 = System.currentTimeMillis() - 1;\n\n\n    @Override\n    public void init() {\n\n    }\n\n    @Override\n    public List<MeteoSwissEntity> getData() {\n\n        log.info(\"Generate mock data for MeteoSwiss\");\n\n        @SuppressWarnings(\"IntegerDivisionInFloatingPointContext\")\n        double dtS = (System.currentTimeMillis() - t0) / 1000;\n\n        MeteoSwissEntity entity = new MeteoSwissEntity();\n        entity.setCreateDate(new Date());\n\n        entity.setStationName(\"Kloten\");\n        entity.setStationId(\"KLO\");\n\n        entity.setWindMeasureDate(new Date());\n        entity.setWindGustSpeed(dtS / 30 + 60);\n\n        entity.setTemperatureMeasureDate(new Date());\n        entity.setTemperature(dtS / 10 - 10);\n\n        return List.of(entity);\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/data/meteoswiss/impl/MeteoDataServiceImpl.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.data.meteoswiss.impl;\n\nimport com.jayway.jsonpath.*;\nimport com.jayway.jsonpath.spi.json.JacksonJsonProvider;\nimport com.jayway.jsonpath.spi.json.JsonProvider;\nimport com.jayway.jsonpath.spi.mapper.JacksonMappingProvider;\nimport com.jayway.jsonpath.spi.mapper.MappingProvider;\nimport com.x8ing.thsensor.thserver.Profiles;\nimport com.x8ing.thsensor.thserver.data.meteoswiss.MeteoDataService;\nimport com.x8ing.thsensor.thserver.db.entity.meteoswiss.MeteoSwissEntity;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.http.converter.StringHttpMessageConverter;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.nio.charset.StandardCharsets;\nimport java.time.Instant;\nimport java.time.format.DateTimeFormatter;\nimport java.time.temporal.TemporalAccessor;\nimport java.util.*;\n\n@Component\n@Profile(\"!\" + Profiles.SENSOR_MOCK)\npublic class MeteoDataServiceImpl implements MeteoDataService {\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n    @Value(\"${thserver.meteoSwiss.urlSunshine}\")\n    private String urlSunshine;\n\n    @Value(\"${thserver.meteoSwiss.urlTemperature}\")\n    private String urlTemperature;\n\n    @Value(\"${thserver.meteoSwiss.urlWindGust}\")\n    private String urlWindGust;\n\n    @Value(\"${thserver.meteoSwiss.stationIds}\")\n    private List<String> stationIds;\n\n    public void init() {\n        log.info(\"Init\");\n\n        Configuration.setDefaults(new Configuration.Defaults() {\n\n            private final JsonProvider jsonProvider = new JacksonJsonProvider();\n            private final MappingProvider mappingProvider = new JacksonMappingProvider();\n\n            @Override\n            public JsonProvider jsonProvider() {\n                return jsonProvider;\n            }\n\n            @Override\n            public MappingProvider mappingProvider() {\n                return mappingProvider;\n            }\n\n            @Override\n            public Set<Option> options() {\n                return EnumSet.noneOf(Option.class);\n            }\n        });\n\n    }\n\n\n    @Override\n    public List<MeteoSwissEntity> getData() {\n\n        long t0 = System.currentTimeMillis();\n        log.info(\"About to query the MeteoSwiss service for live temperature, sunshine and windgust info.\");\n\n        String sunshineJSON = callService(urlSunshine);\n        String temperatureJSON = callService(urlTemperature);\n        String windGustJSON = callService(urlWindGust);\n\n        long dtServiceMeteoSwiss = System.currentTimeMillis() - t0;\n\n        List<MeteoSwissEntity> entities = new ArrayList<>();\n        for (String stationId : stationIds) {\n\n            MeteoSwissEntity entity = new MeteoSwissEntity();\n            entity.setStationId(stationId);\n\n            ResDateValue sunshine = extractFromJSON(sunshineJSON, stationId, null);\n            entity.setSunshine(sunshine.getValue1());\n            entity.setSunshineMeasureDate(sunshine.getMeasurementDate());\n\n            ResDateValue temperature = extractFromJSON(temperatureJSON, stationId, null);\n            entity.setTemperature(temperature.getValue1());\n            entity.setTemperatureMeasureDate(temperature.getMeasurementDate());\n\n            ResDateValue windGust = extractFromJSON(windGustJSON, stationId, \"wind_direction\");\n            entity.setWindGustSpeed(windGust.getValue1());\n            entity.setWindDirection(windGust.getValue2());\n            entity.setWindMeasureDate(windGust.getMeasurementDate());\n\n            entity.setStationName(temperature.getStationName());\n\n            entities.add(entity);\n        }\n\n        log.info(\"MeteoSwiss data polling completed. \"\n                + \"dt[ms]=\" + (System.currentTimeMillis() - t0)\n                + \" dtServiceMeteoSwiss=\" + dtServiceMeteoSwiss"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/data/meteoswiss/impl/MeteoDataServiceImpl.java. Directly output the source content.", "input": "", "output": "                + \" numberOfStations=\" + stationIds.size()\n                + \" stationIds:\" + stationIds);\n\n        return entities;\n    }\n\n    private ResDateValue extractFromJSON(String json, String stationId, String value2Property) {\n\n        DocumentContext parsed = JsonPath.parse(json);\n\n        //Double temperature = ((ArrayList)parsed.read(basePath + \".value\")).get(0);\n        TypeRef<List<String>> typeRefString = new TypeRef<>() {\n        };\n        TypeRef<List<Double>> typeRefDouble = new TypeRef<>() {\n        };\n\n        String basePath = \"$[*][?(@.id=='\" + stationId + \"')].properties\";\n        String timeStamp = parsed.read(basePath + \".reference_ts\", typeRefString).get(0); // e.g. 2022-01-30T17:50:00Z\n\n        TemporalAccessor ta = DateTimeFormatter.ISO_INSTANT.parse(timeStamp);\n        Instant i = Instant.from(ta);\n        Date measureTimeStamp = Date.from(i);\n\n        Double value1 = parsed.read(basePath + \".value\", typeRefDouble).get(0);\n\n        Double value2 = null;\n        if (value2Property != null) {\n            value2 = parsed.read(basePath + \".\" + value2Property, typeRefDouble).get(0);\n        }\n        String stationName = parsed.read(basePath + \".station_name\", typeRefString).get(0);\n\n        return new ResDateValue(measureTimeStamp, value1, value2, stationName);\n    }\n\n    private String callService(String url) {\n        RestTemplate restTemplate = new RestTemplate();\n        // important: set UTF8, otherwise RestTemplate will do ISO\n        restTemplate.getMessageConverters().add(0, new StringHttpMessageConverter(StandardCharsets.UTF_8));\n        return restTemplate.getForObject(url, String.class);\n    }\n\n    @Data\n    @AllArgsConstructor\n    private static class ResDateValue {\n        private Date measurementDate;\n\n        private Double value1;\n\n        private Double value2;\n\n        private String stationName;\n\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/cache/CachingConfig.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.cache;\n\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.cache.concurrent.ConcurrentMapCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@EnableCaching\npublic class CachingConfig {\n\n    @Bean\n    public CacheManager cacheManager() {\n        return new ConcurrentMapCacheManager(\"sessionDeviceCache\");\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/HeatPumpRepository.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.dao;\n\nimport com.x8ing.thsensor.thserver.db.entity.HeatPumpEntity;\nimport com.x8ing.thsensor.thserver.db.entity.HeatPumpStatisticsEntity;\nimport com.x8ing.thsensor.thserver.db.entity.analytics.BoilerStatsByDayOfWeek;\nimport com.x8ing.thsensor.thserver.db.entity.analytics.BoilerStatsByHour;\nimport com.x8ing.thsensor.thserver.db.entity.analytics.SoleInOutDeltaInOperationStats;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Date;\nimport java.util.List;\n\n@SuppressWarnings(\"SqlResolve\")\n@Repository\npublic interface HeatPumpRepository extends CrudRepository<HeatPumpEntity, String> {\n\n    @Query(value = \"select * from heat_pump hp order by measurement_date desc limit 1\", nativeQuery = true)\n    HeatPumpEntity getLastEntry();\n\n    @Query(value = \"select * from heat_pump hp order by measurement_date desc limit :maxRows\", nativeQuery = true)\n    List<HeatPumpEntity> getLastEntries(int maxRows);\n\n    @Query(value = \"select\\n\" +\n            \"    max(id) id,\\n\" +\n            \"    -- measurement_date\\n\" +\n            \"    max(measurement_date) measurementDate,\\n\" +\n            \"    min(measurement_date) measurementDateMin,\\n\" +\n            \"    max(measurement_date) measurementDateMax,\\n\" +\n            \"    -- boilder_temp\\n\" +\n            \"    avg(boiler_temp) boilerTemp,\\n\" +\n            \"    min(boiler_temp) boilerTempMin,\\n\" +\n            \"    max(boiler_temp) boilerTempMax,\\n\" +\n            \"    -- compressor_hours\\n\" +\n            \"    avg(compressor_hours) compressorHours,\\n\" +\n            \"    min(compressor_hours) compressorHoursMin,\\n\" +\n            \"    max(compressor_hours) compressorHoursMax,\\n\" +\n            \"    -- heating_in\\n\" +\n            \"    avg(heating_in) heatingIn,\\n\" +\n            \"    min(heating_in) heatingInMin,\\n\" +\n            \"    max(heating_in) heatingInMax,\\n\" +\n            \"    -- heating_out        \\n\" +\n            \"    avg(heating_out) heatingOut,\\n\" +\n            \"    min(heating_out) heatingOutMin,\\n\" +\n            \"    max(heating_out) heatingOutMax,\\n\" +\n            \"    -- sole_in\\n\" +\n            \"    avg(sole_in) soleIn,\\n\" +\n            \"    min(sole_in) soleInMin,\\n\" +\n            \"    max(sole_in) soleInMax,\\n\" +\n            \"    -- sole_out\\n\" +\n            \"    avg(sole_out) soleOut,\\n\" +\n            \"    min(sole_out) soleOutMin,\\n\" +\n            \"    max(sole_out) soleOutMax,\\n\" +\n            \"\\t   -- outdoorTemperature\\n\" +\n            \"       avg(ireg300temp_outdoor) ireg300TempOutdoor,\\n\" +\n            \"       min(ireg300temp_outdoor) ireg300TempOutdoorMin,\\n\" +\n            \"       max(ireg300temp_outdoor) ireg300TempOutdoorMAx,\\n\" +\n            \"       -- for the values below, calculate the on-percentage of the consolidated values in the time period\\n\" +\n            \"       -- 1 means it was always on, 0 means it was never on, anything between is the ratio. \\n\" +\n            \"       round(avg(cast ( di1error as integer)),5) di1Error,\\n\" +\n            \"       round(avg(cast ( di10Compressor1 as integer)),5) di10Compressor1,\\n\" +\n            \"       round(avg(cast ( di14pump_direct as integer)),5) di14PumpDirect,\\n\" +\n            \"       round(avg(cast ( di15pump_boiler as integer)),5) di15PumpBoiler,\\n\" +\n            \"       round(avg(cast ( di17boiler_el as integer)),5) di17BoilerEl,\\n\" +\n            \"       round(avg(cast ( di21pump_primary as integer)),5) di21PumpPrimary,\\n\" +\n            \"       round(avg(cast ( di22pump_load as integer)),5) di22pumpLoad,\\n\" +\n            \"       round(avg(cast ( di70pumphk1 as integer)),5) di70PumpHk1,\\n\" +\n            \"       round(avg(cast ( di71hkm1ix_open as integer)),5) di71Hkm1ixOpen,\\n\" +\n            \"       round(avg(cast ( di72hkm1ix_close as integer)),5) di72Hkm1ixClose     \\n\" +"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/HeatPumpRepository.java. Directly output the source content.", "input": "", "output": "            \"from (select ntile(:maxRows) over ( order by measurement_date ) as grp, *\\n\" +\n            \"      from heat_pump t\\n\" +\n            \"      where t.measurement_date > :measurement_date_start  -- TO_TIMESTAMP( '2017-03-31 9:30:20', 'YYYY-MM-DD HH24:MI:SS')\\n\" +\n            \"      and t.measurement_date < :measurement_date_end) t\\n\" +\n            \"group by grp\\n\" +\n            \"order by measurementDate desc\", nativeQuery = true)\n    List<HeatPumpStatisticsEntity> findBetweenDatesLimitByRowsStats(\n            Date measurement_date_start,\n            Date measurement_date_end,\n            int maxRows);\n\n\n    @Query(value = \"select\\n\" +\n            \"    max(id) id,\\n\" +\n            \"    -- measurement_date\\n\" +\n            \"    max(measurement_date) measurementDate,\\n\" +\n            \"    min(measurement_date) measurementDateMin,\\n\" +\n            \"    max(measurement_date) measurementDateMax,\\n\" +\n            \"    -- boilder_temp\\n\" +\n            \"    avg(boiler_temp) boilerTemp,\\n\" +\n            \"    min(boiler_temp) boilerTempMin,\\n\" +\n            \"    max(boiler_temp) boilerTempMax,\\n\" +\n            \"    -- compressor_hours\\n\" +\n            \"    avg(compressor_hours) compressorHours,\\n\" +\n            \"    min(compressor_hours) compressorHoursMin,\\n\" +\n            \"    max(compressor_hours) compressorHoursMax,\\n\" +\n            \"    -- heating_in\\n\" +\n            \"    avg(heating_in) heatingIn,\\n\" +\n            \"    min(heating_in) heatingInMin,\\n\" +\n            \"    max(heating_in) heatingInMax,\\n\" +\n            \"    -- heating_out        \\n\" +\n            \"    avg(heating_out) heatingOut,\\n\" +\n            \"    min(heating_out) heatingOutMin,\\n\" +\n            \"    max(heating_out) heatingOutMax,\\n\" +\n            \"    -- sole_in\\n\" +\n            \"    avg(sole_in) soleIn,\\n\" +\n            \"    min(sole_in) soleInMin,\\n\" +\n            \"    max(sole_in) soleInMax,\\n\" +\n            \"    -- sole_out\\n\" +\n            \"    avg(sole_out) soleOut,\\n\" +\n            \"    min(sole_out) soleOutMin,\\n\" +\n            \"    max(sole_out) soleOutMax,\\n\" +\n            \"\\t   -- outdoorTemperature\\n\" +\n            \"       avg(ireg300temp_outdoor) ireg300TempOutdoor,\\n\" +\n            \"       min(ireg300temp_outdoor) ireg300TempOutdoorMin,\\n\" +\n            \"       max(ireg300temp_outdoor) ireg300TempOutdoorMAx,\\n\" +\n            \"       -- for the values below, calculate the on-percentage of the consolidated values in the time period\\n\" +\n            \"       -- 1 means it was always on, 0 means it was never on, anything between is the ratio. \\n\" +\n            \"       round(avg(cast ( di1error as integer)),5) di1Error,\\n\" +\n            \"       round(avg(cast ( di10Compressor1 as integer)),5) di10Compressor1,\\n\" +\n            \"       round(avg(cast ( di14pump_direct as integer)),5) di14PumpDirect,\\n\" +\n            \"       round(avg(cast ( di15pump_boiler as integer)),5) di15PumpBoiler,\\n\" +\n            \"       round(avg(cast ( di17boiler_el as integer)),5) di17BoilerEl,\\n\" +\n            \"       round(avg(cast ( di21pump_primary as integer)),5) di21PumpPrimary,\\n\" +\n            \"       round(avg(cast ( di22pump_load as integer)),5) di22pumpLoad,\\n\" +\n            \"       round(avg(cast ( di70pumphk1 as integer)),5) di70PumpHk1,\\n\" +\n            \"       round(avg(cast ( di71hkm1ix_open as integer)),5) di71Hkm1ixOpen,\\n\" +\n            \"       round(avg(cast ( di72hkm1ix_close as integer)),5) di72Hkm1ixClose     \\n\" +\n            \"from\\n\" +\n            \"    (\\n\" +\n            \"    select\\n\" +\n            \"        -- have a generic grouping in seconds\\n\" +\n            \"        round(extract(epoch from measurement_date) / :group_every_nth_second) groupid,\\n\" +\n            \"        h.*\\n\" +\n            \"    from\\n\" +\n            \"        heat_pump h\\n\" +\n            \"    where\\n\" +\n            \"        h.measurement_date > :measurement_date_start\\n\" +\n            \"        -- TO_TIMESTAMP( '2017-03-31 9:30:20', 'YYYY-MM-DD HH24:MI:SS')\\n\" +"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/HeatPumpRepository.java. Directly output the source content.", "input": "", "output": "            \"        and h.measurement_date < :measurement_date_end)\\n\" +\n            \"        q1\\n\" +\n            \"group by\\n\" +\n            \"    groupid\\n\" +\n            \"order by\\n\" +\n            \"    measurementDate desc\", nativeQuery = true)\n    List<HeatPumpStatisticsEntity> findBetweenDatesLimitByFixedIntervalStats(\n            Date measurement_date_start,\n            Date measurement_date_end,\n            @Param(\"group_every_nth_second\") int groupEveryNthSecond);\n\n    @Query(value = \"select hour_of_day                             as hourOfTheDay,\\n\" +\n            \"       sum(boiler_temp_max_decrease_in_window) as sumBoilerDiffDecrease,\\n\" +\n            \"       sum(boiler_temp_max_increase_in_window) as sumBoilerDiffIncrease,\\n\" +\n            \"       max(num_of_statistic_records_1)         as numOfStatisticRecords1\\n\" +\n            \"from (\\n\" +\n            \"         select min(measurement_date_t0)                as measurement_date_t0,\\n\" +\n            \"                max(measurement_date_t1)                as measurement_date_t1,\\n\" +\n            \"                day_of_week_starting_monday,\\n\" +\n            \"                day_of_week_text,\\n\" +\n            \"                hour_of_day,\\n\" +\n            \"                min(boiler_temp_max_decrease_in_window) as boiler_temp_max_decrease_in_window,\\n\" +\n            \"                max(boiler_temp_max_increase_in_window) as boiler_temp_max_increase_in_window,\\n\" +\n            \"                max(num_of_statistic_records_1)         as num_of_statistic_records_1\\n\" +\n            \"         from (\\n\" +\n            \"                  select year1,\\n\" +\n            \"                         doy,\\n\" +\n            \"                         day_of_week_starting_monday,\\n\" +\n            \"                         day_of_week_text,\\n\" +\n            \"                         hour_of_day,\\n\" +\n            \"                         boiler_temp,\\n\" +\n            \"                         measurement_date,\\n\" +\n            \"                         measurement_date_t0,\\n\" +\n            \"                         measurement_date_t1,\\n\" +\n            \"                         case when boiler_temp_max_decrease_in_window > 0 then 0 else boiler_temp_max_decrease_in_window end     boiler_temp_max_decrease_in_window,\\n\" +\n            \"                         case when boiler_temp_max_increase_in_window <= 0.11 then 0 else boiler_temp_max_increase_in_window end boiler_temp_max_increase_in_window,\\n\" +\n            \"                         num_of_statistic_records_1\\n\" +\n            \"                  from (\\n\" +\n            \"                           select year1,\\n\" +\n            \"                                  doy,\\n\" +\n            \"                                  day_of_week_starting_monday,\\n\" +\n            \"                                  day_of_week_text,\\n\" +\n            \"                                  hour_of_day,\\n\" +\n            \"                                  boiler_temp,\\n\" +\n            \"                                  measurement_date,\\n\" +\n            \"                                  measurement_date_t0,\\n\" +\n            \"                                  measurement_date_t1,\\n\" +\n            \"                                  -1.0 * GREATEST(boiler_temp_window_tMax - boiler_temp_window_t1, boiler_temp_window_t0 - boiler_temp_window_tMin) boiler_temp_max_decrease_in_window,\\n\" +\n            \"                                  GREATEST(boiler_temp_window_tMax - boiler_temp_window_t0, boiler_temp_window_t1 - boiler_temp_window_tMin)        boiler_temp_max_increase_in_window,\\n\" +\n            \"                                  boiler_temp_window_t0,\\n\" +\n            \"                                  boiler_temp_window_t1,\\n\" +\n            \"                                  boiler_temp_window_tMin,\\n\" +\n            \"                                  boiler_temp_window_tMax,\\n\" +\n            \"                                  num_of_statistic_records_1\\n\" +"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/HeatPumpRepository.java. Directly output the source content.", "input": "", "output": "            \"                           from (\\n\" +\n            \"                                    select measurement_date,\\n\" +\n            \"                                           year1,\\n\" +\n            \"                                           doy,\\n\" +\n            \"                                           case when day_of_week_starting_sunday <= 0 then day_of_week_starting_sunday + 7 else day_of_week_starting_sunday end as day_of_week_starting_monday,\\n\" +\n            \"                                           To_Char(measurement_date, 'DAY')                                                                                        day_of_week_text,\\n\" +\n            \"                                           hour_of_day,\\n\" +\n            \"                                           boiler_temp,\\n\" +\n            \"                                           minute_of_hour,\\n\" +\n            \"                                           first_value(measurement_date) over ( partition by year1, doy, hour_of_day order by minute_of_hour)                      measurement_date_t0,\\n\" +\n            \"                                           last_value(measurement_date) over ( partition by year1, doy, hour_of_day order by minute_of_hour)                       measurement_date_t1,\\n\" +\n            \"                                           first_value(boiler_temp) over ( partition by year1, doy, hour_of_day order by minute_of_hour)                           boiler_temp_window_t0,\\n\" +\n            \"                                           last_value(boiler_temp) over ( partition by year1, doy, hour_of_day order by minute_of_hour)                            boiler_temp_window_t1,\\n\" +\n            \"                                           min(boiler_temp) over ( partition by year1, doy, hour_of_day order by minute_of_hour)                                   boiler_temp_window_tMin,\\n\" +\n            \"                                           max(boiler_temp) over ( partition by year1, doy, hour_of_day order by minute_of_hour)                                   boiler_temp_window_tMax,\\n\" +\n            \"                                           num_of_statistic_records_1\\n\" +\n            \"                                    from (\\n\" +\n            \"                                             select measurement_date,\\n\" +\n            \"                                                    extract(year from measurement_date)   year1,\\n\" +\n            \"                                                    extract(doy from measurement_date)    doy, -- day of the year\\n\" +\n            \"                                                    extract(hour from measurement_date)   hour_of_day,\\n\" +\n            \"                                                    extract(minute from measurement_date) minute_of_hour,\\n\" +\n            \"                                                    extract(dow from measurement_date) as day_of_week_starting_sunday,\\n\" +\n            \"                                                    To_Char(measurement_date, 'DAY')      day_of_week_text,\\n\" +\n            \"                                                    count(1) over ()                      num_of_statistic_records_1,\\n\" +\n            \"                                                    h1.boiler_temp\\n\" +\n            \"                                             from heat_pump h1\\n\" +\n            \"                                             where 1 = 1\\n\" +\n            \"                                               and measurement_date >= :measurement_date_start \" +\n            \"                                               and measurement_date <= :measurement_date_end   \" +\n            \"                                             order by year1, doy, hour_of_day, minute_of_hour\\n\" +\n            \"                                         ) h2\\n\" +\n            \"                                ) h3\\n\" +\n            \"                       ) h4\\n\" +"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/HeatPumpRepository.java. Directly output the source content.", "input": "", "output": "            \"              ) h5\\n\" +\n            \"         group by year1, doy, day_of_week_starting_monday, day_of_week_text, hour_of_day\\n\" +\n            \"         order by year1, doy, hour_of_day) h7\\n\" +\n            \"group by hour_of_day\\n\" +\n            \"order by hour_of_day\", nativeQuery = true)\n    List<BoilerStatsByHour> getBoilerStatsByHour(Date measurement_date_start, Date measurement_date_end);\n\n\n    @Query(value = \"select \\n\" +\n            \"\\tday_of_week_starting_monday as dayOfWeekStartingMonday,\\n\" +\n            \"\\tday_of_week_text dayOfWeekText,\\n\" +\n            \"\\tsum(boiler_temp_max_decrease_in_window) as sumBoilerDiffDecrease,\\n\" +\n            \"\\tsum(boiler_temp_max_increase_in_window) as sumBoilerDiffIncrease,\\n\" +\n            \"\\tmax(num_of_statistic_records_1) as numOfStatisticRecords1\\n\" +\n            \"from (\\n\" +\n            \"select min(measurement_date_t0)                as measurement_date_t0,\\n\" +\n            \"       max(measurement_date_t1)                as measurement_date_t1,\\n\" +\n            \"       day_of_week_starting_monday,\\n\" +\n            \"       day_of_week_text,\\n\" +\n            \"       hour_of_day,\\n\" +\n            \"       min(boiler_temp_max_decrease_in_window) as boiler_temp_max_decrease_in_window,\\n\" +\n            \"       max(boiler_temp_max_increase_in_window) as boiler_temp_max_increase_in_window,\\n\" +\n            \"       max(num_of_statistic_records_1)         as num_of_statistic_records_1\\n\" +\n            \"from (\\n\" +\n            \"         select year1,\\n\" +\n            \"                doy,\\n\" +\n            \"                day_of_week_starting_monday,\\n\" +\n            \"                day_of_week_text,\\n\" +\n            \"                hour_of_day,\\n\" +\n            \"                boiler_temp,\\n\" +\n            \"                measurement_date,\\n\" +\n            \"                measurement_date_t0,\\n\" +\n            \"                measurement_date_t1,\\n\" +\n            \"                case when boiler_temp_max_decrease_in_window > 0 then 0 else boiler_temp_max_decrease_in_window end     boiler_temp_max_decrease_in_window,\\n\" +\n            \"                case when boiler_temp_max_increase_in_window <= 0.11 then 0 else boiler_temp_max_increase_in_window end boiler_temp_max_increase_in_window,\\n\" +\n            \"                num_of_statistic_records_1\\n\" +\n            \"         from (\\n\" +\n            \"                  select year1,\\n\" +\n            \"                         doy,\\n\" +\n            \"                         day_of_week_starting_monday,\\n\" +\n            \"                         day_of_week_text,\\n\" +\n            \"                         hour_of_day,\\n\" +\n            \"                         boiler_temp,\\n\" +\n            \"                         measurement_date,\\n\" +\n            \"                         measurement_date_t0,\\n\" +\n            \"                         measurement_date_t1,\\n\" +\n            \"                         -1.0 * GREATEST(boiler_temp_window_tMax - boiler_temp_window_t1, boiler_temp_window_t0 - boiler_temp_window_tMin) boiler_temp_max_decrease_in_window,\\n\" +\n            \"                         GREATEST(boiler_temp_window_tMax - boiler_temp_window_t0, boiler_temp_window_t1 - boiler_temp_window_tMin)        boiler_temp_max_increase_in_window,\\n\" +\n            \"                         boiler_temp_window_t0,\\n\" +\n            \"                         boiler_temp_window_t1,\\n\" +\n            \"                         boiler_temp_window_tMin,\\n\" +\n            \"                         boiler_temp_window_tMax,\\n\" +\n            \"                         num_of_statistic_records_1\\n\" +\n            \"                  from (\\n\" +\n            \"                           select measurement_date,\\n\" +\n            \"                                  year1,\\n\" +\n            \"                                  doy,\\n\" +"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/HeatPumpRepository.java. Directly output the source content.", "input": "", "output": "            \"                                  case when day_of_week_starting_sunday <= 0 then day_of_week_starting_sunday + 7 else day_of_week_starting_sunday end as day_of_week_starting_monday,\\n\" +\n            \"                                  To_Char(measurement_date, 'DAY')                                                                                        day_of_week_text,\\n\" +\n            \"                                  hour_of_day,\\n\" +\n            \"                                  boiler_temp,\\n\" +\n            \"                                  minute_of_hour,\\n\" +\n            \"                                  first_value(measurement_date) over ( partition by year1, doy, hour_of_day order by minute_of_hour)                      measurement_date_t0,\\n\" +\n            \"                                  last_value(measurement_date) over ( partition by year1, doy, hour_of_day order by minute_of_hour)                       measurement_date_t1,\\n\" +\n            \"                                  first_value(boiler_temp) over ( partition by year1, doy, hour_of_day order by minute_of_hour)                           boiler_temp_window_t0,\\n\" +\n            \"                                  last_value(boiler_temp) over ( partition by year1, doy, hour_of_day order by minute_of_hour)                            boiler_temp_window_t1,\\n\" +\n            \"                                  min(boiler_temp) over ( partition by year1, doy, hour_of_day order by minute_of_hour)                                   boiler_temp_window_tMin,\\n\" +\n            \"                                  max(boiler_temp) over ( partition by year1, doy, hour_of_day order by minute_of_hour)                                   boiler_temp_window_tMax,\\n\" +\n            \"                                  num_of_statistic_records_1\\n\" +\n            \"                           from (\\n\" +\n            \"                                    select measurement_date,\\n\" +\n            \"                                           extract(year from measurement_date)   year1,\\n\" +\n            \"                                           extract(doy from measurement_date)    doy, \" +\n            \"                                           extract(hour from measurement_date)   hour_of_day,\\n\" +\n            \"                                           extract(minute from measurement_date) minute_of_hour,\\n\" +\n            \"                                           extract(dow from measurement_date) as day_of_week_starting_sunday,\\n\" +\n            \"                     To_Char(measurement_date , 'DAY') day_of_week_text,\\n\" +\n            \"                                           count(1) over ()                      num_of_statistic_records_1,\\n\" +\n            \"                                           h1.boiler_temp\\n\" +\n            \"                                    from heat_pump h1\\n\" +\n            \"                                    where 1 = 1\\n\" +\n            \"                                      and measurement_date >= :measurement_date_start \" +\n            \"                                      and measurement_date <= :measurement_date_end   \" +\n            \"                                    order by year1, doy, hour_of_day, minute_of_hour\\n\" +\n            \"                                ) h2\\n\" +\n            \"                       ) h3\\n\" +\n            \"              ) h4\\n\" +\n            \"     ) h5\\n\" +\n            \"group by year1, doy, day_of_week_starting_monday, day_of_week_text, hour_of_day\\n\" +\n            \"order by year1, doy, hour_of_day) h7\\n\" +\n            \"group by day_of_week_starting_monday, day_of_week_text \\n\" +\n            \"order by day_of_week_starting_monday\", nativeQuery = true)\n    List<BoilerStatsByDayOfWeek> getBoilerStatsByDayOfWeek(Date measurement_date_start, Date measurement_date_end);\n\n\n    /**"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/HeatPumpRepository.java. Directly output the source content.", "input": "", "output": "     * ------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * -- SOLE IN/OUT difference while in operation (with a completely generic group-by)\n     * ------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * a query to get the temperature difference between SOLE_IN and SOLE_OUT when the compressor is running for at least a few minutes.\n     * this avoids the issue, that the readings tend to go to the environment temperature when no water is circulating in the beginning.\n     * that query is to consolidate the stats if we run a long term analysis\n     *\n     * @param groupEveryNthSecond optional: either maxRows or groupEveryNthSecond. Ignored if <0\n     * @param maxRows             optional: either maxRows or groupEveryNthSecond. Ignored if <0\n     */\n    @Query(value = \"select min(measurement_date_start)                                        as measurementDateStart,\\n\" +\n            \"       max(measurement_date_end)                                          as measurementDateEnd,\\n\" +\n            \"       round(cast(avg(sole_in_out_delta_in_operation_avg) as numeric), 3) as soleInOutDeltaInOperationAvg,\\n\" +\n            \"       round(cast(min(sole_in_out_delta_in_operation_avg) as numeric), 3) as soleInOutDeltaInOperationMin,\\n\" +\n            \"       round(cast(max(sole_in_out_delta_in_operation_avg) as numeric), 3) as soleInOutDeltaInOperationMax,\\n\" +\n            \"       di10compressor1                                                    as compressorState,\\n\" +\n            \"       sum(number_of_probes)                                              as totalNumberOfProbesInSampleWindow\\n\" +\n            \"from (\\n\" +\n            \"         -- query to have generic grouping\\n\" +\n            \"         select h3.*,\\n\" +\n            \"                -- completely generic grouping based on param, either on time or records, depending what is given\\n\" +\n            \"                case\\n\" +\n            \"                    -- group by a given time in seconds\\n\" +\n            \"                    when :group_every_nth_second > 0 then (round(extract(epoch from measurement_date_start) / :group_every_nth_second))\\n\" +\n            \"                    -- group by max number of rows\\n\" +\n            \"                    when :maxRows > 0 then (ntile(:maxRows) over ( order by measurement_date_start )) -- avoid sub-query here, which destroys the over() window\\n\" +\n            \"                -- default grouping 1hr\\n\" +\n            \"                    else (round(extract(epoch from measurement_date_start) / 3600))\\n\" +\n            \"                    end as group_id\\n\" +\n            \"         from (\\n\" +\n            \"                  -- That select provides us the statistical values per run of the heatpump excluding the inital startup phase\\n\" +\n            \"                  select min(measurement_date)                                   measurement_date_start,\\n\" +\n            \"                         max(measurement_date)                                   measurement_date_end,\\n\" +\n            \"                         count(1)                                                number_of_probes,\\n\" +\n            \"                         di10compressor1,\\n\" +\n            \"                         round(cast(avg(sole_in) - avg(sole_out) as numeric), 1) sole_in_out_delta_in_operation_avg, -- most interesting column!\\n\" +\n            \"                         round(cast(avg(sole_in) as numeric), 1)                 sole_in_avg,\\n\" +\n            \"                         min(sole_in)                                            sole_in_min,\\n\" +\n            \"                         max(sole_in)                                            sole_in_max,\\n\" +"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/HeatPumpRepository.java. Directly output the source content.", "input": "", "output": "            \"                         round(cast(avg(sole_out) as numeric), 1)                sole_out_avg,\\n\" +\n            \"                         min(sole_out)                                           sole_out_min,\\n\" +\n            \"                         max(sole_out)                                           sole_in_max\\n\" +\n            \"                  from (\\n\" +\n            \"                           select h1.*,\\n\" +\n            \"                                  first_value(measurement_date) over (partition by seq_id order by measurement_date)                                                    compressor_start,\\n\" +\n            \"                                  first_value(measurement_date) over (partition by seq_id order by measurement_date desc)                                               compressor_end,\\n\" +\n            \"                                  extract('epoch' from (first_value(measurement_date) over (partition by seq_id order by measurement_date desc) -\\n\" +\n            \"                                                        first_value(measurement_date) over (partition by seq_id order by measurement_date)))                         as compressor_runtime_in_seconds,\\n\" +\n            \"                                  extract('epoch' from (measurement_date - first_value(measurement_date) over (partition by seq_id order by measurement_date)))      as seconds_since_toggle_on,\\n\" +\n            \"                                  extract('epoch' from (first_value(measurement_date) over (partition by seq_id order by measurement_date desc) - measurement_date)) as seconds_before_toggle_off\\n\" +\n            \"                           from (\\n\" +\n            \"                                    select id,\\n\" +\n            \"                                           measurement_date,\\n\" +\n            \"                                           di10compressor1,\\n\" +\n            \"                                           sole_in,\\n\" +\n            \"                                           sole_out,\\n\" +\n            \"                                           -- gaps and island problem https://towardsdatascience.com/gaps-and-islands-with-mysql-b407040d133d\\n\" +\n            \"                                           row_number() over ( order by measurement_date) - row_number() over (partition by di10compressor1 order by measurement_date) as seq_id\\n\" +\n            \"                                    from heat_pump\\n\" +\n            \"                                    where 1 = 1\\n\" +\n            \"                                      and measurement_date >= :measurement_date_start -- TO_TIMESTAMP( '2017-03-31 9:30:20', 'YYYY-MM-DD HH24:MI:SS')\\n\" +\n            \"                                      and measurement_date <= :measurement_date_end   -- TO_TIMESTAMP( '2030-03-31 9:30:20', 'YYYY-MM-DD HH24:MI:SS')\\n\" +\n            \"                                    order by measurement_date desc\\n\" +\n            \"                                ) h1\\n\" +\n            \"                           order by measurement_date desc\\n\" +\n            \"                       ) h2\\n\" +\n            \"                  where 1 = 1\\n\" +\n            \"                    -- only take readings after the compressor did run for a while, also, ignore the ones shortly before turning off\\n\" +\n            \"                    and di10compressor1 = true\\n\" +\n            \"                    and seconds_since_toggle_on > 180         -- exclude the startup phase while temperature still adjusts, only consider measurements after 3 min of compressor runtime\\n\" +\n            \"                    and seconds_before_toggle_off > 60\\n\" +\n            \"                    and seconds_since_toggle_on < 3600 * 23   -- runs almost 24h must be an error\\n\" +\n            \"                    and seconds_before_toggle_off < 3600 * 23 -- runs almost 24h must be an error\\n\" +\n            \"                  group by seq_id, di10compressor1\\n\" +"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/HeatPumpRepository.java. Directly output the source content.", "input": "", "output": "            \"                  order by measurement_date_start asc\\n\" +\n            \"              ) h3\\n\" +\n            \"     ) h4\\n\" +\n            \"group by group_id, di10compressor1\\n\" +\n            \"order by measurementDateStart\\n\", nativeQuery = true)\n    List<SoleInOutDeltaInOperationStats> getSoleDeltaInOperationStats(\n            @Param(value = \"measurement_date_start\") Date measurementDateStart,\n            @Param(value = \"measurement_date_end\") Date measurementDateEnd,\n            @Param(value = \"maxRows\") int maxRows,\n            @Param(value = \"group_every_nth_second\") int groupEveryNthSecond\n    );\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/SessionDeviceRepository.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.dao;\n\nimport com.x8ing.thsensor.thserver.db.entity.SessionDevice;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\nimport javax.persistence.Cacheable;\nimport java.util.Optional;\n\n@SuppressWarnings(\"SqlResolve\")\n@Repository\npublic interface SessionDeviceRepository extends CrudRepository<SessionDevice, String> {\n\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/SessionRequestRepository.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.dao;\n\nimport com.x8ing.thsensor.thserver.db.entity.SessionRequest;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@SuppressWarnings(\"SqlResolve\")\n@Repository\npublic interface SessionRequestRepository extends CrudRepository<SessionRequest, String> {\n\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/audit/AuditLogRepository.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.dao.audit;\n\nimport com.x8ing.thsensor.thserver.db.entity.audit.AuditLogEntity;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@SuppressWarnings(\"SqlResolve\")\n@Repository\npublic interface AuditLogRepository extends CrudRepository<AuditLogEntity, String> {\n\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/meteoswiss/MeteoSwissRepository.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.dao.meteoswiss;\n\nimport com.x8ing.thsensor.thserver.db.entity.HeatPumpEntity;\nimport com.x8ing.thsensor.thserver.db.entity.meteoswiss.MeteoSwissEntity;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@SuppressWarnings(\"SqlResolve\")\n@Repository\npublic interface MeteoSwissRepository extends CrudRepository<MeteoSwissEntity,String> {\n\n\n    @Query(value = \"select * from meteo_swiss ms where station_id=:stationId order by temperature_measure_date desc limit :maxRows\", nativeQuery = true)\n    List<MeteoSwissEntity> getLastEntries(String stationId, int maxRows);\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/meteoswiss/MeteoSwissStatsRepository.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.dao.meteoswiss;\n\nimport com.x8ing.thsensor.thserver.db.entity.meteoswiss.MeteoSwissEntity;\nimport com.x8ing.thsensor.thserver.db.entity.meteoswiss.MeteoSwissStatisticsEntity;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Date;\nimport java.util.List;\n\n@SuppressWarnings(\"SqlResolve\")\n@Repository\npublic interface MeteoSwissStatsRepository extends CrudRepository<MeteoSwissStatisticsEntity, String> {\n\n    @Query(value = \"select\\n\" +\n            \"\\t   max(id) id,\\n\" +\n            \"\\t   station_id,\\n\" +\n            \"\\t   max(station_name) station_name,\\n\" +\n            \"\\t   -- temperature\\n\" +\n            \"\\t   max(temperature_measure_date)  \\ttemperature_measure_date, \\n\" +\n            \"       min(temperature_measure_date)  \\ttemperature_measure_date_min,\\n\" +\n            \"       max(temperature_measure_date)    temperature_measure_date_max,\\n\" +\n            \"       avg(temperature)\\t\\t\\t\\t\\ttemperature, \\n\" +\n            \"       min(temperature)  \\t\\t\\t\\ttemperature_min,\\n\" +\n            \"       max(temperature)    \\t\\t\\t\\ttemperature_max,\\n\" +\n            \"       -- wind_gust\\n\" +\n            \"       max(wind_measure_date)  \\t\\t\\twind_measure_date, \\n\" +\n            \"       min(wind_measure_date)  \\t\\t\\twind_measure_date_min,\\n\" +\n            \"       max(wind_measure_date)    \\t\\twind_measure_date_max,\\n\" +\n            \"       avg(wind_gust_speed) \\t\\t\\twind_gust_speed, \\n\" +\n            \"       min(wind_gust_speed)  \\t\\t\\twind_gust_speed_min,\\n\" +\n            \"       max(wind_gust_speed)    \\t\\t\\twind_gust_speed_max\\n\" +\n            \"from (select ntile(:maxRows) over ( order by temperature_measure_date ) as grp, *\\n\" +\n            \"      from meteo_swiss t\\n\" +\n            \"      where t.temperature_measure_date > :measurement_date_start  -- TO_TIMESTAMP( '2017-03-31 9:30:20', 'YYYY-MM-DD HH24:MI:SS')\\n\" +\n            \"      and t.temperature_measure_date < :measurement_date_end) t\\n\" +\n            \"group by grp, station_id\\n\" +\n            \"order by temperature_measure_date desc\", nativeQuery = true)\n    List<MeteoSwissStatisticsEntity> findBetweenDatesLimitByRowsStats(\n            Date measurement_date_start,\n            Date measurement_date_end,\n            int maxRows);\n\n\n    @Query(value = \"select\\n\" +\n            \"\\t   max(id) id,\\n\" +\n            \"\\t   station_id,\\n\" +\n            \"\\t   max(station_name) station_name,\\n\" +\n            \"\\t   -- temperature\\n\" +\n            \"\\t   max(temperature_measure_date)  \\ttemperature_measure_date, \\n\" +\n            \"       min(temperature_measure_date)  \\ttemperature_measure_date_min,\\n\" +\n            \"       max(temperature_measure_date)    temperature_measure_date_max,\\n\" +\n            \"       avg(temperature)\\t\\t\\t\\t\\ttemperature, \\n\" +\n            \"       min(temperature)  \\t\\t\\t\\ttemperature_min,\\n\" +\n            \"       max(temperature)    \\t\\t\\t\\ttemperature_max,\\n\" +\n            \"       -- wind_gust\\n\" +\n            \"       max(wind_measure_date)  \\t\\t\\twind_measure_date, \\n\" +\n            \"       min(wind_measure_date)  \\t\\t\\twind_measure_date_min,\\n\" +\n            \"       max(wind_measure_date)    \\t\\twind_measure_date_max,\\n\" +\n            \"       avg(wind_gust_speed) \\t\\t\\twind_gust_speed, \\n\" +\n            \"       min(wind_gust_speed)  \\t\\t\\twind_gust_speed_min,\\n\" +\n            \"       max(wind_gust_speed)    \\t\\t\\twind_gust_speed_max\\n\" +\n            \"from\\n\" +\n            \"    (\\n\" +\n            \"    select\\n\" +\n            \"        -- have a generic grouping in seconds\\n\" +\n            \"        round(extract(epoch from temperature_measure_date) / :group_every_nth_second) groupid,\\n\" +\n            \"        t.*\\n\" +\n            \"    from\\n\" +\n            \"        meteo_swiss t\\n\" +\n            \"    where\\n\" +"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/dao/meteoswiss/MeteoSwissStatsRepository.java. Directly output the source content.", "input": "", "output": "            \"        t.temperature_measure_date > :measurement_date_start\\n\" +\n            \"        -- TO_TIMESTAMP( '2017-03-31 9:30:20', 'YYYY-MM-DD HH24:MI:SS')\\n\" +\n            \"        and t.temperature_measure_date < :measurement_date_end)\\n\" +\n            \"        q1\\n\" +\n            \"group by\\n\" +\n            \"    groupid, station_id \\n\" +\n            \"order by\\n\" +\n            \"    temperature_measure_date desc\", nativeQuery = true)\n    List<MeteoSwissStatisticsEntity> findBetweenDatesLimitByFixedIntervalStats(\n            Date measurement_date_start,\n            Date measurement_date_end,\n            @Param(\"group_every_nth_second\") int groupEveryNthSecond);\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/entity/HeatPumpEntity.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.entity;\n\nimport com.x8ing.thsensor.thserver.utils.UUIDUtils;\n\nimport javax.persistence.*;\nimport java.util.Date;\n\n@Entity(name = \"HEAT_PUMP\")\n@Table(indexes = {\n        @Index(name = \"HEAT_PUMP_IX_1\", columnList = \"measurementDate\"),\n})\npublic class HeatPumpEntity {\n\n    @Id\n    private String id = UUIDUtils.generateShortTextUUID();\n\n    private Date measurementDate = new Date();\n\n    private double boilerTemp;\n    private int compressorHours;\n    private double heatingIn;\n    private double heatingOut;\n    private double soleIn;\n    private double soleOut;\n\n    // additional input register, not yet certain what they are, but seem to be set\n    @Column(nullable = true)\n    private Double ireg50CircTemp;\n\n    @Column(nullable = true)\n    private Double ireg70TempCirc1;\n\n    @Column(nullable = true)\n    private Double ireg90TempCirc2;\n\n    /**\n     * Boiler Elektro-Einsatz Stunden\n     */\n    @Column(nullable = true)\n    private Double ireg152Boiler2;\n\n    @Column(nullable = true)\n    private Double ireg170TempPsp;\n\n    @Column(nullable = true)\n    private Double ireg300TempOutdoor; // outdoor temp, but seems wrong?\n\n    // additional discrete input, not yet certain what they are, but seem to be set\n    private Boolean di1Error;\n    private Boolean di10Compressor1;\n    private Boolean di11Compressor2;\n    private Boolean di12Valve4;\n    private Boolean di13;\n    private Boolean di14PumpDirect;\n    private Boolean di15PumpBoiler;\n    private Boolean di16We;\n    private Boolean di17BoilerEl;\n    private Boolean di18PoolPump;\n    private Boolean di19HeatPumpOn;\n    private Boolean di20Error;\n    private Boolean di21PumpPrimary;\n    private Boolean di22PumpLoad;\n    private Boolean di23PumpGroundWater;\n    private Boolean di30Compressor1Ready;\n    private Boolean di31Compressor2Ready;\n    private Boolean di70PumpHK1;\n    private Boolean di71HKM1ixOpen;\n    private Boolean di72HKM1ixClose;\n    private Boolean di90PumpHK2;\n    private Boolean di91HKM2ixOpen;\n    private Boolean di92HKM2ixClose;\n    private Boolean di150;\n    private Boolean di151;\n    private Boolean di152;\n    private Boolean di153;\n    private Boolean di154;\n\n\n    public HeatPumpEntity() {\n    }\n\n    @Override\n    public String toString() {\n        return \"TemperatureHumidityEntity{\" +\n                \"id='\" + id + '\\'' +\n                \", boilerTemp=\" + boilerTemp +\n                \", compressorHours=\" + compressorHours +\n                \", heatingIn=\" + heatingIn +\n                \", heatingOut=\" + heatingOut +\n                \", soleIn=\" + soleIn +\n                \", soleOut=\" + soleOut +\n                \", measurementDate=\" + measurementDate +\n                '}';\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        HeatPumpEntity that = (HeatPumpEntity) o;\n\n        return id != null ? id.equals(that.id) : that.id == null;\n    }\n\n    @Override\n    public int hashCode() {\n        return id != null ? id.hashCode() : 0;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public double getBoilerTemp() {\n        return boilerTemp;\n    }\n\n    public void setBoilerTemp(double boilerTemp) {\n        this.boilerTemp = boilerTemp;\n    }\n\n    public int getCompressorHours() {\n        return compressorHours;\n    }\n\n    public void setCompressorHours(int compressorHours) {\n        this.compressorHours = compressorHours;\n    }\n\n    public double getHeatingIn() {\n        return heatingIn;\n    }\n\n    public void setHeatingIn(double heatingIn) {\n        this.heatingIn = heatingIn;\n    }\n\n    public double getHeatingOut() {\n        return heatingOut;\n    }\n\n    public void setHeatingOut(double heatingOut) {\n        this.heatingOut = heatingOut;\n    }\n\n    public double getSoleIn() {\n        return soleIn;\n    }\n"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/entity/HeatPumpEntity.java. Directly output the source content.", "input": "", "output": "    public void setSoleIn(double soleIn) {\n        this.soleIn = soleIn;\n    }\n\n    public double getSoleOut() {\n        return soleOut;\n    }\n\n    public void setSoleOut(double soleOut) {\n        this.soleOut = soleOut;\n    }\n\n    public Date getMeasurementDate() {\n        return measurementDate;\n    }\n\n    public void setMeasurementDate(Date date) {\n        this.measurementDate = date;\n    }\n\n    public Double getIreg50CircTemp() {\n        return ireg50CircTemp;\n    }\n\n    public void setIreg50CircTemp(Double ireg50CircTemp) {\n        this.ireg50CircTemp = ireg50CircTemp;\n    }\n\n    public Double getIreg70TempCirc1() {\n        return ireg70TempCirc1;\n    }\n\n    public void setIreg70TempCirc1(Double ireg70TempCirc1) {\n        this.ireg70TempCirc1 = ireg70TempCirc1;\n    }\n\n    public Double getIreg90TempCirc2() {\n        return ireg90TempCirc2;\n    }\n\n    public void setIreg90TempCirc2(Double ireg90TempCirc2) {\n        this.ireg90TempCirc2 = ireg90TempCirc2;\n    }\n\n    public Double getIreg152Boiler2() {\n        return ireg152Boiler2;\n    }\n\n    public void setIreg152Boiler2(Double ireg152Boiler2) {\n        this.ireg152Boiler2 = ireg152Boiler2;\n    }\n\n    public Double getIreg170TempPsp() {\n        return ireg170TempPsp;\n    }\n\n    public void setIreg170TempPsp(Double ireg170TempPsp) {\n        this.ireg170TempPsp = ireg170TempPsp;\n    }\n\n    public Double getIreg300TempOutdoor() {\n        return ireg300TempOutdoor;\n    }\n\n    public void setIreg300TempOutdoor(Double ireg300TempOutdoor) {\n        this.ireg300TempOutdoor = ireg300TempOutdoor;\n    }\n\n    public Boolean isDi1Error() {\n        return di1Error;\n    }\n\n    public void setDi1Error(Boolean di1Error) {\n        this.di1Error = di1Error;\n    }\n\n    public Boolean isDi10Compressor1() {\n        return di10Compressor1;\n    }\n\n    public void setDi10Compressor1(Boolean di10Compressor1) {\n        this.di10Compressor1 = di10Compressor1;\n    }\n\n    public Boolean isDi11Compressor2() {\n        return di11Compressor2;\n    }\n\n    public void setDi11Compressor2(Boolean di11Compressor2) {\n        this.di11Compressor2 = di11Compressor2;\n    }\n\n    public Boolean isDi12Valve4() {\n        return di12Valve4;\n    }\n\n    public void setDi12Valve4(Boolean di12Valve4) {\n        this.di12Valve4 = di12Valve4;\n    }\n\n    public Boolean isDi13() {\n        return di13;\n    }\n\n    public void setDi13(Boolean di13) {\n        this.di13 = di13;\n    }\n\n    public Boolean isDi14PumpDirect() {\n        return di14PumpDirect;\n    }\n\n    public void setDi14PumpDirect(Boolean di14PumpDirect) {\n        this.di14PumpDirect = di14PumpDirect;\n    }\n\n    public Boolean isDi15PumpBoiler() {\n        return di15PumpBoiler;\n    }\n\n    public void setDi15PumpBoiler(Boolean di15PumpBoiler) {\n        this.di15PumpBoiler = di15PumpBoiler;\n    }\n\n    public Boolean isDi16We() {\n        return di16We;\n    }\n\n    public void setDi16We(Boolean di16We) {\n        this.di16We = di16We;\n    }\n\n    public Boolean isDi17BoilerEl() {\n        return di17BoilerEl;\n    }\n\n    public void setDi17BoilerEl(Boolean di17BoilerEl) {\n        this.di17BoilerEl = di17BoilerEl;\n    }\n\n    public Boolean isDi18PoolPump() {\n        return di18PoolPump;\n    }\n\n    public void setDi18PoolPump(Boolean di18PoolPump) {\n        this.di18PoolPump = di18PoolPump;\n    }\n\n    public Boolean isDi19HeatPumpOn() {\n        return di19HeatPumpOn;\n    }\n\n    public void setDi19HeatPumpOn(Boolean di19HeatPumpOn) {\n        this.di19HeatPumpOn = di19HeatPumpOn;\n    }\n\n    public Boolean isDi20Error() {\n        return di20Error;\n    }\n\n    public void setDi20Error(Boolean di20Error) {\n        this.di20Error = di20Error;\n    }\n\n    public Boolean isDi21PumpPrimary() {\n        return di21PumpPrimary;\n    }\n\n    public void setDi21PumpPrimary(Boolean di21PumpPrimary) {\n        this.di21PumpPrimary = di21PumpPrimary;\n    }\n\n    public Boolean isDi22PumpLoad() {\n        return di22PumpLoad;\n    }\n\n    public void setDi22PumpLoad(Boolean di22PumpLoad) {"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/entity/HeatPumpEntity.java. Directly output the source content.", "input": "", "output": "        this.di22PumpLoad = di22PumpLoad;\n    }\n\n    public Boolean isDi23PumpGroundWater() {\n        return di23PumpGroundWater;\n    }\n\n    public void setDi23PumpGroundWater(Boolean di23PumpGroundWater) {\n        this.di23PumpGroundWater = di23PumpGroundWater;\n    }\n\n    public Boolean isDi30Compressor1Ready() {\n        return di30Compressor1Ready;\n    }\n\n    public void setDi30Compressor1Ready(Boolean di30Compressor1Ready) {\n        this.di30Compressor1Ready = di30Compressor1Ready;\n    }\n\n    public Boolean isDi31Compressor2Ready() {\n        return di31Compressor2Ready;\n    }\n\n    public void setDi31Compressor2Ready(Boolean di31Compressor2Ready) {\n        this.di31Compressor2Ready = di31Compressor2Ready;\n    }\n\n    public Boolean isDi70PumpHK1() {\n        return di70PumpHK1;\n    }\n\n    public void setDi70PumpHK1(Boolean di70PumpHK1) {\n        this.di70PumpHK1 = di70PumpHK1;\n    }\n\n    public Boolean isDi71HKM1ixOpen() {\n        return di71HKM1ixOpen;\n    }\n\n    public void setDi71HKM1ixOpen(Boolean di71HKM1ixOpen) {\n        this.di71HKM1ixOpen = di71HKM1ixOpen;\n    }\n\n    public Boolean isDi72HKM1ixClose() {\n        return di72HKM1ixClose;\n    }\n\n    public void setDi72HKM1ixClose(Boolean di72HKM1ixClose) {\n        this.di72HKM1ixClose = di72HKM1ixClose;\n    }\n\n    public Boolean isDi90PumpHK2() {\n        return di90PumpHK2;\n    }\n\n    public void setDi90PumpHK2(Boolean di90PumpHK2) {\n        this.di90PumpHK2 = di90PumpHK2;\n    }\n\n    public Boolean isDi91HKM2ixOpen() {\n        return di91HKM2ixOpen;\n    }\n\n    public void setDi91HKM2ixOpen(Boolean di91HKM2ixOpen) {\n        this.di91HKM2ixOpen = di91HKM2ixOpen;\n    }\n\n    public Boolean isDi92HKM2ixClose() {\n        return di92HKM2ixClose;\n    }\n\n    public void setDi92HKM2ixClose(Boolean di92HKM2ixClose) {\n        this.di92HKM2ixClose = di92HKM2ixClose;\n    }\n\n    public Boolean isDi150() {\n        return di150;\n    }\n\n    public void setDi150(Boolean di150) {\n        this.di150 = di150;\n    }\n\n    public Boolean isDi151() {\n        return di151;\n    }\n\n    public void setDi151(Boolean di151) {\n        this.di151 = di151;\n    }\n\n    public Boolean isDi152() {\n        return di152;\n    }\n\n    public void setDi152(Boolean di152) {\n        this.di152 = di152;\n    }\n\n    public Boolean isDi153() {\n        return di153;\n    }\n\n    public void setDi153(Boolean di153) {\n        this.di153 = di153;\n    }\n\n    public Boolean isDi154() {\n        return di154;\n    }\n\n    public void setDi154(Boolean di154) {\n        this.di154 = di154;\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/entity/HeatPumpStatisticsEntity.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.entity;\n\nimport com.x8ing.thsensor.thserver.utils.UUIDUtils;\n\nimport java.util.Date;\n\npublic interface HeatPumpStatisticsEntity {\n\n    default String getId() {\n        return UUIDUtils.generateShortTextUUID();\n    }\n\n    Double getBoilerTemp();\n\n    Integer getCompressorHours();\n\n    Double getHeatingIn();\n\n    Double getHeatingOut();\n\n    Double getSoleIn();\n\n    Double getSoleOut();\n\n    Date getMeasurementDate();\n\n    Double getBoilerTempMin();\n\n    Double getBoilerTempMax();\n\n    Integer getCompressorHoursMin();\n\n    Integer getCompressorHoursMax();\n\n    Double getHeatingInMin();\n\n    Double getHeatingInMax();\n\n    Double getHeatingOutMin();\n\n    Double getHeatingOutMax();\n\n    Double getSoleInMin();\n\n    Double getSoleInMax();\n\n    Double getSoleOutMin();\n\n    Double getSoleOutMax();\n\n    Date getMeasurementDateMin();\n\n    Date getMeasurementDateMax();\n\n    Double getIreg300TempOutdoor();\n\n    Double getIreg300TempOutdoorMin();\n\n    Double getIreg300TempOutdoorMax();\n\n    Double getDi1Error();\n\n    Double getDi10Compressor1();\n\n    Double getDi14PumpDirect();\n\n    Double getDi15PumpBoiler();\n\n    Double getDi17BoilerEl();\n\n    Double getDi21PumpPrimary();\n\n    Double getDi22pumpLoad();\n\n    Double getDi70PumpHk1();\n\n    Double getDi71Hkm1ixOpen();\n\n    Double getDi72Hkm1ixClose();\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/entity/SessionDevice.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.entity;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Index;\nimport javax.persistence.Table;\nimport java.util.Date;\n\n@Entity(name = \"SESSION_DEVICE\")\n@Table(indexes = {\n        @Index(name = \"SESSION_DEVICE_IX_1\", columnList = \"sessionCreateDate\"),\n        @Index(name = \"SESSION_DEVICE_IX_2\", columnList = \"sessionId\"),\n        @Index(name = \"SESSION_DEVICE_IX_3\", columnList = \"clientId\"),\n})\npublic class SessionDevice {\n\n    @Id\n    private String sessionId;\n\n    private String clientId;\n\n    private Date sessionCreateDate = new Date();\n\n    private String agentString;\n\n    private String ip;\n\n    public String getSessionId() {\n        return sessionId;\n    }\n\n    public void setSessionId(String sessionId) {\n        this.sessionId = sessionId;\n    }\n\n    public Date getSessionCreateDate() {\n        return sessionCreateDate;\n    }\n\n    public void setSessionCreateDate(Date sessionCreateDate) {\n        this.sessionCreateDate = sessionCreateDate;\n    }\n\n    public String getAgentString() {\n        return agentString;\n    }\n\n    public void setAgentString(String agentString) {\n        this.agentString = agentString;\n    }\n\n    public String getIp() {\n        return ip;\n    }\n\n    public void setIp(String ip) {\n        this.ip = ip;\n    }\n\n    @Override\n    public String toString() {\n        return \"SessionDevice{\" +\n                \"sessionId='\" + sessionId + '\\'' +\n                \", agentString='\" + agentString + '\\'' +\n                \", clientId='\" + clientId + '\\'' +\n                \", ip='\" + ip + '\\'' +\n                '}';\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        SessionDevice that = (SessionDevice) o;\n\n        return sessionId != null ? sessionId.equals(that.sessionId) : that.sessionId == null;\n    }\n\n    @Override\n    public int hashCode() {\n        return sessionId != null ? sessionId.hashCode() : 0;\n    }\n\n    public String getClientId() {\n        return clientId;\n    }\n\n    public void setClientId(String clientSesssionId) {\n        this.clientId = clientSesssionId;\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/entity/SessionRequest.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.entity;\n\nimport com.x8ing.thsensor.thserver.utils.UUIDUtils;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Index;\nimport javax.persistence.Table;\nimport java.util.Date;\n\n@Entity(name = \"SESSION_REQUEST\")\n@Table(indexes = {\n        @Index(name = \"SESSION_REQUEST_IX_1\", columnList = \"requestDate\"),\n        @Index(name = \"SESSION_REQUEST_IX_2\", columnList = \"clientId\"),\n        @Index(name = \"SESSION_REQUEST_IX_3\", columnList = \"sessionId\"),\n})\npublic class SessionRequest {\n\n    @Id\n    private String id = UUIDUtils.generateShortTextUUID();\n\n    private String sessionId;\n\n    private String clientId;\n\n    private String clientVersion;\n\n    private Date requestDate = new Date();\n\n    private String path;\n\n    private String httpStatus;\n\n    private String exception;\n\n    private Long processingTime;\n\n    private String ip;\n\n    @Override\n    public String toString() {\n        return \"SessionRequest { \" +\n                \"processingTime=\" + processingTime +\n                \", id=\" + id +\n                \", sessionId='\" + sessionId + '\\'' +\n                \", clientId='\" + clientId + '\\'' +\n                \", httpStatus='\" + httpStatus + '\\'' +\n                \", ip='\" + ip + '\\'' +\n                \", path='\" + path + '\\'' +\n                '}';\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getSessionId() {\n        return sessionId;\n    }\n\n    public void setSessionId(String sessionId) {\n        this.sessionId = sessionId;\n    }\n\n    public Date getRequestDate() {\n        return requestDate;\n    }\n\n    public void setRequestDate(Date requestDate) {\n        this.requestDate = requestDate;\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    public void setPath(String path) {\n        this.path = path;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        SessionRequest that = (SessionRequest) o;\n\n        return id != null ? id.equals(that.id) : that.id == null;\n    }\n\n    @Override\n    public int hashCode() {\n        return id != null ? id.hashCode() : 0;\n    }\n\n    public String getClientId() {\n        return clientId;\n    }\n\n    public void setClientId(String clientSessionId) {\n        this.clientId = clientSessionId;\n    }\n\n    public String getClientVersion() {\n        return clientVersion;\n    }\n\n    public void setClientVersion(String clientVersion) {\n        this.clientVersion = clientVersion;\n    }\n\n    public String getHttpStatus() {\n        return httpStatus;\n    }\n\n    public void setHttpStatus(String httpStatus) {\n        this.httpStatus = httpStatus;\n    }\n\n    public Long getProcessingTime() {\n        return processingTime;\n    }\n\n    public void setProcessingTime(Long processingTime) {\n        this.processingTime = processingTime;\n    }\n\n    public String getIp() {\n        return ip;\n    }\n\n    public void setIp(String ip) {\n        this.ip = ip;\n    }\n\n    public String getException() {\n        return exception;\n    }\n\n    public void setException(String exception) {\n        this.exception = exception;\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/entity/analytics/BoilerStatsByDayOfWeek.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.entity.analytics;\n\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\n\n@JsonPropertyOrder({\"dayOfWeekStartingMonday\", \"dayOfWeekText\", \"sumBoilerDiffDecrease\", \"sumBoilerDiffIncrease\", \"numOfStatisticRecords1\"})\npublic interface BoilerStatsByDayOfWeek {\n\n    Integer getDayOfWeekStartingMonday();\n\n    String getDayOfWeekText();\n\n    Double getSumBoilerDiffDecrease();\n\n    Double getSumBoilerDiffIncrease();\n\n    Long getNumOfStatisticRecords1();\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/entity/analytics/BoilerStatsByHour.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.entity.analytics;\n\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\n\n@JsonPropertyOrder({\"hourOfTheDay\", \"sumBoilerDiffDecrease\", \"sumBoilerDiffIncrease\", \"numOfStatisticRecords1\"})\npublic interface BoilerStatsByHour {\n\n    Integer getHourOfTheDay();\n\n    Double getSumBoilerDiffDecrease();\n\n    Double getSumBoilerDiffIncrease();\n\n//    Double getMaxBoilerTemp();\n//\n//    Double getMinBoilerTemp();\n//\n//    Double getAvgBoilerTemp();\n\n    Long getNumOfStatisticRecords1();\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/entity/analytics/SoleInOutDeltaInOperationStats.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.entity.analytics;\n\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\n\nimport java.util.Date;\n\n@JsonPropertyOrder({\"measurementDateStart\", \"measurementDateEnd\", \"soleInOutDeltaInOperationAvg\", \"soleInOutDeltaInOperationMin\", \"soleInOutDeltaInOperationMax\", \"compressorState\", \"totalNumberOfProbesInSampleWindow\"})\npublic interface SoleInOutDeltaInOperationStats {\n\n    Date getMeasurementDateStart();\n\n    Date getMeasurementDateEnd();\n\n    Double getSoleInOutDeltaInOperationAvg();\n\n    Double getSoleInOutDeltaInOperationMin();\n\n    Double getSoleInOutDeltaInOperationMax();\n\n    Boolean getCompressorState();\n\n    Integer getTotalNumberOfProbesInSampleWindow();\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/entity/audit/AuditLogEntity.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.entity.audit;\n\nimport com.x8ing.thsensor.thserver.utils.UUIDUtils;\nimport org.hibernate.annotations.Type;\n\nimport javax.persistence.*;\nimport java.util.Date;\n\n@Entity(name = \"AUDIT_LOG_ENTITY\")\n@Table(indexes = {\n        @Index(name = \"AUDIT_LOG_IX_1\", columnList = \"createDate\"),\n})\npublic class AuditLogEntity {\n\n    @Id\n    private String id = UUIDUtils.generateShortTextUUID();\n\n    private Date createDate = new Date();\n\n    private String scope1;\n    private String scope2;\n    private String scope3;\n\n    @Lob\n    @Type(type = \"org.hibernate.type.TextType\")\n    private String message;\n\n    @Lob\n    @Type(type = \"org.hibernate.type.TextType\")\n    private String detail;\n\n    @Lob\n    @Type(type = \"org.hibernate.type.TextType\")\n    private String exception;\n\n    public AuditLogEntity() {\n    }\n\n    public AuditLogEntity(String scope1, String scope2, String scope3, String message, String detail, String exception) {\n        this.scope1 = scope1;\n        this.scope2 = scope2;\n        this.scope3 = scope3;\n        this.message = message;\n        this.detail = detail;\n        this.exception = exception;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        AuditLogEntity that = (AuditLogEntity) o;\n\n        return id != null ? id.equals(that.id) : that.id == null;\n    }\n\n    @Override\n    public int hashCode() {\n        return id != null ? id.hashCode() : 0;\n    }\n\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public Date getCreateDate() {\n        return createDate;\n    }\n\n    public void setCreateDate(Date createDate) {\n        this.createDate = createDate;\n    }\n\n    public String getScope1() {\n        return scope1;\n    }\n\n    public void setScope1(String scope1) {\n        this.scope1 = scope1;\n    }\n\n    public String getScope2() {\n        return scope2;\n    }\n\n    public void setScope2(String scope2) {\n        this.scope2 = scope2;\n    }\n\n    public String getScope3() {\n        return scope3;\n    }\n\n    public void setScope3(String scope3) {\n        this.scope3 = scope3;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public String getDetail() {\n        return detail;\n    }\n\n    public void setDetail(String detail) {\n        this.detail = detail;\n    }\n\n    public String getException() {\n        return exception;\n    }\n\n    public void setException(String exception) {\n        this.exception = exception;\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/entity/meteoswiss/MeteoSwissEntity.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.entity.meteoswiss;\n\nimport com.x8ing.thsensor.thserver.utils.UUIDUtils;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Index;\nimport javax.persistence.Table;\nimport java.util.Date;\n\n@Entity(name = \"METEO_SWISS\")\n@Table(indexes = {\n        @Index(name = \"METEO_SWISS_IX_1\", columnList = \"createDate\"),\n        @Index(name = \"METEO_SWISS_IX_2\", columnList = \"sunshineMeasureDate\"),\n        @Index(name = \"METEO_SWISS_IX_3\", columnList = \"temperatureMeasureDate\"),\n})\npublic class MeteoSwissEntity {\n\n    @Id\n    private String id = UUIDUtils.generateShortTextUUID();\n\n    private Date createDate = new Date();\n\n    private String stationId;\n    private String stationName;\n\n    /**\n     * percentage of the sunshine in the time period.\n     * Normally 10 min with Meteo\n     */\n    private double sunshine;\n    private Date sunshineMeasureDate;\n\n    private double temperature;\n    private Date temperatureMeasureDate;\n\n    private Double windGustSpeed;\n    private Double windDirection;\n    private Date  windMeasureDate;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        MeteoSwissEntity that = (MeteoSwissEntity) o;\n\n        return id != null ? id.equals(that.id) : that.id == null;\n    }\n\n    @Override\n    public int hashCode() {\n        return id != null ? id.hashCode() : 0;\n    }\n\n    @Override\n    public String toString() {\n        return \"MeteoSwissEntity{\" +\n                \"id='\" + id + '\\'' +\n                \", createDate=\" + createDate +\n                \", stationId='\" + stationId + '\\'' +\n                \", sunshine=\" + sunshine +\n                \", sunshineMeasureDate=\" + sunshineMeasureDate +\n                \", temperature=\" + temperature +\n                \", temperatureMeasureDate=\" + temperatureMeasureDate +\n                '}';\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public Date getCreateDate() {\n        return createDate;\n    }\n\n    public void setCreateDate(Date createDate) {\n        this.createDate = createDate;\n    }\n\n    public String getStationId() {\n        return stationId;\n    }\n\n    public void setStationId(String stationId) {\n        this.stationId = stationId;\n    }\n\n    public double getSunshine() {\n        return sunshine;\n    }\n\n    public void setSunshine(double sunshine) {\n        this.sunshine = sunshine;\n    }\n\n    public Date getSunshineMeasureDate() {\n        return sunshineMeasureDate;\n    }\n\n    public void setSunshineMeasureDate(Date sunshineMeasureDate) {\n        this.sunshineMeasureDate = sunshineMeasureDate;\n    }\n\n    public double getTemperature() {\n        return temperature;\n    }\n\n    public void setTemperature(double temperature) {\n        this.temperature = temperature;\n    }\n\n    public Date getTemperatureMeasureDate() {\n        return temperatureMeasureDate;\n    }\n\n    public void setTemperatureMeasureDate(Date temperatureMeasureDate) {\n        this.temperatureMeasureDate = temperatureMeasureDate;\n    }\n\n    public String getStationName() {\n        return stationName;\n    }\n\n    public void setStationName(String stationName) {\n        this.stationName = stationName;\n    }\n\n    public Double getWindGustSpeed() {\n        return windGustSpeed;\n    }\n\n    public void setWindGustSpeed(Double windGustSpeed) {\n        this.windGustSpeed = windGustSpeed;\n    }\n\n    public Double getWindDirection() {\n        return windDirection;\n    }\n\n    public void setWindDirection(Double windDirection) {\n        this.windDirection = windDirection;\n    }\n\n    public Date getWindMeasureDate() {\n        return windMeasureDate;\n    }\n\n    public void setWindMeasureDate(Date windMeasureDate) {\n        this.windMeasureDate = windMeasureDate;\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/db/entity/meteoswiss/MeteoSwissStatisticsEntity.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.db.entity.meteoswiss;\n\nimport com.x8ing.thsensor.thserver.utils.UUIDUtils;\nimport org.hibernate.annotations.Immutable;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport java.util.Date;\n\n@Entity\n@Immutable\npublic class MeteoSwissStatisticsEntity {\n\n    @Id\n    private String id = UUIDUtils.generateShortTextUUID();\n\n    private String stationId;\n    private String stationName;\n\n    private Double temperature;\n    private Double temperatureMin;\n    private Double temperatureMax;\n\n    private Date temperatureMeasureDate;\n    private Date temperatureMeasureDateMin;\n    private Date temperatureMeasureDateMax;\n\n    private Double windGustSpeed;\n    private Double windGustSpeedMin;\n    private Double windGustSpeedMax;\n\n    private Date  windMeasureDate;\n    private Date  windMeasureDateMin;\n    private Date  windMeasureDateMax;\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getStationId() {\n        return stationId;\n    }\n\n    public void setStationId(String stationId) {\n        this.stationId = stationId;\n    }\n\n    public String getStationName() {\n        return stationName;\n    }\n\n    public void setStationName(String stationName) {\n        this.stationName = stationName;\n    }\n\n    public Double getTemperature() {\n        return temperature;\n    }\n\n    public void setTemperature(Double temperature) {\n        this.temperature = temperature;\n    }\n\n    public Double getTemperatureMin() {\n        return temperatureMin;\n    }\n\n    public void setTemperatureMin(Double temperatureMin) {\n        this.temperatureMin = temperatureMin;\n    }\n\n    public Double getTemperatureMax() {\n        return temperatureMax;\n    }\n\n    public void setTemperatureMax(Double temperatureMax) {\n        this.temperatureMax = temperatureMax;\n    }\n\n    public Date getTemperatureMeasureDate() {\n        return temperatureMeasureDate;\n    }\n\n    public void setTemperatureMeasureDate(Date temperatureMeasureDate) {\n        this.temperatureMeasureDate = temperatureMeasureDate;\n    }\n\n    public Date getTemperatureMeasureDateMin() {\n        return temperatureMeasureDateMin;\n    }\n\n    public void setTemperatureMeasureDateMin(Date temperatureMeasureDateMin) {\n        this.temperatureMeasureDateMin = temperatureMeasureDateMin;\n    }\n\n    public Date getTemperatureMeasureDateMax() {\n        return temperatureMeasureDateMax;\n    }\n\n    public void setTemperatureMeasureDateMax(Date temperatureMeasureDateMax) {\n        this.temperatureMeasureDateMax = temperatureMeasureDateMax;\n    }\n\n    public Double getWindGustSpeed() {\n        return windGustSpeed;\n    }\n\n    public void setWindGustSpeed(Double windGustSpeed) {\n        this.windGustSpeed = windGustSpeed;\n    }\n\n    public Double getWindGustSpeedMin() {\n        return windGustSpeedMin;\n    }\n\n    public void setWindGustSpeedMin(Double windGustSpeedMin) {\n        this.windGustSpeedMin = windGustSpeedMin;\n    }\n\n    public Double getWindGustSpeedMax() {\n        return windGustSpeedMax;\n    }\n\n    public void setWindGustSpeedMax(Double windGustSpeedMax) {\n        this.windGustSpeedMax = windGustSpeedMax;\n    }\n\n    public Date getWindMeasureDate() {\n        return windMeasureDate;\n    }\n\n    public void setWindMeasureDate(Date windMeasureDate) {\n        this.windMeasureDate = windMeasureDate;\n    }\n\n    public Date getWindMeasureDateMin() {\n        return windMeasureDateMin;\n    }\n\n    public void setWindMeasureDateMin(Date windMeasureDateMin) {\n        this.windMeasureDateMin = windMeasureDateMin;\n    }\n\n    public Date getWindMeasureDateMax() {\n        return windMeasureDateMax;\n    }\n\n    public void setWindMeasureDateMax(Date windMeasureDateMax) {\n        this.windMeasureDateMax = windMeasureDateMax;\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/device/service/HeatingDataPoller.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.device.service;\n\nimport com.x8ing.thsensor.thserver.db.dao.HeatPumpRepository;\nimport com.x8ing.thsensor.thserver.db.entity.HeatPumpEntity;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class HeatingDataPoller {\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n\n    private final HeatingDataReadService heatingDataReadService;\n\n    private final HeatPumpRepository heatPumpRepository;\n\n    public HeatingDataPoller(HeatingDataReadService heatingDataReadService, HeatPumpRepository heatPumpRepository) {\n        this.heatingDataReadService = heatingDataReadService;\n        this.heatPumpRepository = heatPumpRepository;\n    }\n\n    @Scheduled(fixedDelayString = \"${thserver.pollingInterval:PT60s}\", initialDelay = 0)\n    public void pollData() {\n\n        long t0 = System.currentTimeMillis();\n\n        HeatPumpEntity heatPumpEntity;\n        try {\n            heatPumpEntity = heatingDataReadService.getData();\n        } catch (Throwable e) {\n            String msg = \"Exception while reading data from ModBus or MockService.\";\n            log.error(msg, e);\n            throw new RuntimeException(msg, e);\n        }\n\n        heatPumpRepository.save(heatPumpEntity);\n\n        log.info(\"Did poll data and persisted it successfully. dt=\" + (System.currentTimeMillis() - t0));\n\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/device/service/HeatingDataReadService.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.device.service;\n\nimport com.x8ing.thsensor.thserver.db.entity.HeatPumpEntity;\n\nimport java.util.List;\n\npublic interface HeatingDataReadService {\n\n\n    void init() throws Exception;\n\n    HeatPumpEntity getData() throws Throwable;\n\n    List<String> scanAllRegisters(int maxRegister);\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/device/service/impl/HeatingDataReadServiceMock.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.device.service.impl;\n\nimport com.x8ing.thsensor.thserver.Profiles;\nimport com.x8ing.thsensor.thserver.db.entity.HeatPumpEntity;\nimport com.x8ing.thsensor.thserver.device.service.HeatingDataReadService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n\n@Component\n@Profile(Profiles.SENSOR_MOCK)\npublic class HeatingDataReadServiceMock implements HeatingDataReadService {\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n    private final long t0 = System.currentTimeMillis() - 1;\n\n\n    @Override\n    public void init() throws Exception {\n\n    }\n\n    @Override\n    public HeatPumpEntity getData() throws Exception {\n        @SuppressWarnings(\"IntegerDivisionInFloatingPointContext\")\n        double dtS = (System.currentTimeMillis() - t0) / 1000;\n\n        HeatPumpEntity ret = new HeatPumpEntity();\n        ret.setHeatingIn(dtS / 30 + 20);\n        ret.setHeatingOut(dtS / 30 + 30);\n        ret.setSoleIn(dtS / 30 + 10);\n        ret.setSoleOut(dtS / 30 + 5);\n        ret.setBoilerTemp(dtS / 30 + 30);\n        ret.setCompressorHours((int) (dtS + 100));\n        ret.setIreg300TempOutdoor(dtS / 10 - 12);\n        log.info(\"Return \" + ret);\n        return ret;\n    }\n\n    @Override\n    public List<String> scanAllRegisters(int maxRegister) {\n        return List.of(\"Not implemented\");\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/device/service/impl/HeatingModbusReadService.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.device.service.impl;\n\nimport com.intelligt.modbus.jlibmodbus.Modbus;\nimport com.intelligt.modbus.jlibmodbus.master.ModbusMaster;\nimport com.intelligt.modbus.jlibmodbus.master.ModbusMasterFactory;\nimport com.intelligt.modbus.jlibmodbus.tcp.TcpParameters;\nimport com.x8ing.thsensor.thserver.Profiles;\nimport com.x8ing.thsensor.thserver.db.entity.HeatPumpEntity;\nimport com.x8ing.thsensor.thserver.device.service.HeatingDataReadService;\nimport com.x8ing.thsensor.thserver.utils.mutex.GlobalSynced;\nimport com.x8ing.thsensor.thserver.utils.mutex.Hooks;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport java.net.InetAddress;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicInteger;\n\n/**\n *\n */\n@Component\n@Profile(\"!\" + Profiles.SENSOR_MOCK)\npublic class HeatingModbusReadService implements HeatingDataReadService {\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n    // SlaveID is between 1-255 and should be unique\n    // https://www.modbustools.com/mbslave-user-manual.html#_slave_id\n    private static final AtomicInteger slaveIdGlobal = new AtomicInteger(new Random().nextInt(128));\n\n    // 169.254.92.80\n    @Value(\"${thserver.heatPumpIP}\")\n    private String heatPumpIP;\n\n    private GlobalSynced<ModbusMaster> modbusMasterSynced = null;\n\n    private int slaveId;\n\n    private final Hooks<ModbusMaster> modBusMasterHooks = new Hooks<>() {\n        @Override\n        public void before(ModbusMaster modbusMaster) throws Throwable {\n            // since 1.2.8\n            if (!modbusMaster.isConnected()) {\n                modbusMaster.connect();\n            }\n        }\n\n        @Override\n        public void after(ModbusMaster modbusMaster) throws Throwable {\n            modbusMaster.disconnect();\n        }\n    };\n\n    @Override\n    @PostConstruct\n    public void init() throws Exception {\n        log.info(\"Init \" + this.getClass().getSimpleName());\n\n        TcpParameters tcpParameters = new TcpParameters();\n\n        //tcp parameters have already set by default as in example\n        tcpParameters.setHost(InetAddress.getByName(heatPumpIP));\n        tcpParameters.setKeepAlive(true);\n        tcpParameters.setPort(Modbus.TCP_PORT);\n\n        //if you would like to set connection parameters separately,\n        // you should use another method: createModbusMasterTCP(String host, int port, boolean keepAlive);\n        ModbusMaster m = ModbusMasterFactory.createModbusMasterTCP(tcpParameters);\n        Modbus.setAutoIncrementTransactionId(true);\n\n        slaveId = slaveIdGlobal.incrementAndGet();\n\n        modbusMasterSynced = new GlobalSynced<>(m, modBusMasterHooks);\n    }\n\n    @Override\n    public HeatPumpEntity getData() throws Throwable {\n\n        log.debug(\"Start read data from ModBus\");\n        long t0 = System.currentTimeMillis();\n\n        HeatPumpEntity ret = new HeatPumpEntity();\n\n        modbusMasterSynced.requestOperation((modbusMaster) -> {\n\n            // read base registers. certain what they do\n            ret.setCompressorHours(modbusMaster.readInputRegisters(slaveId, 41, 1)[0]);\n\n            // read temperature values (certain ones)\n            ret.setHeatingOut(readInputRegister(modbusMaster, 10, true, 10));\n            ret.setHeatingIn(readInputRegister(modbusMaster, 11, true, 10));\n            ret.setSoleIn(readInputRegister(modbusMaster, 12, true, 10));\n            ret.setSoleOut(readInputRegister(modbusMaster, 13, true, 10));\n            ret.setBoilerTemp(readInputRegister(modbusMaster, 150, true, 10));\n\n            // read additional input registers, not yet fully clear what they do\n            ret.setIreg50CircTemp(readInputRegister(modbusMaster, 50, true, 10));  // gots data, uncertain what"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/device/service/impl/HeatingModbusReadService.java. Directly output the source content.", "input": "", "output": "            ret.setIreg90TempCirc2(readInputRegister(modbusMaster, 90, true, 10)); // seems to be constant 9999\n            ret.setIreg152Boiler2(readInputRegister(modbusMaster, 152, true, 1)); // Boiler Elektro-Einsatz Stunden\n            ret.setIreg170TempPsp(readInputRegister(modbusMaster, 170, true, 10)); // gots data, uncertain what\n            ret.setIreg300TempOutdoor(readInputRegister(modbusMaster, 300, true, 10)); // outdoor temp\n\n            // read additional discrete inputs, not yet fully clear what they do\n            ret.setDi1Error(modbusMaster.readDiscreteInputs(slaveId, 1, 1)[0]);\n            ret.setDi10Compressor1(modbusMaster.readDiscreteInputs(slaveId, 10, 1)[0]); // used in regular operation\n            ret.setDi11Compressor2(modbusMaster.readDiscreteInputs(slaveId, 11, 1)[0]);\n            ret.setDi12Valve4(modbusMaster.readDiscreteInputs(slaveId, 12, 1)[0]);\n            ret.setDi13(modbusMaster.readDiscreteInputs(slaveId, 13, 1)[0]);\n            ret.setDi14PumpDirect(modbusMaster.readDiscreteInputs(slaveId, 14, 1)[0]); // used in regular operation\n            ret.setDi15PumpBoiler(modbusMaster.readDiscreteInputs(slaveId, 15, 1)[0]); // used in regular operation\n            ret.setDi16We(modbusMaster.readDiscreteInputs(slaveId, 16, 1)[0]);\n            ret.setDi17BoilerEl(modbusMaster.readDiscreteInputs(slaveId, 17, 1)[0]);\n            ret.setDi18PoolPump(modbusMaster.readDiscreteInputs(slaveId, 18, 1)[0]);\n            ret.setDi19HeatPumpOn(modbusMaster.readDiscreteInputs(slaveId, 19, 1)[0]);\n            ret.setDi20Error(modbusMaster.readDiscreteInputs(slaveId, 20, 1)[0]);\n            ret.setDi21PumpPrimary(modbusMaster.readDiscreteInputs(slaveId, 21, 1)[0]); // used in regular operation\n            ret.setDi22PumpLoad(modbusMaster.readDiscreteInputs(slaveId, 22, 1)[0]); // used in regular operation\n            ret.setDi30Compressor1Ready(modbusMaster.readDiscreteInputs(slaveId, 30, 1)[0]);\n            ret.setDi31Compressor2Ready(modbusMaster.readDiscreteInputs(slaveId, 31, 1)[0]);\n            ret.setDi70PumpHK1(modbusMaster.readDiscreteInputs(slaveId, 70, 1)[0]); // used in regular operation\n            ret.setDi71HKM1ixOpen(modbusMaster.readDiscreteInputs(slaveId, 71, 1)[0]); // used in regular operation\n            ret.setDi72HKM1ixClose(modbusMaster.readDiscreteInputs(slaveId, 72, 1)[0]); // used in regular operation\n            ret.setDi90PumpHK2(modbusMaster.readDiscreteInputs(slaveId, 90, 1)[0]);\n            ret.setDi91HKM2ixOpen(modbusMaster.readDiscreteInputs(slaveId, 91, 1)[0]);\n            ret.setDi92HKM2ixClose(modbusMaster.readDiscreteInputs(slaveId, 92, 1)[0]);\n            ret.setDi150(modbusMaster.readDiscreteInputs(slaveId, 150, 1)[0]);\n            ret.setDi151(modbusMaster.readDiscreteInputs(slaveId, 151, 1)[0]);\n            ret.setDi152(modbusMaster.readDiscreteInputs(slaveId, 152, 1)[0]);\n            ret.setDi153(modbusMaster.readDiscreteInputs(slaveId, 153, 1)[0]);\n            ret.setDi154(modbusMaster.readDiscreteInputs(slaveId, 154, 1)[0]);\n\n        });\n\n        long dt = System.currentTimeMillis() - t0;\n        log.info(\"Completed reading modbus data in dt=\" + dt + \", \" + ret);\n\n        return ret;\n\n    }\n\n    /**\n     * Pretty inefficient. Should read out multiple registers, but, was lazy. It seems to work ok too.\n     */\n    @Override\n    public List<String> scanAllRegisters(int maxRegister) {\n        long t0 = System.currentTimeMillis();\n        List<String> res = new ArrayList<>();\n        final String SEP = \"================================================================================\";\n\n\n        modbusMasterSynced.requestOperation(modbusMaster -> {\n\n            res.add(\"Scan start time: \" + new Date());\n            res.add(\"maxRegister: \" + maxRegister);\n\n            // read input registers\n            res.add(SEP);\n            res.add(\"InputRegister\");\n            for (int inputRegister = 0; inputRegister <= maxRegister; inputRegister++) {"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/device/service/impl/HeatingModbusReadService.java. Directly output the source content.", "input": "", "output": "                int[] values = modbusMaster.readInputRegisters(slaveId, inputRegister, 1);\n                String val = Arrays.toString(values);\n                if (!StringUtils.equals(\"[0]\", val)) {\n                    res.add(inputRegister + \": \" + val);\n                }\n            }\n\n            //\n            res.add(SEP);\n            res.add(\"Holding Register\");\n            for (int inputRegister = 0; inputRegister < maxRegister; inputRegister++) {\n                int[] values = modbusMaster.readHoldingRegisters(slaveId, inputRegister, 1);\n                String val = Arrays.toString(values);\n                if (!StringUtils.equals(\"[0]\", val)) {\n                    res.add(inputRegister + \": \" + val);\n                }\n            }\n\n            res.add(SEP);\n            res.add(\"Discrete Input\");\n            for (int inputRegister = 0; inputRegister < maxRegister; inputRegister++) {\n                boolean[] values = modbusMaster.readDiscreteInputs(slaveId, inputRegister, 1);\n                String val = Arrays.toString(values);\n                if (!StringUtils.equals(\"[false, false, false, false, false, false, false, false]\", val)) {\n                    res.add(inputRegister + \": \" + val);\n                }\n            }\n\n        });\n\n        long dt = System.currentTimeMillis() - t0;\n\n        res.add(SEP);\n        res.add(\"Scanning time \" + dt + \"ms\");\n\n\n        return res;\n\n    }\n\n    protected double readInputRegister(ModbusMaster modbusMaster, int address, boolean signed, int scale) throws Exception {\n\n        int vInt = modbusMaster.readInputRegisters(slaveId, address, 1)[0];\n\n        double vDouble = vInt;\n        if (signed) {\n            vDouble = getSignedNumber(vInt);\n        }\n        return vDouble / scale;\n    }\n\n    /**\n     * https://minimalmodbus.readthedocs.io/en/stable/modbusdetails.html#:~:text=Negative%20numbers%20(INT16%20%3D%20short),%2D32768%20to%20%2D1).\n     * <p>\n     * Negative numbers (INT16 = short)\n     * Some manufacturers allow negative values for some registers. Instead of an allowed integer range 0-65535,\n     * a range -32768 to 32767 is allowed. This is implemented as any received value in the upper range (32768-65535)\n     * is interpreted as negative value (in the range -32768 to -1).\n     * <p>\n     * This is two\u2019s complement and is described at https://en.wikipedia.org/wiki/Two%27s_complement.\n     * Help functions to calculate the two\u2019s complement value (and back) are provided in MinimalModbus.\n     */\n    protected static int getSignedNumber(int v) {\n        if (v >= 32768) {\n            // negative number\n            return v - 65535 - 1;\n        } else {\n            // normal number\n            return v;\n        }\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/Base58BitcoinFlavor.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils;\n\n/*\n * Copyright 2011 Google Inc.\n * Copyright 2018 Andreas Schildbach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport java.math.BigInteger;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Arrays;\n\n/**\n * This is a way to represent bytes as simple characters without having any special characters.\n * <p>\n * This mechanism is also used for Bitcoin addresses. It's similar but not the same as Flickr uses for short urls.\n */\npublic class Base58BitcoinFlavor {\n\n    public static final char[] ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\".toCharArray();\n\n    private static final char ENCODED_ZERO = ALPHABET[0];\n\n    private static final int[] INDEXES = new int[128];\n\n    static {\n        Arrays.fill(INDEXES, -1);\n        for (int i = 0; i < ALPHABET.length; i++) {\n            INDEXES[ALPHABET[i]] = i;\n        }\n    }\n\n    /**\n     * Encodes the given bytes as a base58 string (no checksum is appended).\n     *\n     * @param input the bytes to encode\n     * @return the base58-encoded string\n     */\n    public static String encode(byte[] input) {\n        if (input.length == 0) {\n            return \"\";\n        }\n        // Count leading zeros.\n        int zeros = 0;\n        while (zeros < input.length && input[zeros] == 0) {\n            ++zeros;\n        }\n        // Convert base-256 digits to base-58 digits (plus conversion to ASCII characters)\n        input = Arrays.copyOf(input, input.length); // since we modify it in-place\n        char[] encoded = new char[input.length * 2]; // upper bound\n        int outputStart = encoded.length;\n        for (int inputStart = zeros; inputStart < input.length; ) {\n            encoded[--outputStart] = ALPHABET[divmod(input, inputStart, 256, 58)];\n            if (input[inputStart] == 0) {\n                ++inputStart; // optimization - skip leading zeros\n            }\n        }\n        // Preserve exactly as many leading encoded zeros in output as there were leading zeros in input.\n        while (outputStart < encoded.length && encoded[outputStart] == ENCODED_ZERO) {\n            ++outputStart;\n        }\n        while (--zeros >= 0) {\n            encoded[--outputStart] = ENCODED_ZERO;\n        }\n        // Return encoded string (including encoded leading zeros).\n        return new String(encoded, outputStart, encoded.length - outputStart);\n    }\n\n\n    /**\n     * Decodes the given base58 string into the original data bytes.\n     */\n    public static byte[] decode(String input) {\n        if (input.length() == 0) {\n            return new byte[0];\n        }\n        // Convert the base58-encoded ASCII chars to a base58 byte sequence (base58 digits).\n        byte[] input58 = new byte[input.length()];\n        for (int i = 0; i < input.length(); ++i) {\n            char c = input.charAt(i);\n            int digit = c < 128 ? INDEXES[c] : -1;\n            if (digit < 0) {\n                throw new RuntimeException(\"InvalidCharacter\" + c + \",\" + i);\n            }\n            input58[i] = (byte) digit;\n        }\n        // Count leading zeros.\n        int zeros = 0;\n        while (zeros < input58.length && input58[zeros] == 0) {\n            ++zeros;\n        }\n        // Convert base-58 digits to base-256 digits.\n        byte[] decoded = new byte[input.length()];\n        int outputStart = decoded.length;\n        for (int inputStart = zeros; inputStart < input58.length; ) {"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/Base58BitcoinFlavor.java. Directly output the source content.", "input": "", "output": "            decoded[--outputStart] = divmod(input58, inputStart, 58, 256);\n            if (input58[inputStart] == 0) {\n                ++inputStart; // optimization - skip leading zeros\n            }\n        }\n        // Ignore extra leading zeroes that were added during the calculation.\n        while (outputStart < decoded.length && decoded[outputStart] == 0) {\n            ++outputStart;\n        }\n        // Return decoded data (including original number of leading zeros).\n        return Arrays.copyOfRange(decoded, outputStart - zeros, decoded.length);\n    }\n\n    /**\n     * This method will encode a unicode text to a string which contains only alphabetic characters.\n     * <p>\n     * This method is even more \"safe\" then Base64 where you may end up with characters like the equal sign \"=\".\n     * <p>\n     * Use {@link #decodeBase58ToUnicodeString(String)} to decode the String afterwards.\n     */\n    public static String encodeUnicodeStringToBase58String(String unicodeText) {\n        if (unicodeText == null) {\n            return null;\n        }\n        return encode(unicodeText.getBytes(StandardCharsets.UTF_8));\n    }\n\n    /**\n     * This method decodes a string of plain alphanumeric characters which was produced before by {@link #encodeUnicodeStringToBase58String(String)}\n     */\n    public static String decodeBase58ToUnicodeString(String base58Text) {\n        if (base58Text == null) {\n            return null;\n        }\n        byte bytes[] = decode(base58Text);\n        return new String(bytes, StandardCharsets.UTF_8);\n    }\n\n    public static BigInteger decodeToBigInteger(String input) {\n        return new BigInteger(1, decode(input));\n    }\n\n\n    /**\n     * Divides a number, represented as an array of bytes each containing a single digit\n     * in the specified base, by the given divisor. The given number is modified in-place\n     * to contain the quotient, and the return value is the remainder.\n     *\n     * @param number     the number to divide\n     * @param firstDigit the index within the array of the first non-zero digit\n     *                   (this is used for optimization by skipping the leading zeros)\n     * @param base       the base in which the number's digits are represented (up to 256)\n     * @param divisor    the number to divide by (up to 256)\n     * @return the remainder of the division operation\n     */\n    private static byte divmod(byte[] number, int firstDigit, int base, int divisor) {\n        // this is just long division which accounts for the base of the input digits\n        int remainder = 0;\n        for (int i = firstDigit; i < number.length; i++) {\n            int digit = (int) number[i] & 0xFF;\n            int temp = remainder * base + digit;\n            number[i] = (byte) (temp / divisor);\n            remainder = temp % divisor;\n        }\n        return (byte) remainder;\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/BeanUtils.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils;\n\nimport org.springframework.beans.factory.config.AutowireCapableBeanFactory;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class BeanUtils {\n\n    private final AutowireCapableBeanFactory beanFactory;\n\n    public BeanUtils(AutowireCapableBeanFactory beanFactory) {\n        this.beanFactory = beanFactory;\n    }\n\n    public void autoWire(Object bean) {\n        beanFactory.autowireBean(bean);\n    }\n\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/MailSend.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n\nimport javax.mail.*;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\nimport java.time.LocalDateTime;\nimport java.util.Properties;\n\n@Service\npublic class MailSend {\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n    @Value(\"${thserver.mail.sender}\")\n    private String mailSender = \"patrick.heusser.raspberry@gmail.com\";\n    // private String mailSender = \"raspberry@x8ing.com\";\n\n    @Value(\"${thserver.mail.password}\")\n    private String mailPassword;\n\n    @Value(\"${thserver.mail.receivers}\")\n    private String receiverMailsDefault;\n\n\n    public void init() {\n\n    }\n\n    public String send(String subject, String content) {\n        return send(subject, content, receiverMailsDefault);\n    }\n\n    public String send(String subject, String content, String receiverMails) {\n\n        if (StringUtils.isEmpty(mailSender) || StringUtils.isEmpty(mailPassword) || StringUtils.isEmpty(receiverMails)) {\n            String msg = \"Did not send email, as the configuration was invalid or no receiver was given.\";\n            log.error(msg);\n            throw new ThException(msg);\n        }\n\n        Properties prop = new Properties();\n        // Sending email from gmail\n        // String host = \"mail.your-server.de\";\n        String host = \"smtp.gmail.com\";\n\n        // Port of SMTP\n        String port = \"587\";\n\n        prop.put(\"mail.smtp.socketFactory.port\", port);\n        prop.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\");\n        prop.put(\"mail.smtp.auth\", \"true\");\n        prop.put(\"mail.smtp.host\", host);\n        prop.put(\"mail.smtp.port\", port);\n        prop.put(\"mail.smtp.starttls.enable\", \"true\"); //TLS\n\n        Session session = Session.getInstance(prop, new Authenticator() {\n            @Override\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(mailSender, mailPassword);\n            }\n        });\n\n        try {\n\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(mailSender));\n            message.addRecipients(Message.RecipientType.TO, InternetAddress.parse(receiverMails, true));\n            message.setSubject(subject);\n            message.setText(content);\n\n            Transport.send(message);\n\n            log.info(\"Sent mail to=\" + receiverMails + \" subject=\" + subject + \" content=\" + content);\n\n        } catch (MessagingException e0) {\n            RuntimeException e1 = new RuntimeException(\"Could not send email to \" + receiverMails, e0);\n            log.error(\"Email not sent\", e1);\n            throw e1;\n        }\n\n        return \"Email sent with success\";\n\n    }\n\n    public static void main(String[] args) throws Exception {\n        new MailSend().send(\"Raspi-Test\", LocalDateTime.now().toString(), \"patrick.heusser@gmail.com, patrick.heusser.raspberry@gmail.com\");\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/Physics.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils;\n\npublic class Physics {\n\n    /**\n     * https://carnotcycle.wordpress.com/2012/08/04/how-to-convert-relative-humidity-to-absolute-humidity/\n     * <p>\n     * This formula is accurate to within 0.1% over the temperature range \u201330\u00b0C to +35\u00b0C\n     *\n     * @return Absolute Humidity (grams/m3)\n     */\n    public static final double calculateAbsoluteHumidityApproximation(double temperature, double relativeHumidity) {\n        return (6.112 * Math.exp((17.67 * temperature) / (temperature + 243.5)) * relativeHumidity * 2.1674) / ((273.15 + temperature));\n    }\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/ThException.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils;\n\npublic class ThException extends RuntimeException {\n\n    public ThException(String message) {\n        super(message);\n    }\n\n    public ThException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/UUIDUtils.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils;\n\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.nio.ByteBuffer;\nimport java.util.UUID;\n\n/**\n * This utility helps to convert UUID to a short textual representation or it parses it.\n * <p>\n * The benefits of having a short text are:\n * <p>\n * - It's shorter. A UUID hex representation with dashes takes 36 characters. e.g. 16d3089d-a817-4781-a2fc-21872f14ae40.\n * A short form is only 22 characters (fixed length): 3pUG3KBLoHic514hV79vF1\n * <p>\n * - The short text has only \"safe\" characters, no control characters or any other special characters (e.g. quotes, asterix, etc).\n * - The short text avoids similar looking characters like I and 1.\n */\npublic class UUIDUtils {\n\n    final static int EXPECTED_FIXED_SIZE = 22;\n\n\n    public static String toShortText(UUID uuid) {\n\n        if (uuid == null) {\n            return \"\";\n        }\n\n        byte[] bytes = ByteBuffer.allocate(16).putLong(uuid.getMostSignificantBits()).putLong(uuid.getLeastSignificantBits()).array();\n        return Base58BitcoinFlavor.encode(bytes);\n    }\n\n    public static UUID fromShortText(String shortTextUUID) {\n        if (StringUtils.isEmpty(shortTextUUID)) {\n            return null;\n        }\n\n        byte[] bytes = Base58BitcoinFlavor.decode(shortTextUUID);\n        ByteBuffer bb = ByteBuffer.wrap(bytes);\n\n        return new UUID(bb.getLong(), bb.getLong());\n    }\n\n    /**\n     * This method generates a unique short text which contains only simple characters with a fixed size.\n     * The text itself has no sematic meaning anymore.\n     * <p>\n     * Examples:\n     * - QMXpzubjJDT5azBE3PTx2b\n     * - NUUxTaCt1QvwXifqTuSv6X\n     * - FUHK1JQLrW5PykcJLYrVWM\n     * - Kxr3hg9eDXb58SvriHEd4b\n     */\n    public static String generateShortTextUUID() {\n        String uuid = toShortText(UUID.randomUUID());\n\n        int lengthOrig = StringUtils.length(uuid);\n        if (lengthOrig < EXPECTED_FIXED_SIZE) {\n            // length is not fixed. Add some more random characters.\n            // Still we ONLY want the allowed characters and no special or similar looking one.\n            // Hence take it of another UUID we generate\n            String uuid2 = toShortText(UUID.randomUUID());\n            uuid = uuid + StringUtils.substring(uuid2, 0, EXPECTED_FIXED_SIZE - lengthOrig);\n\n        }\n        return uuid;\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/Unsafe.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils;\n\nimport java.util.concurrent.Callable;\nimport java.util.function.Function;\n\n\npublic interface Unsafe {\n\n    static <R, P> R execute(Function<P, R> f, P param) {\n        if (f == null) {\n            return null;\n        }\n\n        try {\n            return f.apply(param);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    static <R> R execute(Callable<R> c) {\n        if (c == null) {\n            return null;\n        }\n\n        try {\n            return c.call();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    static void execute(UnsafeRunnable c) {\n        if (c == null) {\n            return;\n        }\n\n        try {\n            c.run();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/UnsafeRunnable.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils;\n\n@FunctionalInterface\npublic interface UnsafeRunnable {\n\n    void run() throws Exception;\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/Utils.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.apache.commons.math3.stat.descriptive.rank.Median;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.client.SimpleClientHttpRequestFactory;\nimport org.springframework.web.client.RestTemplate;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.function.ToDoubleFunction;\n\npublic class Utils {\n\n    private static final Logger log = LoggerFactory.getLogger(Utils.class);\n\n\n    private static final String[] IP_HEADERS = {\n            \"X-Forwarded-For\",\n            \"Proxy-Client-IP\",\n            \"WL-Proxy-Client-IP\",\n            \"HTTP_X_FORWARDED_FOR\",\n            \"HTTP_X_FORWARDED\",\n            \"HTTP_X_CLUSTER_CLIENT_IP\",\n            \"HTTP_CLIENT_IP\",\n            \"HTTP_FORWARDED_FOR\",\n            \"HTTP_FORWARDED\",\n            \"HTTP_VIA\",\n            \"REMOTE_ADDR\"\n\n            // you can add more matching headers here ...\n    };\n\n    public static String getRequestIP(HttpServletRequest request) {\n        for (String header : IP_HEADERS) {\n            String value = request.getHeader(header);\n            if (value == null || value.isEmpty()) {\n                continue;\n            }\n            return Arrays.toString(value.split(\"\\\\s*,\\\\s*\"));\n\n        }\n        return Arrays.toString(new String[]{request.getRemoteAddr()});\n    }\n\n    public static <T> double getMedian(Collection<T> entries, ToDoubleFunction<T> valueSupplier, int limit) {\n\n        assert entries != null : \"Entries must not be null\";\n        assert valueSupplier != null : \"Supplier must not be null\";\n\n        Median median = new Median();\n\n        if (limit < 0) {\n            limit = 0;\n        }\n\n        int samples = entries.size();\n        if (limit > 0 && entries.size() >= limit) {\n            samples = limit;\n        }\n\n        double[] values = new double[samples];\n\n        Iterator<T> iterator = entries.iterator();\n        int startPos = entries.size() - samples;\n        int posRel = 0;\n        for (int i = 0; i < entries.size(); i++) {\n            double value = valueSupplier.applyAsDouble(iterator.next());\n\n\n            if (i < startPos) {\n                continue;\n            }\n\n            values[posRel] = value;\n            posRel++;\n        }\n\n        return median.evaluate(values);\n    }\n\n    public static <T> T getLastElement(final Collection<T> c) {\n        if (c == null || c.size() <= 0) {\n            return null;\n        }\n        final Iterator<T> itr = c.iterator();\n        T lastElement = itr.next();\n        while (itr.hasNext()) {\n            lastElement = itr.next();\n        }\n        return lastElement;\n    }\n\n    public static BigDecimal toBigDecimalWithRounding(double d) {\n        return toBigDecimalWithRounding(d, 3);\n    }\n\n    public static BigDecimal toBigDecimalWithRounding(double d, int precision) {\n        return new BigDecimal(d).setScale(precision, RoundingMode.HALF_UP);\n    }\n\n    public static LocalDateTime convertUTCToSwitzerlandTime(LocalDateTime dateTime) {\n        if (dateTime == null) {\n            return null;\n        }\n        return dateTime.atZone(ZoneId.of(\"UTC\")).withZoneSameInstant(ZoneId.of(\"Europe/Zurich\")).toLocalDateTime();\n    }\n\n    public static String formatLocalDateTimeToLocalSwitzerlandTime(LocalDateTime localDateTime) {\n        DateTimeFormatter df = DateTimeFormatter.ofPattern(\"dd MM yyyy HH:mm:ss\");\n        return df.format(convertUTCToSwitzerlandTime(localDateTime));\n    }\n\n    public static RestTemplate getRestTemplate() {\n        SimpleClientHttpRequestFactory simpleClientHttpRequestFactory = new SimpleClientHttpRequestFactory();"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/Utils.java. Directly output the source content.", "input": "", "output": "        simpleClientHttpRequestFactory.setConnectTimeout(5000);\n        simpleClientHttpRequestFactory.setReadTimeout(5000);\n        return new RestTemplate(simpleClientHttpRequestFactory);\n    }\n\n    public static String toJSON(Object o) {\n        if (o == null) {\n            return null;\n        }\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            return mapper.writeValueAsString(o);\n        } catch (JsonProcessingException e) {\n            log.error(\"Error serializing object to JSON. object=\" + o + \" e=\" + e.toString(), e);\n            return \"\";\n        }\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/mutex/GlobalSynced.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils.mutex;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class GlobalSynced<T> {\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n    private final ReentrantLock reentrantLock = new ReentrantLock();\n    private final T syncedObject;\n    private final Hooks<T> hooks;\n\n\n    public GlobalSynced(T syncedObject, Hooks<T> hooks) {\n        this.syncedObject = syncedObject;\n        this.hooks = hooks;\n    }\n\n    public void requestOperation(MutexOperation<T> m) {\n\n        try {\n\n            // lock and potentially wait if required\n            reentrantLock.lock();\n\n            if (hooks != null) {\n                hooks.before(syncedObject);\n            }\n\n            m.operateGlobalSynced(syncedObject);\n\n        } catch (Throwable t1) {\n\n            try {\n                if (hooks != null) {\n                    hooks.after(syncedObject); // always call after\n                }\n            } catch (Throwable t2) {\n                log.error(\"Error in after hook\", t2);\n            }\n\n\n        } finally {\n            reentrantLock.unlock();\n        }\n    }\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/mutex/Hooks.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils.mutex;\n\npublic interface Hooks<T> {\n\n    void before(T t) throws  Throwable;\n\n    void after(T t) throws Throwable;\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/mutex/MutexOperation.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils.mutex;\n\npublic interface MutexOperation<T> {\n\n    void operateGlobalSynced(T t) throws Throwable;\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/spring/MyStartUpListener.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils.spring;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.SpringApplicationRunListener;\nimport org.springframework.context.ConfigurableApplicationContext;\n\nimport java.time.Duration;\n\n/**\n * Register in src/main/resources/META-INF/spring.factories\n * org.springframework.boot.SpringApplicationRunListener= com.x8ing.thsensor.thserver.utils.spring.MyStartUpListener\n */\npublic class MyStartUpListener implements SpringApplicationRunListener {\n\n\n    public MyStartUpListener(SpringApplication application, String[] args) {\n        super();\n    }\n\n\n    @Override\n    public void ready(ConfigurableApplicationContext context, Duration timeTaken) {\n        StartupData startupData = context.getBean(StartupData.class);\n        startupData.setStartupTimeTakenInMillis(timeTaken.toMillis());\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/utils/spring/StartupData.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils.spring;\n\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class StartupData {\n\n    private long startupTimeTakenInMillis;\n\n    public long getStartupTimeTakenInMillis() {\n        return startupTimeTakenInMillis;\n    }\n\n    public void setStartupTimeTakenInMillis(long startupTimeTakenInMillis) {\n        this.startupTimeTakenInMillis = startupTimeTakenInMillis;\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/CorsFilter.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.web;\n\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.*;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n\n@Component\npublic class CorsFilter implements Filter {\n\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n\n    }\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse r, FilterChain chain) throws IOException, ServletException {\n        HttpServletResponse response = (HttpServletResponse) r;\n\n        response.addHeader(\"Access-Control-Allow-Origin\", \"*\");\n        response.addHeader(\"Access-Control-Allow-Credentials\", \"true\");\n        response.addHeader(\"Access-Control-Allow-Headers\", \"Content-Type, *, X-Requested-With\"); // X-Requested-With avoid not allowed\n        response.addHeader(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n\n        chain.doFilter(request, response);\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/DateTimeConfig.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.web;\n\nimport com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;\nimport com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.datetime.standard.DateTimeFormatterRegistrar;\nimport org.springframework.format.support.DefaultFormattingConversionService;\nimport org.springframework.format.support.FormattingConversionService;\n\nimport java.text.ParseException;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\n\n@Configuration\n@SpringBootConfiguration\npublic class DateTimeConfig {\n\n    // private static final String dateFormat = \"yyyyMMdd\";\n    // private static final String dateTimeFormat = \"yyyyMMdd-HHmmss\";\n\n    private static final DateTimeFormatter dateFormat = DateTimeFormatter.ISO_DATE;\n    private static final DateTimeFormatter dateTimeFormat = DateTimeFormatter.ISO_DATE_TIME;\n\n\n    @Bean\n    public FormattingConversionService conversionService() {\n        DefaultFormattingConversionService conversionService =\n                new DefaultFormattingConversionService(false);\n\n        DateTimeFormatterRegistrar registrar = new DateTimeFormatterRegistrar();\n        registrar.setDateFormatter(dateFormat);\n        registrar.setDateTimeFormatter(dateTimeFormat);\n        // registrar.setDateTimeFormatter(DateTimeFormatter.ofPattern(\"dd.MM.yyyy HH:mm:ss\"));\n        registrar.registerFormatters(conversionService);\n\n        // other desired formatters\n\n        return conversionService;\n    }\n\n\n    // @Bean\n    public Jackson2ObjectMapperBuilderCustomizer jsonCustomizer() {\n        return builder -> {\n            builder.simpleDateFormat(dateTimeFormat.toString());\n            builder.serializers(new LocalDateSerializer(dateFormat));\n            builder.serializers(new LocalDateTimeSerializer(dateTimeFormat));\n        };\n    }\n\n\n    @Bean\n    public Formatter<LocalDate> localDateFormatter() {\n        return new Formatter<LocalDate>() {\n            @Override\n            public LocalDate parse(String text, Locale locale) throws ParseException {\n                return LocalDate.parse(text, dateFormat);\n            }\n\n            @Override\n            public String print(LocalDate object, Locale locale) {\n                return dateFormat.format(object);\n            }\n        };\n    }\n\n    @Bean\n    public Formatter<LocalDateTime> localDateTimeFormatter() {\n        return new Formatter<LocalDateTime>() {\n            @Override\n            public LocalDateTime parse(String text, Locale locale) throws ParseException {\n                return LocalDateTime.parse(text, dateTimeFormat);\n            }\n\n            @Override\n            public String print(LocalDateTime object, Locale locale) {\n                return dateTimeFormat.format(object);\n            }\n        };\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/MvcConfig.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.web;\n\nimport com.x8ing.thsensor.thserver.db.dao.SessionRequestRepository;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n// Attention: DO NOT ADD... It will override and destroy the applicaiton properties settings\n// @EnableWebMvc\n// https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#web.servlet.spring-mvc.auto-configuration\n\n@Configuration\n@Component\npublic class MvcConfig implements WebMvcConfigurer {\n\n    private final SessionRequestRepository sessionRequestRepository;\n\n    public MvcConfig(SessionRequestRepository sessionRequestRepository) {\n        super();\n        this.sessionRequestRepository = sessionRequestRepository;\n    }\n\n    @Override\n    public void addInterceptors(final InterceptorRegistry registry) {\n        registry.addInterceptor(new MyRequestInterceptor(sessionRequestRepository));\n    }\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/MyRequestInterceptor.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.web;\n\nimport com.x8ing.thsensor.thserver.db.dao.SessionRequestRepository;\nimport com.x8ing.thsensor.thserver.db.entity.SessionRequest;\nimport com.x8ing.thsensor.thserver.utils.Utils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.util.WebUtils;\n\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n\npublic class MyRequestInterceptor implements HandlerInterceptor {\n\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n    public static final String TH_KEY_CLIENT_ID = \"TH-KEY-CLIENT-ID\"; // underscore not allowed by default in nginx\n    public static String CLIENT_VERSION = \"TH-KEY-CLIENT-VERSION\"; // underscore not allowed by default in nginx\n\n    private static final String START_TIME_ATTR_NAME = \"TH-START-TIME\";\n\n    private final SessionRequestRepository sessionRequestRepository;\n\n    public MyRequestInterceptor(SessionRequestRepository sessionRequestRepository) {\n        this.sessionRequestRepository = sessionRequestRepository;\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        long startTime = System.currentTimeMillis();\n        request.setAttribute(START_TIME_ATTR_NAME, startTime);\n        return true;\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n        long startTime = (Long) request.getAttribute(START_TIME_ATTR_NAME);\n        long endTime = System.currentTimeMillis();\n        long executionTime = endTime - startTime;\n\n        String path = request.getServletPath();\n        String clientId = request.getHeader(TH_KEY_CLIENT_ID); // id generated by the client\n        String clientVersion = request.getHeader(CLIENT_VERSION);\n\n        String ip = Utils.getRequestIP(request);\n\n        Cookie cookie = WebUtils.getCookie(request, MySessionFilter.TH_SERVER_SESSION_ID);\n        String sessionId = \"unknown\";\n        if (cookie != null) {\n            sessionId = cookie.getValue();\n        }\n\n        long dtProcessing = System.currentTimeMillis() - startTime;\n\n        // save requests only\n        if (MySessionFilter.isSessionRelevantRequest(request)) {\n\n            SessionRequest sessionRequest = new SessionRequest();\n            sessionRequest.setPath(path);\n            sessionRequest.setSessionId(sessionId);\n            sessionRequest.setClientId(clientId);\n            sessionRequest.setClientVersion(clientVersion);\n            sessionRequest.setIp(ip);\n            sessionRequest.setProcessingTime(dtProcessing);\n            sessionRequest.setHttpStatus(String.valueOf(response.getStatus()));\n            sessionRequest.setException(ex != null ? ex.getMessage() : null);\n\n            sessionRequestRepository.save(sessionRequest);\n\n            long dtTotal = System.currentTimeMillis() - startTime;\n\n            log.info(\"Got request and saved it. dtTotal=\" + dtTotal + \" \" + sessionRequest);\n\n        } else {\n\n            log.info(\"Did receive a request which was not persisted. url=\" + path);\n        }\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/MySessionFilter.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.web;\n\nimport com.x8ing.thsensor.thserver.db.dao.SessionDeviceRepository;\nimport com.x8ing.thsensor.thserver.db.entity.SessionDevice;\nimport com.x8ing.thsensor.thserver.utils.UUIDUtils;\nimport com.x8ing.thsensor.thserver.utils.Utils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.util.WebUtils;\n\nimport javax.servlet.*;\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.stream.Stream;\n\n\n@Component\npublic class MySessionFilter implements Filter {\n\n    private final Logger log = LoggerFactory.getLogger(this.getClass());\n\n    public final static String TH_SERVER_SESSION_ID = \"TH-SERVER-SESSION-ID\";\n\n    private final SessionDeviceRepository sessionDeviceRepository;\n\n    public MySessionFilter(SessionDeviceRepository sessionDeviceRepository) {\n        this.sessionDeviceRepository = sessionDeviceRepository;\n    }\n\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n\n    }\n\n    @Override\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n\n        HttpServletResponse response = (HttpServletResponse) res;\n        HttpServletRequest request = (HttpServletRequest) req;\n        Cookie cookie = WebUtils.getCookie(request, TH_SERVER_SESSION_ID);\n\n        if (cookie == null) {\n            cookie = new Cookie(TH_SERVER_SESSION_ID, UUIDUtils.generateShortTextUUID());\n            cookie.setHttpOnly(false);\n            cookie.setMaxAge(60 * 60 * 24 * 365); // 1Y\n            cookie.setPath(\"/\");\n        }\n\n        String sessionId = cookie.getValue();\n\n        // save only relevant requests\n        if (isSessionRelevantRequest(request)) {\n\n            // need to save it\n            SessionDevice sessionDevice = new SessionDevice();\n            sessionDevice.setSessionId(sessionId);\n            sessionDevice.setIp(Utils.getRequestIP(request));\n            sessionDevice.setAgentString(request.getHeader(\"User-Agent\"));\n            sessionDevice.setClientId(getClientId(request));\n\n            sessionDeviceRepository.findById(sessionId).ifPresentOrElse(\n                    device -> log.debug(\"Is already in DB\"),\n                    () -> {\n                        log.info(\"Need to create a session device, as it did not exist.\" + sessionDevice);\n                        sessionDeviceRepository.save(sessionDevice);\n                    });\n        }\n\n        //add cookie to response\n        response.addCookie(cookie);\n\n        // keep going with the filters\n        chain.doFilter(request, response);\n    }\n\n    public static String getClientId(HttpServletRequest request) {\n        return request.getHeader(TH_SERVER_SESSION_ID);\n    }\n\n    public static boolean isSessionRelevantRequest(HttpServletRequest request) {\n        String path = request.getRequestURI();\n        return path != null\n                && Stream.of(\"html\", \"htm\", \"css\", \"png\", \"svg\", \"woff\", \"woff2\", \"json\", \"js\").noneMatch(s -> StringUtils.endsWithIgnoreCase(path, s))\n                && !StringUtils.equals(\"/\", path)\n                && !StringUtils.equals(\"/pi11\", path)\n                && !StringUtils.equals(\"/pi11/\", path)\n                && !StringUtils.equalsIgnoreCase(request.getMethod(), HttpMethod.OPTIONS.name()) // ignore preflight requests\n                ;\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/dialogflow/DialogFlowWebhookController.java. Directly output the source content.", "input": "", "output": "//package com.x8ing.thsensor.thserver.web.dialogflow;\n//\n//import com.google.api.client.json.JsonGenerator;\n//import com.google.api.client.json.jackson2.JacksonFactory;\n//import com.google.api.services.dialogflow.v3.model.GoogleCloudDialogflowCxV3WebhookRequest;\n//import com.google.api.services.dialogflow.v3.model.GoogleCloudDialogflowV2IntentMessage;\n//import com.google.api.services.dialogflow.v3.model.GoogleCloudDialogflowV2IntentMessageText;\n//import com.google.api.services.dialogflow.v3.model.GoogleCloudDialogflowV2WebhookResponse;\n//import com.x8ing.thsensor.thserver.web.services.heating.HeatPumpDataService;\n//import org.slf4j.Logger;\n//import org.slf4j.LoggerFactory;\n//import org.springframework.http.MediaType;\n//import org.springframework.web.bind.annotation.PostMapping;\n//import org.springframework.web.bind.annotation.RequestBody;\n//import org.springframework.web.bind.annotation.RestController;\n//\n//import java.io.IOException;\n//import java.io.StringWriter;\n//import java.util.List;\n//\n//@RestController\n//public class DialogFlowWebhookController {\n//\n//    private final Logger log = LoggerFactory.getLogger(this.getClass());\n//\n//    private final JacksonFactory jacksonFactory;\n//\n//    private final HeatPumpDataService heatPumpDataService;\n//\n//    // https://www.javacodemonk.com/dialoglfow-fulfillment-with-spring-boot-a933ec21\n//\n//    // https://botflo.com/dialogflow-python-webhook-tutorial/\n//\n//    public DialogFlowWebhookController(JacksonFactory jacksonFactory, HeatPumpDataService heatPumpDataService) {\n//        this.jacksonFactory = jacksonFactory;\n//        this.heatPumpDataService = heatPumpDataService;\n//    }\n//\n//    // http://mindalyze.hopto.org:49088/pi11/dialalogflow/heating\n//    // https://mindalyze.com/pi100/dialalogflow/heating\n//    @PostMapping(value = \"/dialalogflow/heating\", produces = {MediaType.APPLICATION_JSON_VALUE})\n//    public String webhook(@RequestBody String rawData) throws Exception {\n//\n//        // API\n//        // https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment\n//\n//        //Step 1. Parse the request\n//\n//\n//        GoogleCloudDialogflowCxV3WebhookRequest request = jacksonFactory\n//                .createJsonParser(rawData)\n//                .parse(GoogleCloudDialogflowCxV3WebhookRequest.class);\n//\n//        log.info(request.toPrettyString());\n//\n//\n//        //Step 2. Process the request\n//        //Step 3. Build the response message\n//        GoogleCloudDialogflowV2IntentMessage msg = new GoogleCloudDialogflowV2IntentMessage();\n//        GoogleCloudDialogflowV2IntentMessageText text = new GoogleCloudDialogflowV2IntentMessageText();\n//        text.setText(List.of(\"Boiler Temperatur ist \"+heatPumpDataService.getCurrent().getBoilerTemp()));\n//        msg.setText(text);\n//\n//        GoogleCloudDialogflowV2WebhookResponse response = new GoogleCloudDialogflowV2WebhookResponse();\n//        response.setFulfillmentMessages(List.of(msg));\n//        StringWriter stringWriter = new StringWriter();\n//        JsonGenerator jsonGenerator = jacksonFactory.createJsonGenerator(stringWriter);\n//        jsonGenerator.enablePrettyPrint();\n//        jsonGenerator.serialize(response);\n//        jsonGenerator.flush();\n//        return stringWriter.toString();\n//\n//       // return \"{'fulfillmentText2': 'This is a response from webhook.'}\";\n////        return \"{\\n\" +\n////                \"  \\\"fulfillmentText\\\": \\\"The sum of the two numbers is:\\\",\\n\" +\n////                \"  \\\"source\\\": \\\"webhookdata\\\"\\n\" +\n////                \"}\";\n//    }\n//}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/dialogflow/JSONFactory.java. Directly output the source content.", "input": "", "output": "//package com.x8ing.thsensor.thserver.web.dialogflow;\n//\n//import com.google.api.client.json.jackson2.JacksonFactory;\n//import org.springframework.context.annotation.Bean;\n//import org.springframework.stereotype.Component;\n//\n//@Component\n//public class JSONFactory {\n//\n//    @Bean\n//    public JacksonFactory jacksonFactory() {\n//        return JacksonFactory.getDefaultInstance();\n//    }\n//}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/services/email/EmailService.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.web.services.email;\n\nimport com.x8ing.thsensor.thserver.utils.MailSend;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\n@RequestMapping(\"/email\")\npublic class EmailService {\n\n    private final MailSend mailSend;\n\n    public EmailService(MailSend mailSend) {\n        this.mailSend = mailSend;\n    }\n\n    @RequestMapping(\"/send\")\n    @ResponseBody\n    public String send(\n            @RequestParam(defaultValue = \"Test from raspberry\") String subject,\n            @RequestParam(defaultValue = \"This is a test only\") String content) {\n        return mailSend.send(subject, content);\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/services/heating/HeatPumpDataService.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.web.services.heating;\n\nimport com.x8ing.thsensor.thserver.db.dao.HeatPumpRepository;\nimport com.x8ing.thsensor.thserver.db.entity.HeatPumpEntity;\nimport com.x8ing.thsensor.thserver.db.entity.HeatPumpStatisticsEntity;\nimport com.x8ing.thsensor.thserver.db.entity.analytics.BoilerStatsByDayOfWeek;\nimport com.x8ing.thsensor.thserver.db.entity.analytics.BoilerStatsByHour;\nimport com.x8ing.thsensor.thserver.db.entity.analytics.SoleInOutDeltaInOperationStats;\nimport com.x8ing.thsensor.thserver.device.service.HeatingDataReadService;\nimport com.x8ing.thsensor.thserver.utils.ThException;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.util.Date;\nimport java.util.List;\n\n@Controller\n@RequestMapping(\"/heatpump-data\")\npublic class HeatPumpDataService {\n\n    private final HeatPumpRepository heatPumpRepository;\n    private final HeatingDataReadService heatingDataReadService;\n\n    public HeatPumpDataService(HeatPumpRepository heatPumpRepository, HeatingDataReadService heatingDataReadService) {\n        this.heatPumpRepository = heatPumpRepository;\n        this.heatingDataReadService = heatingDataReadService;\n    }\n\n    @RequestMapping(\"/current\")\n    @ResponseBody\n    public HeatPumpEntity getCurrent() throws Exception {\n        // done in interceptor\n        // log.info(\"Got request for current. ip=\" + Utils.getRequestIP(request));\n        return heatPumpRepository.getLastEntries(1).stream().findFirst().orElse(null);\n    }\n\n    @RequestMapping(\"/lastValues\")\n    @ResponseBody\n    public List<HeatPumpEntity> lastValues(\n            @RequestParam(name = \"maxRows\", required = false, defaultValue = \"1500\") int maxRows\n    ) throws Exception {\n        return heatPumpRepository.getLastEntries(maxRows);\n    }\n\n\n    /**\n     * format to use params as ISO:\n     * {{BASE_URL}}/heatpump-data/getBetweenDates?maxRows=100&start=2021-12-24T09:42:59.437995&end=2031-12-25T09:42:59.437995\n     * <p>\n     * Date ISO format defined in application.yml file.\n     */\n    @RequestMapping(\"/getBetweenDates\")\n    @ResponseBody\n    public List<HeatPumpStatisticsEntity> getBetweenDates(\n            @RequestParam(name = \"start\") Date start,\n            @RequestParam(name = \"end\") Date end,\n            @RequestParam(name = \"maxRows\", required = false, defaultValue = \"-1\") int maxRows,\n            @RequestParam(name = \"groupEveryNthSecond\", required = false, defaultValue = \"-1\") int groupEveryNthSecond\n    ) throws Exception {\n\n        if (groupEveryNthSecond > 0 && maxRows > 0) {\n            throw new ThException(\"Either supply 'groupEveryNthSecond' or 'maxRows' as a param. Both is not possible\");\n        }\n\n        if (groupEveryNthSecond < 0 && maxRows < 0) {\n            throw new ThException(\"At least supply one limiting criteria, either 'groupEveryNthSecond' or 'maxRows' as a param.\");\n        }\n\n        if (groupEveryNthSecond > 0) {\n            return heatPumpRepository.findBetweenDatesLimitByFixedIntervalStats(start, end, groupEveryNthSecond);\n        } else if (maxRows > 0) {\n            return heatPumpRepository.findBetweenDatesLimitByRowsStats(start, end, maxRows);\n        }\n        throw new ThException(\"invalid state\");\n    }\n\n    @RequestMapping(\"/getBoilerStatsByHour\")\n    @ResponseBody\n    public List<BoilerStatsByHour> getBoilerStatsByHour(\n            @RequestParam(name = \"start\") Date start,\n            @RequestParam(name = \"end\") Date end\n    ) throws Exception {\n        return heatPumpRepository.getBoilerStatsByHour(start, end);\n    }\n\n    @RequestMapping(\"/getBoilerStatsByDayOfWeek\")\n    @ResponseBody\n    public List<BoilerStatsByDayOfWeek> getBoilerStatsByDayOfWeek(\n            @RequestParam(name = \"start\") Date start,\n            @RequestParam(name = \"end\") Date end\n    ) throws Exception {"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/services/heating/HeatPumpDataService.java. Directly output the source content.", "input": "", "output": "        return heatPumpRepository.getBoilerStatsByDayOfWeek(start, end);\n    }\n\n    @RequestMapping(\"/getSoleDeltaInOperationStats\")\n    @ResponseBody\n    public List<SoleInOutDeltaInOperationStats> getSoleDeltaInOperationStats(\n            @RequestParam(name = \"start\") Date start,\n            @RequestParam(name = \"end\") Date end,\n            @RequestParam(name = \"maxRows\", required = false, defaultValue = \"-1\") int maxRows,\n            @RequestParam(name = \"groupEveryNthSecond\", required = false, defaultValue = \"-1\") int groupEveryNthSecond\n    ) throws Exception {\n        return heatPumpRepository.getSoleDeltaInOperationStats(start, end, maxRows, groupEveryNthSecond);\n    }\n\n    @RequestMapping(\"/scanRegisters\")\n    @ResponseBody\n    public List<String> scanRegisters(\n            @RequestParam(name = \"maxRegister\", defaultValue = \"510\", required = false) int maxRegister) {\n        return heatingDataReadService.scanAllRegisters(maxRegister);\n    }\n\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/services/info/InfoService.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.web.services.info;\n\nimport com.x8ing.thsensor.thserver.web.services.info.bean.InfoBean;\nimport com.x8ing.thsensor.thserver.web.services.info.bean.MemoryInfo;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\n@RequestMapping(\"/info\")\npublic class InfoService {\n\n    private final InfoBean infoBean;\n\n    public InfoService(InfoBean infoBean) {\n        this.infoBean = infoBean;\n    }\n\n    @RequestMapping(\"/general\")\n    @ResponseBody\n    public InfoBean getInfo() {\n        return infoBean;\n    }\n\n    @RequestMapping(\"/memory\")\n    @ResponseBody\n    public MemoryInfo getMemoryInfo() {\n        return MemoryInfo.getCurrent();\n    }\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/services/info/bean/InfoBean.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.web.services.info.bean;\n\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class InfoBean {\n\n    private String deviceName = \"\";\n\n    @Value(\"${thserver.buildTimestampServer}\")\n    private String buildTimestampServer = \"\";\n\n    @Value(\"${thserver.buildVersionServer}.0\")\n    private String buildVersionServer = \"\";\n\n    public String getDeviceName() {\n        return deviceName;\n    }\n\n    public void setDeviceName(String deviceName) {\n        this.deviceName = deviceName;\n    }\n\n    public String getBuildTimestampServer() {\n        return buildTimestampServer;\n    }\n\n    public void setBuildTimestampServer(String buildTimestampServer) {\n        this.buildTimestampServer = buildTimestampServer;\n    }\n\n    public String getBuildVersionServer() {\n        return buildVersionServer;\n    }\n\n    public void setBuildVersionServer(String buildVersionServer) {\n        this.buildVersionServer = buildVersionServer;\n    }\n\n    @Override\n    public String toString() {\n        return \"InfoBean{\" +\n                \"deviceName='\" + deviceName + '\\'' +\n                \", buildTimestampServer='\" + buildTimestampServer + '\\'' +\n                \", buildVersionServer='\" + buildVersionServer + '\\'' +\n                '}';\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/services/info/bean/MemoryInfo.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.web.services.info.bean;\n\npublic class MemoryInfo {\n\n    private long totalMemoryKb;\n\n    private long maxMemoryKb;\n\n    private long freeMemoryKb;\n\n    private long availableProcessors;\n\n    public MemoryInfo(long totalMemoryKb, long maxMemoryKb, long freeMemoryKb) {\n        this.totalMemoryKb = totalMemoryKb;\n        this.maxMemoryKb = maxMemoryKb;\n        this.freeMemoryKb = freeMemoryKb;\n    }\n\n    public MemoryInfo() {\n    }\n\n    public static MemoryInfo getCurrent() {\n        MemoryInfo memoryInfo = new MemoryInfo();\n        final int kB = 1024;\n\n        memoryInfo.setFreeMemoryKb(Runtime.getRuntime().freeMemory() / kB);\n        memoryInfo.setTotalMemoryKb(Runtime.getRuntime().totalMemory() / kB);\n        memoryInfo.setMaxMemoryKb(Runtime.getRuntime().maxMemory() / kB);\n        memoryInfo.setAvailableProcessors(Runtime.getRuntime().availableProcessors());\n\n\n        return memoryInfo;\n    }\n\n    public long getTotalMemoryKb() {\n        return totalMemoryKb;\n    }\n\n    public void setTotalMemoryKb(long totalMemoryKb) {\n        this.totalMemoryKb = totalMemoryKb;\n    }\n\n    public long getMaxMemoryKb() {\n        return maxMemoryKb;\n    }\n\n    public void setMaxMemoryKb(long maxMemoryKb) {\n        this.maxMemoryKb = maxMemoryKb;\n    }\n\n    public long getFreeMemoryKb() {\n        return freeMemoryKb;\n    }\n\n    public void setFreeMemoryKb(long freeMemoryKb) {\n        this.freeMemoryKb = freeMemoryKb;\n    }\n\n    public long getAvailableProcessors() {\n        return availableProcessors;\n    }\n\n    public void setAvailableProcessors(long availableProcessors) {\n        this.availableProcessors = availableProcessors;\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/services/meteoswiss/MeteoSwissService.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.web.services.meteoswiss;\n\nimport com.x8ing.thsensor.thserver.db.dao.meteoswiss.MeteoSwissRepository;\nimport com.x8ing.thsensor.thserver.db.dao.meteoswiss.MeteoSwissStatsRepository;\nimport com.x8ing.thsensor.thserver.db.entity.meteoswiss.MeteoSwissEntity;\nimport com.x8ing.thsensor.thserver.db.entity.meteoswiss.MeteoSwissStatisticsEntity;\nimport com.x8ing.thsensor.thserver.utils.ThException;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@Controller\n@RequestMapping(\"/meteo-swiss\")\npublic class MeteoSwissService {\n\n    private final MeteoSwissRepository meteoSwissRepository;\n    private final MeteoSwissStatsRepository meteoSwissStatsRepository;\n\n    public MeteoSwissService(MeteoSwissRepository meteoSwissRepository, MeteoSwissStatsRepository meteoSwissStatsRepository) {\n        this.meteoSwissRepository = meteoSwissRepository;\n        this.meteoSwissStatsRepository = meteoSwissStatsRepository;\n    }\n\n    @RequestMapping(\"/current\")\n    @ResponseBody\n    public MeteoSwissEntity getCurrent(\n            @RequestParam(name = \"stationId\", required = true) String stationId\n    ) throws Exception {\n        // done in interceptor\n        // log.info(\"Got request for current. ip=\" + Utils.getRequestIP(request));\n        return meteoSwissRepository.getLastEntries(stationId, 1).stream().findFirst().orElse(null);\n    }\n\n    @RequestMapping(\"/lastValues\")\n    @ResponseBody\n    public List<MeteoSwissEntity> lastValues(\n            @RequestParam(name = \"maxRows\", required = false, defaultValue = \"1500\") int maxRows,\n            @RequestParam(name = \"stationId\", required = true) String stationId\n    ) throws Exception {\n        return meteoSwissRepository.getLastEntries(stationId, maxRows);\n    }\n\n\n    /**\n     * format to use params as ISO:\n     * {{BASE_URL}}/heatpump-data/getBetweenDates?maxRows=100&start=2021-12-24T09:42:59.437995&end=2031-12-25T09:42:59.437995\n     * <p>\n     * Date ISO format defined in application.yml file.\n     */\n    @RequestMapping(\"/getBetweenDates\")\n    @ResponseBody\n    public List<MeteoSwissStatisticsEntity> getBetweenDates(\n            @RequestParam(name = \"start\") Date start,\n            @RequestParam(name = \"end\") Date end,\n            @RequestParam(name = \"maxRows\", required = false, defaultValue = \"-1\") int maxRows,\n            @RequestParam(name = \"groupEveryNthSecond\", required = false, defaultValue = \"-1\") int groupEveryNthSecond,\n            @RequestParam(name = \"stationIdList\", required = false) Set<String> stationIdList\n    ) throws Exception {\n\n        if (groupEveryNthSecond > 0 && maxRows > 0) {\n            throw new ThException(\"Either supply 'groupEveryNthSecond' or 'maxRows' as a param. Both is not possible\");\n        }\n\n        if (groupEveryNthSecond < 0 && maxRows < 0) {\n            throw new ThException(\"At least supply one limiting criteria, either 'groupEveryNthSecond' or 'maxRows' as a param.\");\n        }\n\n        List<MeteoSwissStatisticsEntity> result = null;\n        if (groupEveryNthSecond > 0) {\n            result = meteoSwissStatsRepository.findBetweenDatesLimitByFixedIntervalStats(start, end, groupEveryNthSecond);\n        } else if (maxRows > 0) {\n            result = meteoSwissStatsRepository.findBetweenDatesLimitByRowsStats(start, end, maxRows);\n        } else {\n            throw new ThException(\"invalid state\");\n        }\n\n        // filter on java level (less efficient), as DB side filtering seems to be tricky with a full optinal param which is part of predicate\n        // and station_id  = coalesce(:station_id, station_id)  (does not work..)"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/main/java/com/x8ing/thsensor/thserver/web/services/meteoswiss/MeteoSwissService.java. Directly output the source content.", "input": "", "output": "        if (result != null && CollectionUtils.isNotEmpty(stationIdList)) {\n            result = result.stream().\n                    filter(meteoSwissStatisticsEntity -> stationIdList.contains(meteoSwissStatisticsEntity.getStationId()))\n                    .collect(Collectors.toList());\n        }\n        return result;\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/test/java/com/x8ing/thsensor/thserver/ThserverApplicationTests.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n@SpringBootTest\npublic class ThserverApplicationTests {\n\n    @Test\n    public void contextLoads() {\n    }\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/test/java/com/x8ing/thsensor/thserver/device/service/impl/HeatingModbusReadServiceTest.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.device.service.impl;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/test/java/com/x8ing/thsensor/thserver/device/service/impl/HeatingModbusReadServiceTest.java. Directly output the source content.", "input": "", "output": "class HeatingModbusReadServiceTest {\n\n    @Test\n    void getSignedNumber() {\n\n        // positive numbers\n        assertEquals(HeatingModbusReadService.getSignedNumber(0), 0);\n        assertEquals(HeatingModbusReadService.getSignedNumber(1), 1);\n        assertEquals(HeatingModbusReadService.getSignedNumber(2), 2);\n        assertEquals(HeatingModbusReadService.getSignedNumber(10), 10);\n        assertEquals(HeatingModbusReadService.getSignedNumber(11), 11);\n        assertEquals(HeatingModbusReadService.getSignedNumber(1001), 1001);\n        assertEquals(HeatingModbusReadService.getSignedNumber(32767), 32767);\n\n\n        // negative numbers\n        assertEquals(HeatingModbusReadService.getSignedNumber(65535), -1);\n        assertEquals(HeatingModbusReadService.getSignedNumber(65534), -2);\n        assertEquals(HeatingModbusReadService.getSignedNumber(65533), -3);\n        assertEquals(HeatingModbusReadService.getSignedNumber(65523), -13);\n        assertEquals(HeatingModbusReadService.getSignedNumber(32768), -32768);\n\n\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/test/java/com/x8ing/thsensor/thserver/utils/Base58BitcoinFlavorTest.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils;\n\n\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\n\nimport java.util.Arrays;\nimport java.util.Random;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n\npublic class Base58BitcoinFlavorTest {\n\n    @Test\n    public void encodeAndDecode() {\n\n\n        checkString(1);\n        checkString(4);\n        checkString(16);\n        checkString(1024);\n\n    }\n\n    private void checkString(int length) {\n\n        System.out.println(\"\\nTest length \" + length + \" bytes\");\n\n        byte[] randomBytes = new byte[length];\n        new Random().nextBytes(randomBytes);\n\n        System.out.println(\"BYTES_IN:  \" + Arrays.toString(randomBytes));\n\n        String shortString = Base58BitcoinFlavor.encode(randomBytes);\n\n        assertFalse(StringUtils.containsAny(shortString, new char[]{',', '.', '>', '\\'', '\"'}));\n\n        System.out.println(\"SHORT_STRING: \" + shortString);\n\n        byte[] decodedBytes = Base58BitcoinFlavor.decode(shortString);\n\n        System.out.println(\"BYTES_OUT: \" + Arrays.toString(randomBytes));\n\n        assertEquals( Arrays.toString(randomBytes), Arrays.toString(decodedBytes),\"Bytes must match\");\n\n        System.out.println(\"\\n\");\n    }\n\n    @Test\n    public void checkPerformance() {\n\n        final int loops = 1000;\n\n        long t0 = System.currentTimeMillis();\n        for (int i = 0; i < loops; i++) {\n            byte[] randomBytes = new byte[64];\n            new Random().nextBytes(randomBytes);\n            String encode = Base58BitcoinFlavor.encode(randomBytes);\n            byte[] decodedBytes = Base58BitcoinFlavor.decode(encode);\n            assertEquals(Arrays.toString(randomBytes), Arrays.toString(decodedBytes));\n        }\n\n        long dt = System.currentTimeMillis() - t0;\n\n        System.out.println(\"Test iteration for \" + loops + \"  took \" + dt + \" ms.  1 encoding/decoding in \" + (1.0 * dt / loops) + \" ms.\");\n    }\n\n\n    @Test\n    public void generateShortTextUUID() {\n        for (int i = 0; i < 20; i++) {\n            System.out.println(UUIDUtils.generateShortTextUUID());\n        }\n\n    }\n\n    @Test\n    public void checkUnicodeToUTF() {\n        String testString = \"My Unicode String with special charcs \ufffd \ufffd \ufffd \\\\ \\\" = / , '   \";\n        String base58 = Base58BitcoinFlavor.encodeUnicodeStringToBase58String(testString);\n\n        System.out.println(\"\\nEncoded the test String to base58\");\n        System.out.println(\"base:    \" + testString);\n        System.out.println(\"encoded: \" + base58);\n\n        assertFalse(StringUtils.containsAny(base58, new char[]{',', '\ufffd', '\\\\', '\"'}));\n\n        assertEquals(testString, Base58BitcoinFlavor.decodeBase58ToUnicodeString(base58));\n    }\n\n    @Test\n    public void checkUnicodeToUTF2() {\n\n        for (int i = 0; i < 25; i++) {\n            String testString = RandomStringUtils.random(30);\n            String base58 = Base58BitcoinFlavor.encodeUnicodeStringToBase58String(testString);\n\n            System.out.println(\"\\nEncoded the test String to base58\");\n            System.out.println(\"base:    \" + testString);\n            System.out.println(\"encoded: \" + base58);\n\n            assertFalse(StringUtils.containsAny(base58, new char[]{',', '\ufffd', '\\\\', '\"'}));\n            assertTrue(base58.matches(\"[a-zA-Z0-9]+\"));\n\n            assertEquals(testString, Base58BitcoinFlavor.decodeBase58ToUnicodeString(base58));\n        }\n    }\n\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/test/java/com/x8ing/thsensor/thserver/utils/PhysicsTest.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils;\n\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n\npublic class PhysicsTest {\n\n    @Test\n    public void calculateAbsoluteHumidityApproximation() {\n\n        {\n            double ah = Physics.calculateAbsoluteHumidityApproximation(20, 80);\n            System.out.println(ah);\n            assertTrue(ah > 13.7 && ah < 13.9);\n        }\n        {\n            double ah = Physics.calculateAbsoluteHumidityApproximation(20, 90);\n            System.out.println(ah);\n            assertTrue(ah > 15.5 && ah < 15.6);\n        }\n\n        {\n            double ah = Physics.calculateAbsoluteHumidityApproximation(5, 50);\n            System.out.println(ah);\n            assertTrue(ah > 3.3 && ah < 3.5);\n        }\n\n\n    }\n}"}
{"instruction": "You work for a project called Warmduscher. Your task is to write source code for Warmduscher/thserver/src/test/java/com/x8ing/thsensor/thserver/utils/UUIDUtilsTest.java. Directly output the source content.", "input": "", "output": "package com.x8ing.thsensor.thserver.utils;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.UUID;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class UUIDUtilsTest {\n\n    @Test\n    public void convert1() {\n\n        UUID uuidIn = UUID.randomUUID();\n\n        System.out.println(\"UUID In: \" + uuidIn);\n\n        String shortUUID = UUIDUtils.toShortText(uuidIn);\n        System.out.println(\"Short UUID: \" + shortUUID);\n\n\n        UUID uuidOut = UUIDUtils.fromShortText(shortUUID);\n        System.out.println(\"UUID In: \" + uuidIn);\n\n        assertEquals(uuidIn, uuidOut);\n\n        assertEquals(uuidIn.toString(), uuidOut.toString());\n\n    }\n\n    @Test\n    public void convertNull() {\n\n        String shortUUID = UUIDUtils.toShortText(null);\n        System.out.println(\"Short UUID: \" + shortUUID);\n        UUID uuidOut = UUIDUtils.fromShortText(shortUUID);\n\n        assertNull(uuidOut);\n\n    }\n\n    @Test\n    public void testPrintAFew() {\n        System.out.println(\"\\n\\nPrint a few samples:\\n\");\n        for (int i = 0; i < 25; i++) {\n            System.out.println(\"Short UUID sample: \" + UUIDUtils.generateShortTextUUID());\n        }\n\n        System.out.println(\"\\n\\n\");\n    }\n\n    @Test\n    public void testPerformance() {\n\n        // warm-up\n        for (int i = 0; i < 10000; i++) {\n            UUIDUtils.generateShortTextUUID();\n        }\n\n        long t0 = System.currentTimeMillis();\n        final int LOOP = 100000;\n        for (int i = 0; i < LOOP; i++) {\n            String uuid = UUIDUtils.generateShortTextUUID();\n            if (\"trick_out_optimizer\".equals(uuid)) {\n                System.out.println(\"won't happen but the JIT will not know\");\n            }\n        }\n        long dt = System.currentTimeMillis() - t0;\n        System.out.println(\"time for \" + LOOP + \" loops was \" + dt + \" ms. \" + (1.0 * dt / LOOP) + \" ms per one UUID\");\n\n        assertTrue( dt < 500,\"Generating the UUID took too long. dt=\" + dt);\n    }\n\n    @Test\n    public void testDuplicates() {\n        // to avoid obvious issues with uniqueness, of course, it's not a true evidence... but a start...\n        final int LOOP = 10000;\n        Set<String> ids = new HashSet<>();\n        for (int i = 0; i < LOOP; i++) {\n            String uuid = UUIDUtils.generateShortTextUUID();\n            assertFalse(ids.contains(uuid),\"Found a duplicate. this should never ever happen. duplicate: \" + uuid);\n            ids.add(uuid);\n        }\n\n    }\n\n    @Test\n    public void testLength() {\n        final int LOOP = 100000;\n        final int EXPECTED_LENGTH = UUIDUtils.EXPECTED_FIXED_SIZE;\n        for (int i = 0; i < LOOP; i++) {\n            String uuid = UUIDUtils.generateShortTextUUID();\n            int length = StringUtils.length(uuid);\n            if (length != EXPECTED_LENGTH) {\n                System.out.println(\"Got a UUID which did not expect the fixed length:\" + length + \" uuid:\" + uuid);\n            }\n            assertEquals(EXPECTED_LENGTH, length);\n        }\n    }\n}"}
